# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: 
      - main
      - develop
      - release-*
      - feature/ci_self_hosted
  pull_request:
    branches: 
      - main
      - develop
      - release-*

jobs:
  build:
    #runs-on: ${{ matrix.os }}
    #runs-on: [self-hosted]
    
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        runner: [self-hosted-raspi64]
        build_type: [Debug, Release]
        include:
          - build_type: Debug
            is_debug: true
            is_release: false
            is_stlink: false
            is_openocd: true
            is_jlink: false
          - build_type: Release
            is_debug: false
            is_release: true
            is_stlink: false
            is_openocd: true
            is_jlink: false
            
            
    runs-on: ${{ matrix.runner }}
    env:
        BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed

    steps:
    - uses: actions/checkout@v4
      with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}" >> "$GITHUB_OUTPUT"
        
    - name: ST-LINK Probe
      run: |
        st-info --probe
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}/src
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}/src

    - name: Install sonar-scanner and build-wrapper
      uses: SonarSource/sonarcloud-github-c-cpp@v3
    - name: Run build-wrapper
      run: |
          #build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build ${{ steps.strings.outputs.build-output-dir }}/src --config ${{ matrix.build_type }}
          build-wrapper-linux-aarch64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build ${{ steps.strings.outputs.build-output-dir }}/src --config ${{ matrix.build_type }}
    - name: Run sonar-scanner
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
          sonar-scanner --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json"

    - name: Archive master Debug
      uses: actions/upload-artifact@v4
      if: ${{ matrix.is_debug }}
      with:
        name: master-${{ matrix.build_type }}-${{ matrix.runner }}
        path: ${{ github.workspace }}/src/master.elf
        retention-days: 5

    - name: Archive Slave Debug
      uses: actions/upload-artifact@v4
      if: ${{ matrix.is_debug }}
      with:
        name: slave-${{ matrix.build_type }}-${{ matrix.runner }}
        path: ${{ github.workspace }}/src/slave.elf
        retention-days: 5

    - name: Archive master Release
      uses: actions/upload-artifact@v4
      if: ${{ matrix.is_release }}
      with:
        name: master-${{ matrix.build_type }}-${{ matrix.runner }}
        path: ${{ github.workspace }}/src/master.elf
        retention-days: 30

    - name: Archive Slave Release
      uses: actions/upload-artifact@v4
      if: ${{ matrix.is_release }}
      with:
        name: slave-${{ matrix.build_type }}-${{ matrix.runner }}
        path: ${{ github.workspace }}/src/slave.elf
        retention-days: 30

    - name: "List files 0"
      shell: bash
      run: ls
      
    - name: Clean artifacts directory
      run: |
        ARTIFACTS_DIR=Downloads
        if [ ! -d "$ARTIFACTS_DIR" ]; then
          echo "Das Verzeichnis $ARTIFACTS_DIR existiert nicht. Es wird erstellt."
          mkdir -p "$ARTIFACTS_DIR"
        fi
        if [ "$(ls -A $ARTIFACTS_DIR)" ]; then
          echo "Das Verzeichnis $ARTIFACTS_DIR enth√§lt Dateien. Es wird bereinigt."
          rm -rf "$ARTIFACTS_DIR/*"
        else
          echo "Das Verzeichnis $ARTIFACTS_DIR ist bereits leer."
        fi
    
    - name: "List files1"
      shell: bash
      run: ls
      
    - uses: actions/download-artifact@v4
      with: 
        name: slave-${{ matrix.build_type }}-${{ matrix.runner }}
        path: Downloads/slave-${{ matrix.build_type }}-${{ matrix.runner }}

    - name: "List files2"
      shell: bash
      run: ls -l Downloads/slave-${{ matrix.build_type }}-${{ matrix.runner }}/

    - name: ST-LINK Probe
      run: |
        st-info --probe
    - name: ELF to HEX
      run: |
        arm-none-eabi-objcopy -O ihex Downloads/slave-${{ matrix.build_type }}-${{ matrix.runner }}/slave.elf Downloads/slave-${{ matrix.build_type }}-${{ matrix.runner }}/slave.hex

    - name: Flash ST-LINK Slave Debug
      if: ${{ matrix.is_debug }}
      run: |
         st-flash --format ihex write Downloads/slave-${{ matrix.build_type }}-${{ matrix.runner }}/slave.hex

    #- name: openocd Probe
    #  run: |
    #    openocd -f interface/stlink.cfg -f target/stm32h7x.cfg  
    - name: Flash openocd Slave Debug
      if: ${{ matrix.is_debug }}
      run: |
         openocd -f interface/stlink.cfg -f target/stm32h7x.cfg \
         -c "program Downloads/slave-${{ matrix.build_type }}-${{ matrix.runner }}/slave.elf verify reset exit"
        
      
        
