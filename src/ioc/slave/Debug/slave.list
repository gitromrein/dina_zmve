
slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006160  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080063f8  080063f8  000163f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800647c  0800647c  0001647c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006484  08006484  00016484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006488  08006488  00016488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800648c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000043c  24000010  0800649c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400044c  0800649c  0002044c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00014c8c  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000021eb  00000000  00000000  00034d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000f48  00000000  00000000  00036ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000bdf  00000000  00000000  00037e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000378d6  00000000  00000000  00038a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013333  00000000  00000000  000702f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016662d  00000000  00000000  00083628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000041e8  00000000  00000000  001e9c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  001ede40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080063e0 	.word	0x080063e0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080063e0 	.word	0x080063e0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005d8:	f000 fbf6 	bl	8000dc8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 ff36 	bl	800144c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f814 	bl	800060c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005e4:	f000 f8c0 	bl	8000768 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fb50 	bl	8000c8c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80005ec:	f000 f900 	bl	80007f0 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80005f0:	f000 f962 	bl	80008b8 <MX_FDCAN2_Init>
  MX_UART4_Init();
 80005f4:	f000 fa1a 	bl	8000a2c <MX_UART4_Init>
  MX_UART5_Init();
 80005f8:	f000 fa64 	bl	8000ac4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80005fc:	f000 faae 	bl	8000b5c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000600:	f000 faf8 	bl	8000bf4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000604:	f000 f9bc 	bl	8000980 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x34>
	...

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b09e      	sub	sp, #120	; 0x78
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000616:	224c      	movs	r2, #76	; 0x4c
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f005 fea6 	bl	800636c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2220      	movs	r2, #32
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f005 fe9f 	bl	800636c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800062e:	2002      	movs	r0, #2
 8000630:	f001 fe34 	bl	800229c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b48      	ldr	r3, [pc, #288]	; (800075c <SystemClock_Config+0x150>)
 800063a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063c:	4a47      	ldr	r2, [pc, #284]	; (800075c <SystemClock_Config+0x150>)
 800063e:	f023 0301 	bic.w	r3, r3, #1
 8000642:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000644:	4b45      	ldr	r3, [pc, #276]	; (800075c <SystemClock_Config+0x150>)
 8000646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	4b44      	ldr	r3, [pc, #272]	; (8000760 <SystemClock_Config+0x154>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4a43      	ldr	r2, [pc, #268]	; (8000760 <SystemClock_Config+0x154>)
 8000654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000658:	6193      	str	r3, [r2, #24]
 800065a:	4b41      	ldr	r3, [pc, #260]	; (8000760 <SystemClock_Config+0x154>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000666:	bf00      	nop
 8000668:	4b3d      	ldr	r3, [pc, #244]	; (8000760 <SystemClock_Config+0x154>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000674:	d1f8      	bne.n	8000668 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000676:	4b3b      	ldr	r3, [pc, #236]	; (8000764 <SystemClock_Config+0x158>)
 8000678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800067c:	4a39      	ldr	r2, [pc, #228]	; (8000764 <SystemClock_Config+0x158>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000686:	4b37      	ldr	r3, [pc, #220]	; (8000764 <SystemClock_Config+0x158>)
 8000688:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	4b31      	ldr	r3, [pc, #196]	; (8000760 <SystemClock_Config+0x154>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a30      	ldr	r2, [pc, #192]	; (8000760 <SystemClock_Config+0x154>)
 800069e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <SystemClock_Config+0x154>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	4b2b      	ldr	r3, [pc, #172]	; (800075c <SystemClock_Config+0x150>)
 80006b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b2:	4a2a      	ldr	r2, [pc, #168]	; (800075c <SystemClock_Config+0x150>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <SystemClock_Config+0x150>)
 80006bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c6:	bf00      	nop
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <SystemClock_Config+0x154>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d4:	d1f8      	bne.n	80006c8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d6:	2301      	movs	r3, #1
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e4:	2302      	movs	r3, #2
 80006e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006ec:	2350      	movs	r3, #80	; 0x50
 80006ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80006f4:	2314      	movs	r3, #20
 80006f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006fc:	230c      	movs	r3, #12
 80006fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000700:	2300      	movs	r3, #0
 8000702:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800070c:	4618      	mov	r0, r3
 800070e:	f001 fdff 	bl	8002310 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000718:	f000 fb82 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	233f      	movs	r3, #63	; 0x3f
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2303      	movs	r3, #3
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000728:	2308      	movs	r3, #8
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800072c:	2340      	movs	r3, #64	; 0x40
 800072e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000730:	2340      	movs	r3, #64	; 0x40
 8000732:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800073a:	2340      	movs	r3, #64	; 0x40
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2104      	movs	r1, #4
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fa3d 	bl	8002bc4 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000750:	f000 fb66 	bl	8000e20 <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3778      	adds	r7, #120	; 0x78
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	58000400 	.word	0x58000400
 8000760:	58024800 	.word	0x58024800
 8000764:	58024400 	.word	0x58024400

08000768 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b0b0      	sub	sp, #192	; 0xc0
 800076c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	22c0      	movs	r2, #192	; 0xc0
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f005 fdf9 	bl	800636c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_FDCAN
 800077a:	f248 0203 	movw	r2, #32771	; 0x8003
 800077e:	f04f 0300 	mov.w	r3, #0
 8000782:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000786:	2302      	movs	r3, #2
 8000788:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 75;
 800078a:	234b      	movs	r3, #75	; 0x4b
 800078c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 18;
 8000792:	2312      	movs	r3, #18
 8000794:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000796:	2302      	movs	r3, #2
 8000798:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800079a:	23c0      	movs	r3, #192	; 0xc0
 800079c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 3;
 80007a6:	2303      	movs	r3, #3
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 80;
 80007aa:	2350      	movs	r3, #80	; 0x50
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 20;
 80007b2:	2314      	movs	r3, #20
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80007ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80007c8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007cc:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 80007ce:	2302      	movs	r3, #2
 80007d0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 80007d2:	2310      	movs	r3, #16
 80007d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 fd7f 	bl	80032dc <HAL_RCCEx_PeriphCLKConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <PeriphCommonClock_Config+0x80>
  {
    Error_Handler();
 80007e4:	f000 fb1c 	bl	8000e20 <Error_Handler>
  }
}
 80007e8:	bf00      	nop
 80007ea:	37c0      	adds	r7, #192	; 0xc0
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 80007f6:	4a2f      	ldr	r2, [pc, #188]	; (80008b4 <MX_FDCAN1_Init+0xc4>)
 80007f8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000800:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000806:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000808:	2200      	movs	r2, #0
 800080a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800080c:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800080e:	2200      	movs	r2, #0
 8000810:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000814:	2200      	movs	r2, #0
 8000816:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000818:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800081a:	2210      	movs	r2, #16
 800081c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000820:	2201      	movs	r2, #1
 8000822:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000826:	2202      	movs	r2, #2
 8000828:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800082c:	2202      	movs	r2, #2
 800082e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000832:	2201      	movs	r2, #1
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000838:	2201      	movs	r2, #1
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800083e:	2201      	movs	r2, #1
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000844:	2201      	movs	r2, #1
 8000846:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800084a:	2200      	movs	r2, #0
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000850:	2200      	movs	r2, #0
 8000852:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000856:	2200      	movs	r2, #0
 8000858:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800085c:	2200      	movs	r2, #0
 800085e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000862:	2204      	movs	r2, #4
 8000864:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000868:	2200      	movs	r2, #0
 800086a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800086e:	2204      	movs	r2, #4
 8000870:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800087a:	2204      	movs	r2, #4
 800087c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000886:	2200      	movs	r2, #0
 8000888:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800088c:	2200      	movs	r2, #0
 800088e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000892:	2200      	movs	r2, #0
 8000894:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000898:	2204      	movs	r2, #4
 800089a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800089e:	f000 ffcf 	bl	8001840 <HAL_FDCAN_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008a8:	f000 faba 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2400002c 	.word	0x2400002c
 80008b4:	4000a000 	.word	0x4000a000

080008b8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80008bc:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008be:	4a2f      	ldr	r2, [pc, #188]	; (800097c <MX_FDCAN2_Init+0xc4>)
 80008c0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008c2:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80008ce:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80008da:	4b27      	ldr	r3, [pc, #156]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008e2:	2210      	movs	r2, #16
 80008e4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80008e6:	4b24      	ldr	r3, [pc, #144]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008ee:	2202      	movs	r2, #2
 80008f0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000900:	2201      	movs	r2, #1
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000906:	2201      	movs	r2, #1
 8000908:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800090a:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 800090c:	2201      	movs	r2, #1
 800090e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000912:	2200      	movs	r2, #0
 8000914:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000918:	2200      	movs	r2, #0
 800091a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 800091e:	2200      	movs	r2, #0
 8000920:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000924:	2200      	movs	r2, #0
 8000926:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 800092a:	2204      	movs	r2, #4
 800092c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000930:	2200      	movs	r2, #0
 8000932:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000936:	2204      	movs	r2, #4
 8000938:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 800093c:	2200      	movs	r2, #0
 800093e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000942:	2204      	movs	r2, #4
 8000944:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000948:	2200      	movs	r2, #0
 800094a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 800094e:	2200      	movs	r2, #0
 8000950:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000954:	2200      	movs	r2, #0
 8000956:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 800095a:	2200      	movs	r2, #0
 800095c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000960:	2204      	movs	r2, #4
 8000962:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000966:	f000 ff6b 	bl	8001840 <HAL_FDCAN_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000970:	f000 fa56 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	240000cc 	.word	0x240000cc
 800097c:	4000a400 	.word	0x4000a400

08000980 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <MX_SPI1_Init+0xa4>)
 8000986:	4a28      	ldr	r2, [pc, #160]	; (8000a28 <MX_SPI1_Init+0xa8>)
 8000988:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <MX_SPI1_Init+0xa4>)
 800098c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000990:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <MX_SPI1_Init+0xa4>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <MX_SPI1_Init+0xa4>)
 800099a:	2203      	movs	r2, #3
 800099c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <MX_SPI1_Init+0xa4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_SPI1_Init+0xa4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_SPI1_Init+0xa4>)
 80009ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <MX_SPI1_Init+0xa4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_SPI1_Init+0xa4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009be:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <MX_SPI1_Init+0xa4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_SPI1_Init+0xa4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_SPI1_Init+0xa4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_SPI1_Init+0xa4>)
 80009d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_SPI1_Init+0xa4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_SPI1_Init+0xa4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_SPI1_Init+0xa4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_SPI1_Init+0xa4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_SPI1_Init+0xa4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_SPI1_Init+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_SPI1_Init+0xa4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_SPI1_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_SPI1_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_SPI1_Init+0xa4>)
 8000a10:	f004 fa90 	bl	8004f34 <HAL_SPI_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000a1a:	f000 fa01 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2400016c 	.word	0x2400016c
 8000a28:	40013000 	.word	0x40013000

08000a2c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <MX_UART4_Init+0x90>)
 8000a32:	4a23      	ldr	r2, [pc, #140]	; (8000ac0 <MX_UART4_Init+0x94>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_UART4_Init+0x90>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_UART4_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_UART4_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_UART4_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_UART4_Init+0x90>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_UART4_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_UART4_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_UART4_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_UART4_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_UART4_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a74:	4811      	ldr	r0, [pc, #68]	; (8000abc <MX_UART4_Init+0x90>)
 8000a76:	f004 fb9c 	bl	80051b2 <HAL_UART_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000a80:	f000 f9ce 	bl	8000e20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a84:	2100      	movs	r1, #0
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_UART4_Init+0x90>)
 8000a88:	f005 fba5 	bl	80061d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a92:	f000 f9c5 	bl	8000e20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a96:	2100      	movs	r1, #0
 8000a98:	4808      	ldr	r0, [pc, #32]	; (8000abc <MX_UART4_Init+0x90>)
 8000a9a:	f005 fbda 	bl	8006252 <HAL_UARTEx_SetRxFifoThreshold>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000aa4:	f000 f9bc 	bl	8000e20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_UART4_Init+0x90>)
 8000aaa:	f005 fb5b 	bl	8006164 <HAL_UARTEx_DisableFifoMode>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000ab4:	f000 f9b4 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	240001f4 	.word	0x240001f4
 8000ac0:	40004c00 	.word	0x40004c00

08000ac4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_UART5_Init+0x90>)
 8000aca:	4a23      	ldr	r2, [pc, #140]	; (8000b58 <MX_UART5_Init+0x94>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <MX_UART5_Init+0x90>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_UART5_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_UART5_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_UART5_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_UART5_Init+0x90>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_UART5_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_UART5_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_UART5_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_UART5_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_UART5_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b0c:	4811      	ldr	r0, [pc, #68]	; (8000b54 <MX_UART5_Init+0x90>)
 8000b0e:	f004 fb50 	bl	80051b2 <HAL_UART_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000b18:	f000 f982 	bl	8000e20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_UART5_Init+0x90>)
 8000b20:	f005 fb59 	bl	80061d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000b2a:	f000 f979 	bl	8000e20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4808      	ldr	r0, [pc, #32]	; (8000b54 <MX_UART5_Init+0x90>)
 8000b32:	f005 fb8e 	bl	8006252 <HAL_UARTEx_SetRxFifoThreshold>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000b3c:	f000 f970 	bl	8000e20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_UART5_Init+0x90>)
 8000b42:	f005 fb0f 	bl	8006164 <HAL_UARTEx_DisableFifoMode>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000b4c:	f000 f968 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	24000288 	.word	0x24000288
 8000b58:	40005000 	.word	0x40005000

08000b5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b62:	4a23      	ldr	r2, [pc, #140]	; (8000bf0 <MX_USART1_UART_Init+0x94>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ba4:	4811      	ldr	r0, [pc, #68]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000ba6:	f004 fb04 	bl	80051b2 <HAL_UART_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bb0:	f000 f936 	bl	8000e20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000bb8:	f005 fb0d 	bl	80061d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bc2:	f000 f92d 	bl	8000e20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4808      	ldr	r0, [pc, #32]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000bca:	f005 fb42 	bl	8006252 <HAL_UARTEx_SetRxFifoThreshold>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd4:	f000 f924 	bl	8000e20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000bda:	f005 fac3 	bl	8006164 <HAL_UARTEx_DisableFifoMode>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000be4:	f000 f91c 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2400031c 	.word	0x2400031c
 8000bf0:	40011000 	.word	0x40011000

08000bf4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000bfa:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <MX_USART3_UART_Init+0x94>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c3c:	4811      	ldr	r0, [pc, #68]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c3e:	f004 fab8 	bl	80051b2 <HAL_UART_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c48:	f000 f8ea 	bl	8000e20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c50:	f005 fac1 	bl	80061d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c5a:	f000 f8e1 	bl	8000e20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4808      	ldr	r0, [pc, #32]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c62:	f005 faf6 	bl	8006252 <HAL_UARTEx_SetRxFifoThreshold>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c6c:	f000 f8d8 	bl	8000e20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c72:	f005 fa77 	bl	8006164 <HAL_UARTEx_DisableFifoMode>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c7c:	f000 f8d0 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	240003b0 	.word	0x240003b0
 8000c88:	40004800 	.word	0x40004800

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca2:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	4a44      	ldr	r2, [pc, #272]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000caa:	f043 0310 	orr.w	r3, r3, #16
 8000cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb2:	4b42      	ldr	r3, [pc, #264]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	f003 0310 	and.w	r3, r3, #16
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc0:	4b3e      	ldr	r3, [pc, #248]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	4a3d      	ldr	r2, [pc, #244]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd0:	4b3a      	ldr	r3, [pc, #232]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b37      	ldr	r3, [pc, #220]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce4:	4a35      	ldr	r2, [pc, #212]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cee:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	4a2e      	ldr	r2, [pc, #184]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0c:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1a:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d20:	4a26      	ldr	r2, [pc, #152]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2a:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	f003 0308 	and.w	r3, r3, #8
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d38:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3e:	4a1f      	ldr	r2, [pc, #124]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FM_ADR_OUT_Pin|CSEEP_Pin|CSANZ1_Pin|CSANZ2_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 8000d5c:	4818      	ldr	r0, [pc, #96]	; (8000dc0 <MX_GPIO_Init+0x134>)
 8000d5e:	f001 fa83 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FM_ADR_IN_Pin */
  GPIO_InitStruct.Pin = FM_ADR_IN_Pin;
 8000d62:	2340      	movs	r3, #64	; 0x40
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FM_ADR_IN_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <MX_GPIO_Init+0x138>)
 8000d76:	f001 f8c7 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : IPK_SYNC_Pin */
  GPIO_InitStruct.Pin = IPK_SYNC_Pin;
 8000d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IPK_SYNC_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <MX_GPIO_Init+0x134>)
 8000d90:	f001 f8ba 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : FM_ADR_OUT_Pin CSEEP_Pin CSANZ1_Pin CSANZ2_Pin */
  GPIO_InitStruct.Pin = FM_ADR_OUT_Pin|CSEEP_Pin|CSANZ1_Pin|CSANZ2_Pin;
 8000d94:	f44f 6338 	mov.w	r3, #2944	; 0xb80
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_GPIO_Init+0x134>)
 8000dae:	f001 f8ab 	bl	8001f08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000db2:	bf00      	nop
 8000db4:	3730      	adds	r7, #48	; 0x30
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	58024400 	.word	0x58024400
 8000dc0:	58020400 	.word	0x58020400
 8000dc4:	58021000 	.word	0x58021000

08000dc8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000dda:	f000 fcb9 	bl	8001750 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000dde:	2301      	movs	r3, #1
 8000de0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000dea:	231f      	movs	r3, #31
 8000dec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000dee:	2387      	movs	r3, #135	; 0x87
 8000df0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000df6:	2300      	movs	r3, #0
 8000df8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fcd7 	bl	80017c0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e12:	2004      	movs	r0, #4
 8000e14:	f000 fcb4 	bl	8001780 <HAL_MPU_Enable>

}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_MspInit+0x30>)
 8000e34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e38:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_MspInit+0x30>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_MspInit+0x30>)
 8000e44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	58024400 	.word	0x58024400

08000e60 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a3e      	ldr	r2, [pc, #248]	; (8000f78 <HAL_FDCAN_MspInit+0x118>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d138      	bne.n	8000ef4 <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000e82:	4b3e      	ldr	r3, [pc, #248]	; (8000f7c <HAL_FDCAN_MspInit+0x11c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	4a3c      	ldr	r2, [pc, #240]	; (8000f7c <HAL_FDCAN_MspInit+0x11c>)
 8000e8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000e8c:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <HAL_FDCAN_MspInit+0x11c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d10e      	bne.n	8000eb2 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e94:	4b3a      	ldr	r3, [pc, #232]	; (8000f80 <HAL_FDCAN_MspInit+0x120>)
 8000e96:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e9a:	4a39      	ldr	r2, [pc, #228]	; (8000f80 <HAL_FDCAN_MspInit+0x120>)
 8000e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000ea4:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <HAL_FDCAN_MspInit+0x120>)
 8000ea6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eae:	61bb      	str	r3, [r7, #24]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b33      	ldr	r3, [pc, #204]	; (8000f80 <HAL_FDCAN_MspInit+0x120>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb8:	4a31      	ldr	r2, [pc, #196]	; (8000f80 <HAL_FDCAN_MspInit+0x120>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <HAL_FDCAN_MspInit+0x120>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = CANFD_RX_Pin|CANFD_TX_Pin;
 8000ed0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ee2:	2309      	movs	r3, #9
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	4825      	ldr	r0, [pc, #148]	; (8000f84 <HAL_FDCAN_MspInit+0x124>)
 8000eee:	f001 f80b 	bl	8001f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000ef2:	e03c      	b.n	8000f6e <HAL_FDCAN_MspInit+0x10e>
  else if(hfdcan->Instance==FDCAN2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a23      	ldr	r2, [pc, #140]	; (8000f88 <HAL_FDCAN_MspInit+0x128>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d137      	bne.n	8000f6e <HAL_FDCAN_MspInit+0x10e>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_FDCAN_MspInit+0x11c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <HAL_FDCAN_MspInit+0x11c>)
 8000f06:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <HAL_FDCAN_MspInit+0x11c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d10e      	bne.n	8000f2e <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <HAL_FDCAN_MspInit+0x120>)
 8000f12:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f16:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <HAL_FDCAN_MspInit+0x120>)
 8000f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_FDCAN_MspInit+0x120>)
 8000f22:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_FDCAN_MspInit+0x120>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f34:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <HAL_FDCAN_MspInit+0x120>)
 8000f36:	f043 0302 	orr.w	r3, r3, #2
 8000f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_FDCAN_MspInit+0x120>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8000f4c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000f5e:	2309      	movs	r3, #9
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	4808      	ldr	r0, [pc, #32]	; (8000f8c <HAL_FDCAN_MspInit+0x12c>)
 8000f6a:	f000 ffcd 	bl	8001f08 <HAL_GPIO_Init>
}
 8000f6e:	bf00      	nop
 8000f70:	3730      	adds	r7, #48	; 0x30
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	4000a000 	.word	0x4000a000
 8000f7c:	24000444 	.word	0x24000444
 8000f80:	58024400 	.word	0x58024400
 8000f84:	58020000 	.word	0x58020000
 8000f88:	4000a400 	.word	0x4000a400
 8000f8c:	58020400 	.word	0x58020400

08000f90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0bc      	sub	sp, #240	; 0xf0
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	22c0      	movs	r2, #192	; 0xc0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f005 f9db 	bl	800636c <memset>
  if(hspi->Instance==SPI1)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a38      	ldr	r2, [pc, #224]	; (800109c <HAL_SPI_MspInit+0x10c>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d168      	bne.n	8001092 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000fc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 f981 	bl	80032dc <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000fe0:	f7ff ff1e 	bl	8000e20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <HAL_SPI_MspInit+0x110>)
 8000fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fea:	4a2d      	ldr	r2, [pc, #180]	; (80010a0 <HAL_SPI_MspInit+0x110>)
 8000fec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <HAL_SPI_MspInit+0x110>)
 8000ff6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <HAL_SPI_MspInit+0x110>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001008:	4a25      	ldr	r2, [pc, #148]	; (80010a0 <HAL_SPI_MspInit+0x110>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <HAL_SPI_MspInit+0x110>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <HAL_SPI_MspInit+0x110>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001026:	4a1e      	ldr	r2, [pc, #120]	; (80010a0 <HAL_SPI_MspInit+0x110>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <HAL_SPI_MspInit+0x110>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800103e:	2360      	movs	r3, #96	; 0x60
 8001040:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001056:	2305      	movs	r3, #5
 8001058:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001060:	4619      	mov	r1, r3
 8001062:	4810      	ldr	r0, [pc, #64]	; (80010a4 <HAL_SPI_MspInit+0x114>)
 8001064:	f000 ff50 	bl	8001f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001080:	2305      	movs	r3, #5
 8001082:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001086:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800108a:	4619      	mov	r1, r3
 800108c:	4806      	ldr	r0, [pc, #24]	; (80010a8 <HAL_SPI_MspInit+0x118>)
 800108e:	f000 ff3b 	bl	8001f08 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001092:	bf00      	nop
 8001094:	37f0      	adds	r7, #240	; 0xf0
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40013000 	.word	0x40013000
 80010a0:	58024400 	.word	0x58024400
 80010a4:	58020000 	.word	0x58020000
 80010a8:	58020c00 	.word	0x58020c00

080010ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b090      	sub	sp, #64	; 0x40
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a69      	ldr	r2, [pc, #420]	; (8001270 <HAL_UART_MspInit+0x1c4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d12f      	bne.n	800112e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80010ce:	4b69      	ldr	r3, [pc, #420]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 80010d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010d4:	4a67      	ldr	r2, [pc, #412]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 80010d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010de:	4b65      	ldr	r3, [pc, #404]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 80010e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ea:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ec:	4b61      	ldr	r3, [pc, #388]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 80010ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f2:	4a60      	ldr	r2, [pc, #384]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fc:	4b5d      	ldr	r3, [pc, #372]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 80010fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = CONP_TX_Pin|CONP_RX_Pin;
 800110a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800111c:	2308      	movs	r3, #8
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001124:	4619      	mov	r1, r3
 8001126:	4854      	ldr	r0, [pc, #336]	; (8001278 <HAL_UART_MspInit+0x1cc>)
 8001128:	f000 feee 	bl	8001f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800112c:	e09c      	b.n	8001268 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==UART5)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a52      	ldr	r2, [pc, #328]	; (800127c <HAL_UART_MspInit+0x1d0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d12e      	bne.n	8001196 <HAL_UART_MspInit+0xea>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001138:	4b4e      	ldr	r3, [pc, #312]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 800113a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800113e:	4a4d      	ldr	r2, [pc, #308]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 8001140:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001144:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001148:	4b4a      	ldr	r3, [pc, #296]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 800114a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800114e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001152:	623b      	str	r3, [r7, #32]
 8001154:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	4b47      	ldr	r3, [pc, #284]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	4a45      	ldr	r2, [pc, #276]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001166:	4b43      	ldr	r3, [pc, #268]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = DBG_RX_Pin|DBG_TX_Pin;
 8001174:	2360      	movs	r3, #96	; 0x60
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001184:	230e      	movs	r3, #14
 8001186:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800118c:	4619      	mov	r1, r3
 800118e:	483c      	ldr	r0, [pc, #240]	; (8001280 <HAL_UART_MspInit+0x1d4>)
 8001190:	f000 feba 	bl	8001f08 <HAL_GPIO_Init>
}
 8001194:	e068      	b.n	8001268 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a3a      	ldr	r2, [pc, #232]	; (8001284 <HAL_UART_MspInit+0x1d8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d12f      	bne.n	8001200 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART1_CLK_ENABLE();
 80011a0:	4b34      	ldr	r3, [pc, #208]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 80011a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011a6:	4a33      	ldr	r2, [pc, #204]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 80011a8:	f043 0310 	orr.w	r3, r3, #16
 80011ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011b0:	4b30      	ldr	r3, [pc, #192]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 80011b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c4:	4a2b      	ldr	r2, [pc, #172]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ce:	4b29      	ldr	r3, [pc, #164]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = V24_TX_Pin|V24_RX_Pin;
 80011dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ee:	2307      	movs	r3, #7
 80011f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f6:	4619      	mov	r1, r3
 80011f8:	4823      	ldr	r0, [pc, #140]	; (8001288 <HAL_UART_MspInit+0x1dc>)
 80011fa:	f000 fe85 	bl	8001f08 <HAL_GPIO_Init>
}
 80011fe:	e033      	b.n	8001268 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART3)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a21      	ldr	r2, [pc, #132]	; (800128c <HAL_UART_MspInit+0x1e0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d12e      	bne.n	8001268 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 800120c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001210:	4a18      	ldr	r2, [pc, #96]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 8001212:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001216:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 800121c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122e:	4a11      	ldr	r2, [pc, #68]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <HAL_UART_MspInit+0x1c8>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IPK_TX_Pin|IPK_RX_Pin;
 8001246:	f44f 7340 	mov.w	r3, #768	; 0x300
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001258:	2307      	movs	r3, #7
 800125a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001260:	4619      	mov	r1, r3
 8001262:	480b      	ldr	r0, [pc, #44]	; (8001290 <HAL_UART_MspInit+0x1e4>)
 8001264:	f000 fe50 	bl	8001f08 <HAL_GPIO_Init>
}
 8001268:	bf00      	nop
 800126a:	3740      	adds	r7, #64	; 0x40
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40004c00 	.word	0x40004c00
 8001274:	58024400 	.word	0x58024400
 8001278:	58020800 	.word	0x58020800
 800127c:	40005000 	.word	0x40005000
 8001280:	58020400 	.word	0x58020400
 8001284:	40011000 	.word	0x40011000
 8001288:	58020000 	.word	0x58020000
 800128c:	40004800 	.word	0x40004800
 8001290:	58020c00 	.word	0x58020c00

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001298:	e7fe      	b.n	8001298 <NMI_Handler+0x4>

0800129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler+0x4>

080012a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f000 f926 	bl	8001530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012ec:	4b37      	ldr	r3, [pc, #220]	; (80013cc <SystemInit+0xe4>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f2:	4a36      	ldr	r2, [pc, #216]	; (80013cc <SystemInit+0xe4>)
 80012f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <SystemInit+0xe8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	2b06      	cmp	r3, #6
 8001306:	d807      	bhi.n	8001318 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001308:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <SystemInit+0xe8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f023 030f 	bic.w	r3, r3, #15
 8001310:	4a2f      	ldr	r2, [pc, #188]	; (80013d0 <SystemInit+0xe8>)
 8001312:	f043 0307 	orr.w	r3, r3, #7
 8001316:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001318:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <SystemInit+0xec>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a2d      	ldr	r2, [pc, #180]	; (80013d4 <SystemInit+0xec>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <SystemInit+0xec>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800132a:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <SystemInit+0xec>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4929      	ldr	r1, [pc, #164]	; (80013d4 <SystemInit+0xec>)
 8001330:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <SystemInit+0xf0>)
 8001332:	4013      	ands	r3, r2
 8001334:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <SystemInit+0xe8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d007      	beq.n	8001352 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <SystemInit+0xe8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 030f 	bic.w	r3, r3, #15
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <SystemInit+0xe8>)
 800134c:	f043 0307 	orr.w	r3, r3, #7
 8001350:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <SystemInit+0xec>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <SystemInit+0xec>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <SystemInit+0xec>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <SystemInit+0xec>)
 8001366:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <SystemInit+0xf4>)
 8001368:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <SystemInit+0xec>)
 800136c:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <SystemInit+0xf8>)
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <SystemInit+0xec>)
 8001372:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <SystemInit+0xfc>)
 8001374:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <SystemInit+0xec>)
 8001378:	2200      	movs	r2, #0
 800137a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <SystemInit+0xec>)
 800137e:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <SystemInit+0xfc>)
 8001380:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <SystemInit+0xec>)
 8001384:	2200      	movs	r2, #0
 8001386:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <SystemInit+0xec>)
 800138a:	4a16      	ldr	r2, [pc, #88]	; (80013e4 <SystemInit+0xfc>)
 800138c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <SystemInit+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <SystemInit+0xec>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <SystemInit+0xec>)
 800139a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <SystemInit+0xec>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <SystemInit+0x100>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <SystemInit+0x104>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013b2:	d202      	bcs.n	80013ba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <SystemInit+0x108>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <SystemInit+0x10c>)
 80013bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00
 80013d0:	52002000 	.word	0x52002000
 80013d4:	58024400 	.word	0x58024400
 80013d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80013dc:	02020200 	.word	0x02020200
 80013e0:	01ff0000 	.word	0x01ff0000
 80013e4:	01010280 	.word	0x01010280
 80013e8:	5c001000 	.word	0x5c001000
 80013ec:	ffff0000 	.word	0xffff0000
 80013f0:	51008108 	.word	0x51008108
 80013f4:	52004000 	.word	0x52004000

080013f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001430 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013fc:	f7ff ff74 	bl	80012e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001402:	490d      	ldr	r1, [pc, #52]	; (8001438 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001418:	4c0a      	ldr	r4, [pc, #40]	; (8001444 <LoopFillZerobss+0x22>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001426:	f004 ffa9 	bl	800637c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142a:	f7ff f8d3 	bl	80005d4 <main>
  bx  lr
 800142e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001430:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001434:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001438:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800143c:	0800648c 	.word	0x0800648c
  ldr r2, =_sbss
 8001440:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001444:	2400044c 	.word	0x2400044c

08001448 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC3_IRQHandler>
	...

0800144c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001452:	2003      	movs	r0, #3
 8001454:	f000 f94a 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001458:	f001 fd6a 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 800145c:	4602      	mov	r2, r0
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_Init+0x68>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	4913      	ldr	r1, [pc, #76]	; (80014b8 <HAL_Init+0x6c>)
 800146a:	5ccb      	ldrb	r3, [r1, r3]
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
 8001474:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_Init+0x68>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_Init+0x6c>)
 8001480:	5cd3      	ldrb	r3, [r2, r3]
 8001482:	f003 031f 	and.w	r3, r3, #31
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	fa22 f303 	lsr.w	r3, r2, r3
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_Init+0x70>)
 800148e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_Init+0x74>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001496:	200f      	movs	r0, #15
 8001498:	f000 f814 	bl	80014c4 <HAL_InitTick>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e002      	b.n	80014ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014a6:	f7ff fcc1 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	58024400 	.word	0x58024400
 80014b8:	08006444 	.word	0x08006444
 80014bc:	24000004 	.word	0x24000004
 80014c0:	24000000 	.word	0x24000000

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_InitTick+0x60>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e021      	b.n	800151c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <HAL_InitTick+0x64>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <HAL_InitTick+0x60>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f921 	bl	8001736 <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00e      	b.n	800151c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d80a      	bhi.n	800151a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001504:	2200      	movs	r2, #0
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f000 f8f9 	bl	8001702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <HAL_InitTick+0x68>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2400000c 	.word	0x2400000c
 8001528:	24000000 	.word	0x24000000
 800152c:	24000008 	.word	0x24000008

08001530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x20>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x24>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <HAL_IncTick+0x24>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	2400000c 	.word	0x2400000c
 8001554:	24000448 	.word	0x24000448

08001558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_GetTick+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	24000448 	.word	0x24000448

08001570 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_GetREVID+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0c1b      	lsrs	r3, r3, #16
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	5c001000 	.word	0x5c001000

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <__NVIC_SetPriorityGrouping+0x40>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x40>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00
 80015cc:	05fa0000 	.word	0x05fa0000

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	; (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	; (800163c <__NVIC_SetPriority+0x50>)
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b8:	d301      	bcc.n	80016be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00f      	b.n	80016de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <SysTick_Config+0x40>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c6:	210f      	movs	r1, #15
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f7ff ff8e 	bl	80015ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <SysTick_Config+0x40>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <SysTick_Config+0x40>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff47 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff5e 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff90 	bl	8001640 <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5f 	bl	80015ec <__NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffb2 	bl	80016a8 <SysTick_Config>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001754:	f3bf 8f5f 	dmb	sy
}
 8001758:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <HAL_MPU_Disable+0x28>)
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	4a06      	ldr	r2, [pc, #24]	; (8001778 <HAL_MPU_Disable+0x28>)
 8001760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001764:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_MPU_Disable+0x2c>)
 8001768:	2200      	movs	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00
 800177c:	e000ed90 	.word	0xe000ed90

08001780 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001788:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <HAL_MPU_Enable+0x38>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_MPU_Enable+0x3c>)
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	4a09      	ldr	r2, [pc, #36]	; (80017bc <HAL_MPU_Enable+0x3c>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800179e:	f3bf 8f4f 	dsb	sy
}
 80017a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017a4:	f3bf 8f6f 	isb	sy
}
 80017a8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed90 	.word	0xe000ed90
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	785a      	ldrb	r2, [r3, #1]
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <HAL_MPU_ConfigRegion+0x7c>)
 80017ce:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_MPU_ConfigRegion+0x7c>)
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	4a19      	ldr	r2, [pc, #100]	; (800183c <HAL_MPU_ConfigRegion+0x7c>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80017dc:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_MPU_ConfigRegion+0x7c>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7b1b      	ldrb	r3, [r3, #12]
 80017e8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7adb      	ldrb	r3, [r3, #11]
 80017ee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7a9b      	ldrb	r3, [r3, #10]
 80017f6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7b5b      	ldrb	r3, [r3, #13]
 80017fe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001800:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7b9b      	ldrb	r3, [r3, #14]
 8001806:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001808:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7bdb      	ldrb	r3, [r3, #15]
 800180e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001810:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7a5b      	ldrb	r3, [r3, #9]
 8001816:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001818:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	7a1b      	ldrb	r3, [r3, #8]
 800181e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001820:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	7812      	ldrb	r2, [r2, #0]
 8001826:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800182a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800182c:	6113      	str	r3, [r2, #16]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed90 	.word	0xe000ed90

08001840 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b098      	sub	sp, #96	; 0x60
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001848:	4a84      	ldr	r2, [pc, #528]	; (8001a5c <HAL_FDCAN_Init+0x21c>)
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	4611      	mov	r1, r2
 8001850:	224c      	movs	r2, #76	; 0x4c
 8001852:	4618      	mov	r0, r3
 8001854:	f004 fdb6 	bl	80063c4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e1c6      	b.n	8001bf0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a7e      	ldr	r2, [pc, #504]	; (8001a60 <HAL_FDCAN_Init+0x220>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d106      	bne.n	800187a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001874:	461a      	mov	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d106      	bne.n	8001894 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fae6 	bl	8000e60 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	699a      	ldr	r2, [r3, #24]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0210 	bic.w	r2, r2, #16
 80018a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018a4:	f7ff fe58 	bl	8001558 <HAL_GetTick>
 80018a8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80018aa:	e014      	b.n	80018d6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80018ac:	f7ff fe54 	bl	8001558 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b0a      	cmp	r3, #10
 80018b8:	d90d      	bls.n	80018d6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2203      	movs	r2, #3
 80018ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e18c      	b.n	8001bf0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d0e3      	beq.n	80018ac <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699a      	ldr	r2, [r3, #24]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018f4:	f7ff fe30 	bl	8001558 <HAL_GetTick>
 80018f8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80018fa:	e014      	b.n	8001926 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80018fc:	f7ff fe2c 	bl	8001558 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b0a      	cmp	r3, #10
 8001908:	d90d      	bls.n	8001926 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001910:	f043 0201 	orr.w	r2, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2203      	movs	r2, #3
 800191e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e164      	b.n	8001bf0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0e3      	beq.n	80018fc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699a      	ldr	r2, [r3, #24]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0202 	orr.w	r2, r2, #2
 8001942:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7c1b      	ldrb	r3, [r3, #16]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d108      	bne.n	800195e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699a      	ldr	r2, [r3, #24]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800195a:	619a      	str	r2, [r3, #24]
 800195c:	e007      	b.n	800196e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699a      	ldr	r2, [r3, #24]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800196c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7c5b      	ldrb	r3, [r3, #17]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d108      	bne.n	8001988 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699a      	ldr	r2, [r3, #24]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001984:	619a      	str	r2, [r3, #24]
 8001986:	e007      	b.n	8001998 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001996:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7c9b      	ldrb	r3, [r3, #18]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d108      	bne.n	80019b2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	699a      	ldr	r2, [r3, #24]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019ae:	619a      	str	r2, [r3, #24]
 80019b0:	e007      	b.n	80019c2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699a      	ldr	r2, [r3, #24]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80019c0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699a      	ldr	r2, [r3, #24]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80019e6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691a      	ldr	r2, [r3, #16]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0210 	bic.w	r2, r2, #16
 80019f6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d108      	bne.n	8001a12 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	699a      	ldr	r2, [r3, #24]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0204 	orr.w	r2, r2, #4
 8001a0e:	619a      	str	r2, [r3, #24]
 8001a10:	e030      	b.n	8001a74 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d02c      	beq.n	8001a74 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d020      	beq.n	8001a64 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699a      	ldr	r2, [r3, #24]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a30:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 0210 	orr.w	r2, r2, #16
 8001a40:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d114      	bne.n	8001a74 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699a      	ldr	r2, [r3, #24]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0220 	orr.w	r2, r2, #32
 8001a58:	619a      	str	r2, [r3, #24]
 8001a5a:	e00b      	b.n	8001a74 <HAL_FDCAN_Init+0x234>
 8001a5c:	080063f8 	.word	0x080063f8
 8001a60:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699a      	ldr	r2, [r3, #24]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0220 	orr.w	r2, r2, #32
 8001a72:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a84:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a8c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a9c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a9e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001aa8:	d115      	bne.n	8001ad6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001ab8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001ac2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	3b01      	subs	r3, #1
 8001acc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001ad2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001ad4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00a      	beq.n	8001af4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afc:	4413      	add	r3, r2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d011      	beq.n	8001b26 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001b0a:	f023 0107 	bic.w	r1, r3, #7
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	3360      	adds	r3, #96	; 0x60
 8001b16:	443b      	add	r3, r7
 8001b18:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d011      	beq.n	8001b52 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001b36:	f023 0107 	bic.w	r1, r3, #7
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	3360      	adds	r3, #96	; 0x60
 8001b42:	443b      	add	r3, r7
 8001b44:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d012      	beq.n	8001b80 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001b62:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	3360      	adds	r3, #96	; 0x60
 8001b6e:	443b      	add	r3, r7
 8001b70:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b74:	011a      	lsls	r2, r3, #4
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d012      	beq.n	8001bae <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001b90:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	3360      	adds	r3, #96	; 0x60
 8001b9c:	443b      	add	r3, r7
 8001b9e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001ba2:	021a      	lsls	r2, r3, #8
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a11      	ldr	r2, [pc, #68]	; (8001bf8 <HAL_FDCAN_Init+0x3b8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d107      	bne.n	8001bc8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f022 0203 	bic.w	r2, r2, #3
 8001bc6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f80b 	bl	8001bfc <FDCAN_CalcultateRamBlockAddresses>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001bec:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3760      	adds	r7, #96	; 0x60
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	4000a000 	.word	0x4000a000

08001bfc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c08:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001c12:	4ba7      	ldr	r3, [pc, #668]	; (8001eb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	0091      	lsls	r1, r2, #2
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	430b      	orrs	r3, r1
 8001c20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c2c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c34:	041a      	lsls	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	4413      	add	r3, r2
 8001c48:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001c52:	4b97      	ldr	r3, [pc, #604]	; (8001eb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	0091      	lsls	r1, r2, #2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	430b      	orrs	r3, r1
 8001c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c74:	041a      	lsls	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	4413      	add	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001c94:	4b86      	ldr	r3, [pc, #536]	; (8001eb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	0091      	lsls	r1, r2, #2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001cae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	041a      	lsls	r2, r3, #16
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cca:	fb02 f303 	mul.w	r3, r2, r3
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cdc:	4b74      	ldr	r3, [pc, #464]	; (8001eb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	0091      	lsls	r1, r2, #2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001cf6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cfe:	041a      	lsls	r2, r3, #16
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	4413      	add	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001d24:	4b62      	ldr	r3, [pc, #392]	; (8001eb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	0091      	lsls	r1, r2, #2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	430b      	orrs	r3, r1
 8001d32:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	4413      	add	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001d50:	4b57      	ldr	r3, [pc, #348]	; (8001eb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	0091      	lsls	r1, r2, #2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d6a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	041a      	lsls	r2, r3, #16
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	4413      	add	r3, r2
 8001d88:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001d92:	4b47      	ldr	r3, [pc, #284]	; (8001eb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	0091      	lsls	r1, r2, #2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001dac:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001dc8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd0:	061a      	lsls	r2, r3, #24
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de0:	4b34      	ldr	r3, [pc, #208]	; (8001eb4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001de2:	4413      	add	r3, r2
 8001de4:	009a      	lsls	r2, r3, #2
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	441a      	add	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	441a      	add	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001e16:	fb01 f303 	mul.w	r3, r1, r3
 8001e1a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001e1c:	441a      	add	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001e34:	441a      	add	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001e4c:	441a      	add	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	441a      	add	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001e76:	fb01 f303 	mul.w	r3, r1, r3
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	441a      	add	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001e92:	fb01 f303 	mul.w	r3, r1, r3
 8001e96:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001e98:	441a      	add	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d915      	bls.n	8001ed8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001eac:	e006      	b.n	8001ebc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001eae:	bf00      	nop
 8001eb0:	ffff0003 	.word	0xffff0003
 8001eb4:	10002b00 	.word	0x10002b00
 8001eb8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ec2:	f043 0220 	orr.w	r2, r3, #32
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2203      	movs	r2, #3
 8001ed0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e010      	b.n	8001efa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	e005      	b.n	8001eec <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d3f3      	bcc.n	8001ee0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	; 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f16:	4b89      	ldr	r3, [pc, #548]	; (800213c <HAL_GPIO_Init+0x234>)
 8001f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f1a:	e194      	b.n	8002246 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8186 	beq.w	8002240 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d005      	beq.n	8001f4c <HAL_GPIO_Init+0x44>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d130      	bne.n	8001fae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f82:	2201      	movs	r2, #1
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	f003 0201 	and.w	r2, r3, #1
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d017      	beq.n	8001fea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d123      	bne.n	800203e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	08da      	lsrs	r2, r3, #3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3208      	adds	r2, #8
 8001ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	220f      	movs	r2, #15
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	08da      	lsrs	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3208      	adds	r2, #8
 8002038:	69b9      	ldr	r1, [r7, #24]
 800203a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0203 	and.w	r2, r3, #3
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 80e0 	beq.w	8002240 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002080:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <HAL_GPIO_Init+0x238>)
 8002082:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002086:	4a2e      	ldr	r2, [pc, #184]	; (8002140 <HAL_GPIO_Init+0x238>)
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002090:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_GPIO_Init+0x238>)
 8002092:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800209e:	4a29      	ldr	r2, [pc, #164]	; (8002144 <HAL_GPIO_Init+0x23c>)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	3302      	adds	r3, #2
 80020a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	220f      	movs	r2, #15
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a20      	ldr	r2, [pc, #128]	; (8002148 <HAL_GPIO_Init+0x240>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d052      	beq.n	8002170 <HAL_GPIO_Init+0x268>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a1f      	ldr	r2, [pc, #124]	; (800214c <HAL_GPIO_Init+0x244>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d031      	beq.n	8002136 <HAL_GPIO_Init+0x22e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a1e      	ldr	r2, [pc, #120]	; (8002150 <HAL_GPIO_Init+0x248>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d02b      	beq.n	8002132 <HAL_GPIO_Init+0x22a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a1d      	ldr	r2, [pc, #116]	; (8002154 <HAL_GPIO_Init+0x24c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d025      	beq.n	800212e <HAL_GPIO_Init+0x226>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <HAL_GPIO_Init+0x250>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01f      	beq.n	800212a <HAL_GPIO_Init+0x222>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a1b      	ldr	r2, [pc, #108]	; (800215c <HAL_GPIO_Init+0x254>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d019      	beq.n	8002126 <HAL_GPIO_Init+0x21e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a1a      	ldr	r2, [pc, #104]	; (8002160 <HAL_GPIO_Init+0x258>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d013      	beq.n	8002122 <HAL_GPIO_Init+0x21a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a19      	ldr	r2, [pc, #100]	; (8002164 <HAL_GPIO_Init+0x25c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00d      	beq.n	800211e <HAL_GPIO_Init+0x216>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a18      	ldr	r2, [pc, #96]	; (8002168 <HAL_GPIO_Init+0x260>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d007      	beq.n	800211a <HAL_GPIO_Init+0x212>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_GPIO_Init+0x264>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d101      	bne.n	8002116 <HAL_GPIO_Init+0x20e>
 8002112:	2309      	movs	r3, #9
 8002114:	e02d      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 8002116:	230a      	movs	r3, #10
 8002118:	e02b      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 800211a:	2308      	movs	r3, #8
 800211c:	e029      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 800211e:	2307      	movs	r3, #7
 8002120:	e027      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 8002122:	2306      	movs	r3, #6
 8002124:	e025      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 8002126:	2305      	movs	r3, #5
 8002128:	e023      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 800212a:	2304      	movs	r3, #4
 800212c:	e021      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 800212e:	2303      	movs	r3, #3
 8002130:	e01f      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 8002132:	2302      	movs	r3, #2
 8002134:	e01d      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 8002136:	2301      	movs	r3, #1
 8002138:	e01b      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 800213a:	bf00      	nop
 800213c:	58000080 	.word	0x58000080
 8002140:	58024400 	.word	0x58024400
 8002144:	58000400 	.word	0x58000400
 8002148:	58020000 	.word	0x58020000
 800214c:	58020400 	.word	0x58020400
 8002150:	58020800 	.word	0x58020800
 8002154:	58020c00 	.word	0x58020c00
 8002158:	58021000 	.word	0x58021000
 800215c:	58021400 	.word	0x58021400
 8002160:	58021800 	.word	0x58021800
 8002164:	58021c00 	.word	0x58021c00
 8002168:	58022000 	.word	0x58022000
 800216c:	58022400 	.word	0x58022400
 8002170:	2300      	movs	r3, #0
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	f002 0203 	and.w	r2, r2, #3
 8002178:	0092      	lsls	r2, r2, #2
 800217a:	4093      	lsls	r3, r2
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002182:	4938      	ldr	r1, [pc, #224]	; (8002264 <HAL_GPIO_Init+0x35c>)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	3301      	adds	r3, #1
 8002244:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	f47f ae63 	bne.w	8001f1c <HAL_GPIO_Init+0x14>
  }
}
 8002256:	bf00      	nop
 8002258:	bf00      	nop
 800225a:	3724      	adds	r7, #36	; 0x24
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	58000400 	.word	0x58000400

08002268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
 8002274:	4613      	mov	r3, r2
 8002276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002278:	787b      	ldrb	r3, [r7, #1]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002284:	e003      	b.n	800228e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	041a      	lsls	r2, r3, #16
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	619a      	str	r2, [r3, #24]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_PWREx_ConfigSupply+0x70>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d00a      	beq.n	80022c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022b0:	4b16      	ldr	r3, [pc, #88]	; (800230c <HAL_PWREx_ConfigSupply+0x70>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d001      	beq.n	80022c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e01f      	b.n	8002302 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e01d      	b.n	8002302 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_PWREx_ConfigSupply+0x70>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f023 0207 	bic.w	r2, r3, #7
 80022ce:	490f      	ldr	r1, [pc, #60]	; (800230c <HAL_PWREx_ConfigSupply+0x70>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022d6:	f7ff f93f 	bl	8001558 <HAL_GetTick>
 80022da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022dc:	e009      	b.n	80022f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022de:	f7ff f93b 	bl	8001558 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ec:	d901      	bls.n	80022f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e007      	b.n	8002302 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_PWREx_ConfigSupply+0x70>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022fe:	d1ee      	bne.n	80022de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	58024800 	.word	0x58024800

08002310 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08c      	sub	sp, #48	; 0x30
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d102      	bne.n	8002324 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	f000 bc48 	b.w	8002bb4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 8088 	beq.w	8002442 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002332:	4b99      	ldr	r3, [pc, #612]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800233c:	4b96      	ldr	r3, [pc, #600]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002344:	2b10      	cmp	r3, #16
 8002346:	d007      	beq.n	8002358 <HAL_RCC_OscConfig+0x48>
 8002348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234a:	2b18      	cmp	r3, #24
 800234c:	d111      	bne.n	8002372 <HAL_RCC_OscConfig+0x62>
 800234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d10c      	bne.n	8002372 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002358:	4b8f      	ldr	r3, [pc, #572]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d06d      	beq.n	8002440 <HAL_RCC_OscConfig+0x130>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d169      	bne.n	8002440 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	f000 bc21 	b.w	8002bb4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237a:	d106      	bne.n	800238a <HAL_RCC_OscConfig+0x7a>
 800237c:	4b86      	ldr	r3, [pc, #536]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a85      	ldr	r2, [pc, #532]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 8002382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	e02e      	b.n	80023e8 <HAL_RCC_OscConfig+0xd8>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0x9c>
 8002392:	4b81      	ldr	r3, [pc, #516]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a80      	ldr	r2, [pc, #512]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 8002398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b7e      	ldr	r3, [pc, #504]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a7d      	ldr	r2, [pc, #500]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 80023a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xd8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0xc0>
 80023b6:	4b78      	ldr	r3, [pc, #480]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a77      	ldr	r2, [pc, #476]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b75      	ldr	r3, [pc, #468]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a74      	ldr	r2, [pc, #464]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xd8>
 80023d0:	4b71      	ldr	r3, [pc, #452]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a70      	ldr	r2, [pc, #448]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b6e      	ldr	r3, [pc, #440]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a6d      	ldr	r2, [pc, #436]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7ff f8b2 	bl	8001558 <HAL_GetTick>
 80023f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f8:	f7ff f8ae 	bl	8001558 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e3d4      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800240a:	4b63      	ldr	r3, [pc, #396]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xe8>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7ff f89e 	bl	8001558 <HAL_GetTick>
 800241c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7ff f89a 	bl	8001558 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e3c0      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002432:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x110>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80ca 	beq.w	80025e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002450:	4b51      	ldr	r3, [pc, #324]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002458:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800245a:	4b4f      	ldr	r3, [pc, #316]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 800245c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d007      	beq.n	8002476 <HAL_RCC_OscConfig+0x166>
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	2b18      	cmp	r3, #24
 800246a:	d156      	bne.n	800251a <HAL_RCC_OscConfig+0x20a>
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d151      	bne.n	800251a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002476:	4b48      	ldr	r3, [pc, #288]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_RCC_OscConfig+0x17e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e392      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800248e:	4b42      	ldr	r3, [pc, #264]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 0219 	bic.w	r2, r3, #25
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	493f      	ldr	r1, [pc, #252]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 800249c:	4313      	orrs	r3, r2
 800249e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7ff f85a 	bl	8001558 <HAL_GetTick>
 80024a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a8:	f7ff f856 	bl	8001558 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e37c      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ba:	4b37      	ldr	r3, [pc, #220]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c6:	f7ff f853 	bl	8001570 <HAL_GetREVID>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d817      	bhi.n	8002504 <HAL_RCC_OscConfig+0x1f4>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	2b40      	cmp	r3, #64	; 0x40
 80024da:	d108      	bne.n	80024ee <HAL_RCC_OscConfig+0x1de>
 80024dc:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024e4:	4a2c      	ldr	r2, [pc, #176]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 80024e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ec:	e07a      	b.n	80025e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ee:	4b2a      	ldr	r3, [pc, #168]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	031b      	lsls	r3, r3, #12
 80024fc:	4926      	ldr	r1, [pc, #152]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002502:	e06f      	b.n	80025e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002504:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	061b      	lsls	r3, r3, #24
 8002512:	4921      	ldr	r1, [pc, #132]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002518:	e064      	b.n	80025e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d047      	beq.n	80025b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 0219 	bic.w	r2, r3, #25
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	491a      	ldr	r1, [pc, #104]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 8002530:	4313      	orrs	r3, r2
 8002532:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7ff f810 	bl	8001558 <HAL_GetTick>
 8002538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253c:	f7ff f80c 	bl	8001558 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e332      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255a:	f7ff f809 	bl	8001570 <HAL_GetREVID>
 800255e:	4603      	mov	r3, r0
 8002560:	f241 0203 	movw	r2, #4099	; 0x1003
 8002564:	4293      	cmp	r3, r2
 8002566:	d819      	bhi.n	800259c <HAL_RCC_OscConfig+0x28c>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	2b40      	cmp	r3, #64	; 0x40
 800256e:	d108      	bne.n	8002582 <HAL_RCC_OscConfig+0x272>
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002578:	4a07      	ldr	r2, [pc, #28]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 800257a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257e:	6053      	str	r3, [r2, #4]
 8002580:	e030      	b.n	80025e4 <HAL_RCC_OscConfig+0x2d4>
 8002582:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	031b      	lsls	r3, r3, #12
 8002590:	4901      	ldr	r1, [pc, #4]	; (8002598 <HAL_RCC_OscConfig+0x288>)
 8002592:	4313      	orrs	r3, r2
 8002594:	604b      	str	r3, [r1, #4]
 8002596:	e025      	b.n	80025e4 <HAL_RCC_OscConfig+0x2d4>
 8002598:	58024400 	.word	0x58024400
 800259c:	4b9a      	ldr	r3, [pc, #616]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	061b      	lsls	r3, r3, #24
 80025aa:	4997      	ldr	r1, [pc, #604]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
 80025b0:	e018      	b.n	80025e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b2:	4b95      	ldr	r3, [pc, #596]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a94      	ldr	r2, [pc, #592]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025b8:	f023 0301 	bic.w	r3, r3, #1
 80025bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7fe ffcb 	bl	8001558 <HAL_GetTick>
 80025c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c6:	f7fe ffc7 	bl	8001558 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e2ed      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025d8:	4b8b      	ldr	r3, [pc, #556]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80a9 	beq.w	8002744 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f2:	4b85      	ldr	r3, [pc, #532]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025fc:	4b82      	ldr	r3, [pc, #520]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b08      	cmp	r3, #8
 8002606:	d007      	beq.n	8002618 <HAL_RCC_OscConfig+0x308>
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2b18      	cmp	r3, #24
 800260c:	d13a      	bne.n	8002684 <HAL_RCC_OscConfig+0x374>
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d135      	bne.n	8002684 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002618:	4b7b      	ldr	r3, [pc, #492]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_OscConfig+0x320>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	2b80      	cmp	r3, #128	; 0x80
 800262a:	d001      	beq.n	8002630 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e2c1      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002630:	f7fe ff9e 	bl	8001570 <HAL_GetREVID>
 8002634:	4603      	mov	r3, r0
 8002636:	f241 0203 	movw	r2, #4099	; 0x1003
 800263a:	4293      	cmp	r3, r2
 800263c:	d817      	bhi.n	800266e <HAL_RCC_OscConfig+0x35e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	2b20      	cmp	r3, #32
 8002644:	d108      	bne.n	8002658 <HAL_RCC_OscConfig+0x348>
 8002646:	4b70      	ldr	r3, [pc, #448]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800264e:	4a6e      	ldr	r2, [pc, #440]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 8002650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002654:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002656:	e075      	b.n	8002744 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002658:	4b6b      	ldr	r3, [pc, #428]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	069b      	lsls	r3, r3, #26
 8002666:	4968      	ldr	r1, [pc, #416]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800266c:	e06a      	b.n	8002744 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800266e:	4b66      	ldr	r3, [pc, #408]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	061b      	lsls	r3, r3, #24
 800267c:	4962      	ldr	r1, [pc, #392]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 800267e:	4313      	orrs	r3, r2
 8002680:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002682:	e05f      	b.n	8002744 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d042      	beq.n	8002712 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800268c:	4b5e      	ldr	r3, [pc, #376]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a5d      	ldr	r2, [pc, #372]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 8002692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7fe ff5e 	bl	8001558 <HAL_GetTick>
 800269c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026a0:	f7fe ff5a 	bl	8001558 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e280      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026b2:	4b55      	ldr	r3, [pc, #340]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026be:	f7fe ff57 	bl	8001570 <HAL_GetREVID>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d817      	bhi.n	80026fc <HAL_RCC_OscConfig+0x3ec>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d108      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3d6>
 80026d4:	4b4c      	ldr	r3, [pc, #304]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026dc:	4a4a      	ldr	r2, [pc, #296]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80026de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026e2:	6053      	str	r3, [r2, #4]
 80026e4:	e02e      	b.n	8002744 <HAL_RCC_OscConfig+0x434>
 80026e6:	4b48      	ldr	r3, [pc, #288]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	069b      	lsls	r3, r3, #26
 80026f4:	4944      	ldr	r1, [pc, #272]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
 80026fa:	e023      	b.n	8002744 <HAL_RCC_OscConfig+0x434>
 80026fc:	4b42      	ldr	r3, [pc, #264]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	061b      	lsls	r3, r3, #24
 800270a:	493f      	ldr	r1, [pc, #252]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 800270c:	4313      	orrs	r3, r2
 800270e:	60cb      	str	r3, [r1, #12]
 8002710:	e018      	b.n	8002744 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a3c      	ldr	r2, [pc, #240]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 8002718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800271c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271e:	f7fe ff1b 	bl	8001558 <HAL_GetTick>
 8002722:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002726:	f7fe ff17 	bl	8001558 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e23d      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002738:	4b33      	ldr	r3, [pc, #204]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f0      	bne.n	8002726 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d036      	beq.n	80027be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d019      	beq.n	800278c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002758:	4b2b      	ldr	r3, [pc, #172]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 800275a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275c:	4a2a      	ldr	r2, [pc, #168]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7fe fef8 	bl	8001558 <HAL_GetTick>
 8002768:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276c:	f7fe fef4 	bl	8001558 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e21a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800277e:	4b22      	ldr	r3, [pc, #136]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 8002780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x45c>
 800278a:	e018      	b.n	80027be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278c:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 800278e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002790:	4a1d      	ldr	r2, [pc, #116]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 8002792:	f023 0301 	bic.w	r3, r3, #1
 8002796:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7fe fede 	bl	8001558 <HAL_GetTick>
 800279c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a0:	f7fe feda 	bl	8001558 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e200      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80027b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d039      	beq.n	800283e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d01c      	beq.n	800280c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027d2:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a0c      	ldr	r2, [pc, #48]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80027d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027de:	f7fe febb 	bl	8001558 <HAL_GetTick>
 80027e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027e6:	f7fe feb7 	bl	8001558 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e1dd      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x4d6>
 8002804:	e01b      	b.n	800283e <HAL_RCC_OscConfig+0x52e>
 8002806:	bf00      	nop
 8002808:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800280c:	4b9b      	ldr	r3, [pc, #620]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a9a      	ldr	r2, [pc, #616]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002816:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002818:	f7fe fe9e 	bl	8001558 <HAL_GetTick>
 800281c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002820:	f7fe fe9a 	bl	8001558 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e1c0      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002832:	4b92      	ldr	r3, [pc, #584]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8081 	beq.w	800294e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800284c:	4b8c      	ldr	r3, [pc, #560]	; (8002a80 <HAL_RCC_OscConfig+0x770>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a8b      	ldr	r2, [pc, #556]	; (8002a80 <HAL_RCC_OscConfig+0x770>)
 8002852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002856:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002858:	f7fe fe7e 	bl	8001558 <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002860:	f7fe fe7a 	bl	8001558 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e1a0      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002872:	4b83      	ldr	r3, [pc, #524]	; (8002a80 <HAL_RCC_OscConfig+0x770>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d106      	bne.n	8002894 <HAL_RCC_OscConfig+0x584>
 8002886:	4b7d      	ldr	r3, [pc, #500]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	4a7c      	ldr	r2, [pc, #496]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6713      	str	r3, [r2, #112]	; 0x70
 8002892:	e02d      	b.n	80028f0 <HAL_RCC_OscConfig+0x5e0>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10c      	bne.n	80028b6 <HAL_RCC_OscConfig+0x5a6>
 800289c:	4b77      	ldr	r3, [pc, #476]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	4a76      	ldr	r2, [pc, #472]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	6713      	str	r3, [r2, #112]	; 0x70
 80028a8:	4b74      	ldr	r3, [pc, #464]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a73      	ldr	r2, [pc, #460]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 80028ae:	f023 0304 	bic.w	r3, r3, #4
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
 80028b4:	e01c      	b.n	80028f0 <HAL_RCC_OscConfig+0x5e0>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b05      	cmp	r3, #5
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x5c8>
 80028be:	4b6f      	ldr	r3, [pc, #444]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c2:	4a6e      	ldr	r2, [pc, #440]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ca:	4b6c      	ldr	r3, [pc, #432]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	4a6b      	ldr	r2, [pc, #428]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6713      	str	r3, [r2, #112]	; 0x70
 80028d6:	e00b      	b.n	80028f0 <HAL_RCC_OscConfig+0x5e0>
 80028d8:	4b68      	ldr	r3, [pc, #416]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 80028da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028dc:	4a67      	ldr	r2, [pc, #412]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	6713      	str	r3, [r2, #112]	; 0x70
 80028e4:	4b65      	ldr	r3, [pc, #404]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4a64      	ldr	r2, [pc, #400]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 80028ea:	f023 0304 	bic.w	r3, r3, #4
 80028ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d015      	beq.n	8002924 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe fe2e 	bl	8001558 <HAL_GetTick>
 80028fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002900:	f7fe fe2a 	bl	8001558 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e14e      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002916:	4b59      	ldr	r3, [pc, #356]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0ee      	beq.n	8002900 <HAL_RCC_OscConfig+0x5f0>
 8002922:	e014      	b.n	800294e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe fe18 	bl	8001558 <HAL_GetTick>
 8002928:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7fe fe14 	bl	8001558 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	; 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e138      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002942:	4b4e      	ldr	r3, [pc, #312]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ee      	bne.n	800292c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 812d 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002958:	4b48      	ldr	r3, [pc, #288]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002960:	2b18      	cmp	r3, #24
 8002962:	f000 80bd 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	2b02      	cmp	r3, #2
 800296c:	f040 809e 	bne.w	8002aac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002970:	4b42      	ldr	r3, [pc, #264]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a41      	ldr	r2, [pc, #260]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800297a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe fdec 	bl	8001558 <HAL_GetTick>
 8002980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe fde8 	bl	8001558 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e10e      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002996:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a2:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 80029a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029a6:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <HAL_RCC_OscConfig+0x774>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	430a      	orrs	r2, r1
 80029b6:	4931      	ldr	r1, [pc, #196]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	628b      	str	r3, [r1, #40]	; 0x28
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	3b01      	subs	r3, #1
 80029c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ca:	3b01      	subs	r3, #1
 80029cc:	025b      	lsls	r3, r3, #9
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d6:	3b01      	subs	r3, #1
 80029d8:	041b      	lsls	r3, r3, #16
 80029da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e4:	3b01      	subs	r3, #1
 80029e6:	061b      	lsls	r3, r3, #24
 80029e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80029ec:	4923      	ldr	r1, [pc, #140]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80029f2:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	4a21      	ldr	r2, [pc, #132]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029fe:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a02:	4b21      	ldr	r3, [pc, #132]	; (8002a88 <HAL_RCC_OscConfig+0x778>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a0a:	00d2      	lsls	r2, r2, #3
 8002a0c:	491b      	ldr	r1, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a12:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	f023 020c 	bic.w	r2, r3, #12
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	4917      	ldr	r1, [pc, #92]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a24:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	f023 0202 	bic.w	r2, r3, #2
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	4912      	ldr	r1, [pc, #72]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	4a10      	ldr	r2, [pc, #64]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	4a0d      	ldr	r2, [pc, #52]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a66:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7fe fd71 	bl	8001558 <HAL_GetTick>
 8002a76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a78:	e011      	b.n	8002a9e <HAL_RCC_OscConfig+0x78e>
 8002a7a:	bf00      	nop
 8002a7c:	58024400 	.word	0x58024400
 8002a80:	58024800 	.word	0x58024800
 8002a84:	fffffc0c 	.word	0xfffffc0c
 8002a88:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fd64 	bl	8001558 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e08a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a9e:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <HAL_RCC_OscConfig+0x8ac>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x77c>
 8002aaa:	e082      	b.n	8002bb2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aac:	4b43      	ldr	r3, [pc, #268]	; (8002bbc <HAL_RCC_OscConfig+0x8ac>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a42      	ldr	r2, [pc, #264]	; (8002bbc <HAL_RCC_OscConfig+0x8ac>)
 8002ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fd4e 	bl	8001558 <HAL_GetTick>
 8002abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe fd4a 	bl	8001558 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e070      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ad2:	4b3a      	ldr	r3, [pc, #232]	; (8002bbc <HAL_RCC_OscConfig+0x8ac>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x7b0>
 8002ade:	e068      	b.n	8002bb2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ae0:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <HAL_RCC_OscConfig+0x8ac>)
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ae6:	4b35      	ldr	r3, [pc, #212]	; (8002bbc <HAL_RCC_OscConfig+0x8ac>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d031      	beq.n	8002b58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f003 0203 	and.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d12a      	bne.n	8002b58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d122      	bne.n	8002b58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d11a      	bne.n	8002b58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	0a5b      	lsrs	r3, r3, #9
 8002b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d111      	bne.n	8002b58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	0c1b      	lsrs	r3, r3, #16
 8002b38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d108      	bne.n	8002b58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	0e1b      	lsrs	r3, r3, #24
 8002b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e02b      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b5c:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <HAL_RCC_OscConfig+0x8ac>)
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	08db      	lsrs	r3, r3, #3
 8002b62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d01f      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b72:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_RCC_OscConfig+0x8ac>)
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	4a11      	ldr	r2, [pc, #68]	; (8002bbc <HAL_RCC_OscConfig+0x8ac>)
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b7e:	f7fe fceb 	bl	8001558 <HAL_GetTick>
 8002b82:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b84:	bf00      	nop
 8002b86:	f7fe fce7 	bl	8001558 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d0f9      	beq.n	8002b86 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_RCC_OscConfig+0x8ac>)
 8002b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <HAL_RCC_OscConfig+0x8b0>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b9e:	00d2      	lsls	r2, r2, #3
 8002ba0:	4906      	ldr	r1, [pc, #24]	; (8002bbc <HAL_RCC_OscConfig+0x8ac>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_OscConfig+0x8ac>)
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_RCC_OscConfig+0x8ac>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3730      	adds	r7, #48	; 0x30
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	ffff0007 	.word	0xffff0007

08002bc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e19c      	b.n	8002f12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b8a      	ldr	r3, [pc, #552]	; (8002e04 <HAL_RCC_ClockConfig+0x240>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d910      	bls.n	8002c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b87      	ldr	r3, [pc, #540]	; (8002e04 <HAL_RCC_ClockConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 020f 	bic.w	r2, r3, #15
 8002bee:	4985      	ldr	r1, [pc, #532]	; (8002e04 <HAL_RCC_ClockConfig+0x240>)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b83      	ldr	r3, [pc, #524]	; (8002e04 <HAL_RCC_ClockConfig+0x240>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e184      	b.n	8002f12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d010      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	4b7b      	ldr	r3, [pc, #492]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d908      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c24:	4b78      	ldr	r3, [pc, #480]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	4975      	ldr	r1, [pc, #468]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d010      	beq.n	8002c64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	4b70      	ldr	r3, [pc, #448]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d908      	bls.n	8002c64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c52:	4b6d      	ldr	r3, [pc, #436]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	496a      	ldr	r1, [pc, #424]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d010      	beq.n	8002c92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699a      	ldr	r2, [r3, #24]
 8002c74:	4b64      	ldr	r3, [pc, #400]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d908      	bls.n	8002c92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c80:	4b61      	ldr	r3, [pc, #388]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	495e      	ldr	r1, [pc, #376]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d010      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69da      	ldr	r2, [r3, #28]
 8002ca2:	4b59      	ldr	r3, [pc, #356]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d908      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cae:	4b56      	ldr	r3, [pc, #344]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	4953      	ldr	r1, [pc, #332]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d010      	beq.n	8002cee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	4b4d      	ldr	r3, [pc, #308]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d908      	bls.n	8002cee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cdc:	4b4a      	ldr	r3, [pc, #296]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f023 020f 	bic.w	r2, r3, #15
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4947      	ldr	r1, [pc, #284]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d055      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cfa:	4b43      	ldr	r3, [pc, #268]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	4940      	ldr	r1, [pc, #256]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d14:	4b3c      	ldr	r3, [pc, #240]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d121      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0f6      	b.n	8002f12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d107      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d2c:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d115      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0ea      	b.n	8002f12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d44:	4b30      	ldr	r3, [pc, #192]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d109      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0de      	b.n	8002f12 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d54:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0d6      	b.n	8002f12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d64:	4b28      	ldr	r3, [pc, #160]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f023 0207 	bic.w	r2, r3, #7
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4925      	ldr	r1, [pc, #148]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d76:	f7fe fbef 	bl	8001558 <HAL_GetTick>
 8002d7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7e:	f7fe fbeb 	bl	8001558 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e0be      	b.n	8002f12 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d94:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d1eb      	bne.n	8002d7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d010      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d208      	bcs.n	8002dd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc2:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f023 020f 	bic.w	r2, r3, #15
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	490e      	ldr	r1, [pc, #56]	; (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_RCC_ClockConfig+0x240>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d214      	bcs.n	8002e0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <HAL_RCC_ClockConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 020f 	bic.w	r2, r3, #15
 8002dea:	4906      	ldr	r1, [pc, #24]	; (8002e04 <HAL_RCC_ClockConfig+0x240>)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df2:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <HAL_RCC_ClockConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e086      	b.n	8002f12 <HAL_RCC_ClockConfig+0x34e>
 8002e04:	52002000 	.word	0x52002000
 8002e08:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d010      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	4b3f      	ldr	r3, [pc, #252]	; (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d208      	bcs.n	8002e3a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e28:	4b3c      	ldr	r3, [pc, #240]	; (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	4939      	ldr	r1, [pc, #228]	; (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d010      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	4b34      	ldr	r3, [pc, #208]	; (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d208      	bcs.n	8002e68 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e56:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	492e      	ldr	r1, [pc, #184]	; (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d010      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d208      	bcs.n	8002e96 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e84:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	4922      	ldr	r1, [pc, #136]	; (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d010      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69da      	ldr	r2, [r3, #28]
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d208      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002eb2:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4917      	ldr	r1, [pc, #92]	; (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ec4:	f000 f834 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	4912      	ldr	r1, [pc, #72]	; (8002f20 <HAL_RCC_ClockConfig+0x35c>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	4a0d      	ldr	r2, [pc, #52]	; (8002f20 <HAL_RCC_ClockConfig+0x35c>)
 8002eec:	5cd3      	ldrb	r3, [r2, r3]
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <HAL_RCC_ClockConfig+0x360>)
 8002efa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002efc:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <HAL_RCC_ClockConfig+0x364>)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_RCC_ClockConfig+0x368>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe fadc 	bl	80014c4 <HAL_InitTick>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	58024400 	.word	0x58024400
 8002f20:	08006444 	.word	0x08006444
 8002f24:	24000004 	.word	0x24000004
 8002f28:	24000000 	.word	0x24000000
 8002f2c:	24000008 	.word	0x24000008

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	; 0x24
 8002f34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f36:	4bb3      	ldr	r3, [pc, #716]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f3e:	2b18      	cmp	r3, #24
 8002f40:	f200 8155 	bhi.w	80031ee <HAL_RCC_GetSysClockFreq+0x2be>
 8002f44:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4a:	bf00      	nop
 8002f4c:	08002fb1 	.word	0x08002fb1
 8002f50:	080031ef 	.word	0x080031ef
 8002f54:	080031ef 	.word	0x080031ef
 8002f58:	080031ef 	.word	0x080031ef
 8002f5c:	080031ef 	.word	0x080031ef
 8002f60:	080031ef 	.word	0x080031ef
 8002f64:	080031ef 	.word	0x080031ef
 8002f68:	080031ef 	.word	0x080031ef
 8002f6c:	08002fd7 	.word	0x08002fd7
 8002f70:	080031ef 	.word	0x080031ef
 8002f74:	080031ef 	.word	0x080031ef
 8002f78:	080031ef 	.word	0x080031ef
 8002f7c:	080031ef 	.word	0x080031ef
 8002f80:	080031ef 	.word	0x080031ef
 8002f84:	080031ef 	.word	0x080031ef
 8002f88:	080031ef 	.word	0x080031ef
 8002f8c:	08002fdd 	.word	0x08002fdd
 8002f90:	080031ef 	.word	0x080031ef
 8002f94:	080031ef 	.word	0x080031ef
 8002f98:	080031ef 	.word	0x080031ef
 8002f9c:	080031ef 	.word	0x080031ef
 8002fa0:	080031ef 	.word	0x080031ef
 8002fa4:	080031ef 	.word	0x080031ef
 8002fa8:	080031ef 	.word	0x080031ef
 8002fac:	08002fe3 	.word	0x08002fe3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fb0:	4b94      	ldr	r3, [pc, #592]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d009      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fbc:	4b91      	ldr	r3, [pc, #580]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	08db      	lsrs	r3, r3, #3
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	4a90      	ldr	r2, [pc, #576]	; (8003208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fce:	e111      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fd0:	4b8d      	ldr	r3, [pc, #564]	; (8003208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fd2:	61bb      	str	r3, [r7, #24]
      break;
 8002fd4:	e10e      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002fd6:	4b8d      	ldr	r3, [pc, #564]	; (800320c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fd8:	61bb      	str	r3, [r7, #24]
      break;
 8002fda:	e10b      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002fdc:	4b8c      	ldr	r3, [pc, #560]	; (8003210 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fde:	61bb      	str	r3, [r7, #24]
      break;
 8002fe0:	e108      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fe2:	4b88      	ldr	r3, [pc, #544]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002fec:	4b85      	ldr	r3, [pc, #532]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ff6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ff8:	4b82      	ldr	r3, [pc, #520]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003002:	4b80      	ldr	r3, [pc, #512]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003006:	08db      	lsrs	r3, r3, #3
 8003008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80e1 	beq.w	80031e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b02      	cmp	r3, #2
 800302a:	f000 8083 	beq.w	8003134 <HAL_RCC_GetSysClockFreq+0x204>
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b02      	cmp	r3, #2
 8003032:	f200 80a1 	bhi.w	8003178 <HAL_RCC_GetSysClockFreq+0x248>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x114>
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d056      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003042:	e099      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003044:	4b6f      	ldr	r3, [pc, #444]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b00      	cmp	r3, #0
 800304e:	d02d      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003050:	4b6c      	ldr	r3, [pc, #432]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	08db      	lsrs	r3, r3, #3
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	4a6b      	ldr	r2, [pc, #428]	; (8003208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
 8003060:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	ee07 3a90 	vmov	s15, r3
 8003068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800307a:	4b62      	ldr	r3, [pc, #392]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800308a:	ed97 6a02 	vldr	s12, [r7, #8]
 800308e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003214 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800309a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800309e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030aa:	e087      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	ee07 3a90 	vmov	s15, r3
 80030b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003218 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030be:	4b51      	ldr	r3, [pc, #324]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80030d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003214 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030ee:	e065      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800321c <HAL_RCC_GetSysClockFreq+0x2ec>
 80030fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003102:	4b40      	ldr	r3, [pc, #256]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003112:	ed97 6a02 	vldr	s12, [r7, #8]
 8003116:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003214 <HAL_RCC_GetSysClockFreq+0x2e4>
 800311a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800311e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800312a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003132:	e043      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003220 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003146:	4b2f      	ldr	r3, [pc, #188]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003156:	ed97 6a02 	vldr	s12, [r7, #8]
 800315a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003214 <HAL_RCC_GetSysClockFreq+0x2e4>
 800315e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800316a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800316e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003172:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003176:	e021      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003182:	eddf 6a26 	vldr	s13, [pc, #152]	; 800321c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800318a:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800319a:	ed97 6a02 	vldr	s12, [r7, #8]
 800319e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003214 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031bc:	4b11      	ldr	r3, [pc, #68]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	0a5b      	lsrs	r3, r3, #9
 80031c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031c6:	3301      	adds	r3, #1
 80031c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	ee07 3a90 	vmov	s15, r3
 80031d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80031d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e0:	ee17 3a90 	vmov	r3, s15
 80031e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80031e6:	e005      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61bb      	str	r3, [r7, #24]
      break;
 80031ec:	e002      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80031ee:	4b07      	ldr	r3, [pc, #28]	; (800320c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031f0:	61bb      	str	r3, [r7, #24]
      break;
 80031f2:	bf00      	nop
  }

  return sysclockfreq;
 80031f4:	69bb      	ldr	r3, [r7, #24]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3724      	adds	r7, #36	; 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	58024400 	.word	0x58024400
 8003208:	03d09000 	.word	0x03d09000
 800320c:	003d0900 	.word	0x003d0900
 8003210:	016e3600 	.word	0x016e3600
 8003214:	46000000 	.word	0x46000000
 8003218:	4c742400 	.word	0x4c742400
 800321c:	4a742400 	.word	0x4a742400
 8003220:	4bb71b00 	.word	0x4bb71b00

08003224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800322a:	f7ff fe81 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 800322e:	4602      	mov	r2, r0
 8003230:	4b10      	ldr	r3, [pc, #64]	; (8003274 <HAL_RCC_GetHCLKFreq+0x50>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	490f      	ldr	r1, [pc, #60]	; (8003278 <HAL_RCC_GetHCLKFreq+0x54>)
 800323c:	5ccb      	ldrb	r3, [r1, r3]
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003248:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_RCC_GetHCLKFreq+0x50>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	4a09      	ldr	r2, [pc, #36]	; (8003278 <HAL_RCC_GetHCLKFreq+0x54>)
 8003252:	5cd3      	ldrb	r3, [r2, r3]
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	4a07      	ldr	r2, [pc, #28]	; (800327c <HAL_RCC_GetHCLKFreq+0x58>)
 8003260:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003262:	4a07      	ldr	r2, [pc, #28]	; (8003280 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <HAL_RCC_GetHCLKFreq+0x58>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	58024400 	.word	0x58024400
 8003278:	08006444 	.word	0x08006444
 800327c:	24000004 	.word	0x24000004
 8003280:	24000000 	.word	0x24000000

08003284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003288:	f7ff ffcc 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 800328c:	4602      	mov	r2, r0
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	4904      	ldr	r1, [pc, #16]	; (80032ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800329a:	5ccb      	ldrb	r3, [r1, r3]
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	58024400 	.word	0x58024400
 80032ac:	08006444 	.word	0x08006444

080032b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032b4:	f7ff ffb6 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4904      	ldr	r1, [pc, #16]	; (80032d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	58024400 	.word	0x58024400
 80032d8:	08006444 	.word	0x08006444

080032dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e0:	b0ca      	sub	sp, #296	; 0x128
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032ee:	2300      	movs	r3, #0
 80032f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003300:	2500      	movs	r5, #0
 8003302:	ea54 0305 	orrs.w	r3, r4, r5
 8003306:	d049      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800330c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800330e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003312:	d02f      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003314:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003318:	d828      	bhi.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800331a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800331e:	d01a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003320:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003324:	d822      	bhi.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800332a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800332e:	d007      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003330:	e01c      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003332:	4bb8      	ldr	r3, [pc, #736]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	4ab7      	ldr	r2, [pc, #732]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800333e:	e01a      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003344:	3308      	adds	r3, #8
 8003346:	2102      	movs	r1, #2
 8003348:	4618      	mov	r0, r3
 800334a:	f001 fc8f 	bl	8004c6c <RCCEx_PLL2_Config>
 800334e:	4603      	mov	r3, r0
 8003350:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003354:	e00f      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800335a:	3328      	adds	r3, #40	; 0x28
 800335c:	2102      	movs	r1, #2
 800335e:	4618      	mov	r0, r3
 8003360:	f001 fd36 	bl	8004dd0 <RCCEx_PLL3_Config>
 8003364:	4603      	mov	r3, r0
 8003366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800336a:	e004      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003372:	e000      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10a      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800337e:	4ba5      	ldr	r3, [pc, #660]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003382:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800338a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800338c:	4aa1      	ldr	r2, [pc, #644]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800338e:	430b      	orrs	r3, r1
 8003390:	6513      	str	r3, [r2, #80]	; 0x50
 8003392:	e003      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003394:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003398:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800339c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80033a8:	f04f 0900 	mov.w	r9, #0
 80033ac:	ea58 0309 	orrs.w	r3, r8, r9
 80033b0:	d047      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d82a      	bhi.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033bc:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c2:	bf00      	nop
 80033c4:	080033d9 	.word	0x080033d9
 80033c8:	080033e7 	.word	0x080033e7
 80033cc:	080033fd 	.word	0x080033fd
 80033d0:	0800341b 	.word	0x0800341b
 80033d4:	0800341b 	.word	0x0800341b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d8:	4b8e      	ldr	r3, [pc, #568]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	4a8d      	ldr	r2, [pc, #564]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033e4:	e01a      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ea:	3308      	adds	r3, #8
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f001 fc3c 	bl	8004c6c <RCCEx_PLL2_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033fa:	e00f      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003400:	3328      	adds	r3, #40	; 0x28
 8003402:	2100      	movs	r1, #0
 8003404:	4618      	mov	r0, r3
 8003406:	f001 fce3 	bl	8004dd0 <RCCEx_PLL3_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003410:	e004      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003418:	e000      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800341a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800341c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003424:	4b7b      	ldr	r3, [pc, #492]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003428:	f023 0107 	bic.w	r1, r3, #7
 800342c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	4a78      	ldr	r2, [pc, #480]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003434:	430b      	orrs	r3, r1
 8003436:	6513      	str	r3, [r2, #80]	; 0x50
 8003438:	e003      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800343e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800344e:	f04f 0b00 	mov.w	fp, #0
 8003452:	ea5a 030b 	orrs.w	r3, sl, fp
 8003456:	d04c      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003462:	d030      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003468:	d829      	bhi.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800346a:	2bc0      	cmp	r3, #192	; 0xc0
 800346c:	d02d      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800346e:	2bc0      	cmp	r3, #192	; 0xc0
 8003470:	d825      	bhi.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003472:	2b80      	cmp	r3, #128	; 0x80
 8003474:	d018      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003476:	2b80      	cmp	r3, #128	; 0x80
 8003478:	d821      	bhi.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800347e:	2b40      	cmp	r3, #64	; 0x40
 8003480:	d007      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003482:	e01c      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003484:	4b63      	ldr	r3, [pc, #396]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	4a62      	ldr	r2, [pc, #392]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800348a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003490:	e01c      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003496:	3308      	adds	r3, #8
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f001 fbe6 	bl	8004c6c <RCCEx_PLL2_Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034a6:	e011      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ac:	3328      	adds	r3, #40	; 0x28
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f001 fc8d 	bl	8004dd0 <RCCEx_PLL3_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034bc:	e006      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034c4:	e002      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034c6:	bf00      	nop
 80034c8:	e000      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034d4:	4b4f      	ldr	r3, [pc, #316]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e2:	4a4c      	ldr	r2, [pc, #304]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e4:	430b      	orrs	r3, r1
 80034e6:	6513      	str	r3, [r2, #80]	; 0x50
 80034e8:	e003      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80034fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003508:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800350c:	460b      	mov	r3, r1
 800350e:	4313      	orrs	r3, r2
 8003510:	d053      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003516:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800351a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800351e:	d035      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003520:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003524:	d82e      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003526:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800352a:	d031      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800352c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003530:	d828      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003536:	d01a      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003538:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800353c:	d822      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003546:	d007      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003548:	e01c      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354a:	4b32      	ldr	r3, [pc, #200]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	4a31      	ldr	r2, [pc, #196]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003554:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003556:	e01c      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355c:	3308      	adds	r3, #8
 800355e:	2100      	movs	r1, #0
 8003560:	4618      	mov	r0, r3
 8003562:	f001 fb83 	bl	8004c6c <RCCEx_PLL2_Config>
 8003566:	4603      	mov	r3, r0
 8003568:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800356c:	e011      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800356e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003572:	3328      	adds	r3, #40	; 0x28
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f001 fc2a 	bl	8004dd0 <RCCEx_PLL3_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003582:	e006      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800358a:	e002      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800358c:	bf00      	nop
 800358e:	e000      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10b      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800359a:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80035a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035aa:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ac:	430b      	orrs	r3, r1
 80035ae:	6593      	str	r3, [r2, #88]	; 0x58
 80035b0:	e003      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80035c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035ca:	2300      	movs	r3, #0
 80035cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035d0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80035d4:	460b      	mov	r3, r1
 80035d6:	4313      	orrs	r3, r2
 80035d8:	d056      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035e6:	d038      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035ec:	d831      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035f2:	d034      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80035f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035f8:	d82b      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035fe:	d01d      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003604:	d825      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800360a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003610:	e01f      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003612:	bf00      	nop
 8003614:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003618:	4ba2      	ldr	r3, [pc, #648]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	4aa1      	ldr	r2, [pc, #644]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800361e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003622:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003624:	e01c      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800362a:	3308      	adds	r3, #8
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f001 fb1c 	bl	8004c6c <RCCEx_PLL2_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800363a:	e011      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800363c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003640:	3328      	adds	r3, #40	; 0x28
 8003642:	2100      	movs	r1, #0
 8003644:	4618      	mov	r0, r3
 8003646:	f001 fbc3 	bl	8004dd0 <RCCEx_PLL3_Config>
 800364a:	4603      	mov	r3, r0
 800364c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003650:	e006      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003658:	e002      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800365a:	bf00      	nop
 800365c:	e000      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800365e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003660:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003668:	4b8e      	ldr	r3, [pc, #568]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800366a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003674:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003678:	4a8a      	ldr	r2, [pc, #552]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800367a:	430b      	orrs	r3, r1
 800367c:	6593      	str	r3, [r2, #88]	; 0x58
 800367e:	e003      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003684:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003690:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003694:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003698:	2300      	movs	r3, #0
 800369a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800369e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80036a2:	460b      	mov	r3, r1
 80036a4:	4313      	orrs	r3, r2
 80036a6:	d03a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80036a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ae:	2b30      	cmp	r3, #48	; 0x30
 80036b0:	d01f      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80036b2:	2b30      	cmp	r3, #48	; 0x30
 80036b4:	d819      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d00c      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d815      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d019      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	d111      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c6:	4b77      	ldr	r3, [pc, #476]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	4a76      	ldr	r2, [pc, #472]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036d2:	e011      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d8:	3308      	adds	r3, #8
 80036da:	2102      	movs	r1, #2
 80036dc:	4618      	mov	r0, r3
 80036de:	f001 fac5 	bl	8004c6c <RCCEx_PLL2_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036e8:	e006      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036f0:	e002      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036f2:	bf00      	nop
 80036f4:	e000      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003700:	4b68      	ldr	r3, [pc, #416]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003704:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800370c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370e:	4a65      	ldr	r2, [pc, #404]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003710:	430b      	orrs	r3, r1
 8003712:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003714:	e003      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800371a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800372a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800372e:	2300      	movs	r3, #0
 8003730:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003734:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003738:	460b      	mov	r3, r1
 800373a:	4313      	orrs	r3, r2
 800373c:	d051      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800373e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003748:	d035      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800374a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800374e:	d82e      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003750:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003754:	d031      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003756:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800375a:	d828      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800375c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003760:	d01a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003766:	d822      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800376c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003770:	d007      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003772:	e01c      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003774:	4b4b      	ldr	r3, [pc, #300]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	4a4a      	ldr	r2, [pc, #296]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800377a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003780:	e01c      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003786:	3308      	adds	r3, #8
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f001 fa6e 	bl	8004c6c <RCCEx_PLL2_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003796:	e011      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800379c:	3328      	adds	r3, #40	; 0x28
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f001 fb15 	bl	8004dd0 <RCCEx_PLL3_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037ac:	e006      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037b4:	e002      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037b6:	bf00      	nop
 80037b8:	e000      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10a      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037c4:	4b37      	ldr	r3, [pc, #220]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80037cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d2:	4a34      	ldr	r2, [pc, #208]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6513      	str	r3, [r2, #80]	; 0x50
 80037d8:	e003      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80037ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037f2:	2300      	movs	r3, #0
 80037f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80037f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80037fc:	460b      	mov	r3, r1
 80037fe:	4313      	orrs	r3, r2
 8003800:	d056      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800380c:	d033      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800380e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003812:	d82c      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003814:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003818:	d02f      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800381a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800381e:	d826      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003820:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003824:	d02b      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003826:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800382a:	d820      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800382c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003830:	d012      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003832:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003836:	d81a      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d022      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800383c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003840:	d115      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003846:	3308      	adds	r3, #8
 8003848:	2101      	movs	r1, #1
 800384a:	4618      	mov	r0, r3
 800384c:	f001 fa0e 	bl	8004c6c <RCCEx_PLL2_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003856:	e015      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800385c:	3328      	adds	r3, #40	; 0x28
 800385e:	2101      	movs	r1, #1
 8003860:	4618      	mov	r0, r3
 8003862:	f001 fab5 	bl	8004dd0 <RCCEx_PLL3_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800386c:	e00a      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003874:	e006      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003876:	bf00      	nop
 8003878:	e004      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800387a:	bf00      	nop
 800387c:	e002      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003884:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10d      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800388e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003890:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800389a:	4a02      	ldr	r2, [pc, #8]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800389c:	430b      	orrs	r3, r1
 800389e:	6513      	str	r3, [r2, #80]	; 0x50
 80038a0:	e006      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80038a2:	bf00      	nop
 80038a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80038bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4313      	orrs	r3, r2
 80038ce:	d055      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038dc:	d033      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80038de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038e2:	d82c      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e8:	d02f      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80038ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ee:	d826      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038f4:	d02b      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80038f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038fa:	d820      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003900:	d012      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003906:	d81a      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d022      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800390c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003910:	d115      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003916:	3308      	adds	r3, #8
 8003918:	2101      	movs	r1, #1
 800391a:	4618      	mov	r0, r3
 800391c:	f001 f9a6 	bl	8004c6c <RCCEx_PLL2_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003926:	e015      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800392c:	3328      	adds	r3, #40	; 0x28
 800392e:	2101      	movs	r1, #1
 8003930:	4618      	mov	r0, r3
 8003932:	f001 fa4d 	bl	8004dd0 <RCCEx_PLL3_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800393c:	e00a      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003944:	e006      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003946:	bf00      	nop
 8003948:	e004      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800394a:	bf00      	nop
 800394c:	e002      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800394e:	bf00      	nop
 8003950:	e000      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003954:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10b      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800395c:	4ba3      	ldr	r3, [pc, #652]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003968:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800396c:	4a9f      	ldr	r2, [pc, #636]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800396e:	430b      	orrs	r3, r1
 8003970:	6593      	str	r3, [r2, #88]	; 0x58
 8003972:	e003      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003974:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003978:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800397c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800398c:	2300      	movs	r3, #0
 800398e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003992:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003996:	460b      	mov	r3, r1
 8003998:	4313      	orrs	r3, r2
 800399a:	d037      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a6:	d00e      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80039a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ac:	d816      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d018      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80039b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039b6:	d111      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b8:	4b8c      	ldr	r3, [pc, #560]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	4a8b      	ldr	r2, [pc, #556]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039c4:	e00f      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ca:	3308      	adds	r3, #8
 80039cc:	2101      	movs	r1, #1
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 f94c 	bl	8004c6c <RCCEx_PLL2_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039da:	e004      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039e2:	e000      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80039e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10a      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039ee:	4b7f      	ldr	r3, [pc, #508]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80039f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fc:	4a7b      	ldr	r2, [pc, #492]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039fe:	430b      	orrs	r3, r1
 8003a00:	6513      	str	r3, [r2, #80]	; 0x50
 8003a02:	e003      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	d039      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d81c      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a36:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3c:	08003a79 	.word	0x08003a79
 8003a40:	08003a4d 	.word	0x08003a4d
 8003a44:	08003a5b 	.word	0x08003a5b
 8003a48:	08003a79 	.word	0x08003a79
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a4c:	4b67      	ldr	r3, [pc, #412]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	4a66      	ldr	r2, [pc, #408]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a58:	e00f      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a5e:	3308      	adds	r3, #8
 8003a60:	2102      	movs	r1, #2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f001 f902 	bl	8004c6c <RCCEx_PLL2_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a6e:	e004      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a76:	e000      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10a      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a82:	4b5a      	ldr	r3, [pc, #360]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a86:	f023 0103 	bic.w	r1, r3, #3
 8003a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a90:	4a56      	ldr	r2, [pc, #344]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a92:	430b      	orrs	r3, r1
 8003a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a96:	e003      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003aac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ab6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003aba:	460b      	mov	r3, r1
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f000 809f 	beq.w	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ac2:	4b4b      	ldr	r3, [pc, #300]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a4a      	ldr	r2, [pc, #296]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003acc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ace:	f7fd fd43 	bl	8001558 <HAL_GetTick>
 8003ad2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ad6:	e00b      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad8:	f7fd fd3e 	bl	8001558 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b64      	cmp	r3, #100	; 0x64
 8003ae6:	d903      	bls.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003aee:	e005      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003af0:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ed      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003afc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d179      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b04:	4b39      	ldr	r3, [pc, #228]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b10:	4053      	eors	r3, r2
 8003b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d015      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b1a:	4b34      	ldr	r3, [pc, #208]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b26:	4b31      	ldr	r3, [pc, #196]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	4a30      	ldr	r2, [pc, #192]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b30:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b32:	4b2e      	ldr	r3, [pc, #184]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	4a2d      	ldr	r2, [pc, #180]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b3e:	4a2b      	ldr	r2, [pc, #172]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b44:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b52:	d118      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fd fd00 	bl	8001558 <HAL_GetTick>
 8003b58:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b5c:	e00d      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5e:	f7fd fcfb 	bl	8001558 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b68:	1ad2      	subs	r2, r2, r3
 8003b6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d903      	bls.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003b78:	e005      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b7a:	4b1c      	ldr	r3, [pc, #112]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0eb      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003b86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d129      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b9e:	d10e      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bb0:	091a      	lsrs	r2, r3, #4
 8003bb2:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	4a0d      	ldr	r2, [pc, #52]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6113      	str	r3, [r2, #16]
 8003bbc:	e005      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bc8:	6113      	str	r3, [r2, #16]
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bcc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bda:	4a04      	ldr	r2, [pc, #16]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
 8003be0:	e00e      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003be2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003be6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003bea:	e009      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	58024800 	.word	0x58024800
 8003bf4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	f002 0301 	and.w	r3, r2, #1
 8003c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f000 8089 	beq.w	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c28:	2b28      	cmp	r3, #40	; 0x28
 8003c2a:	d86b      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003d0d 	.word	0x08003d0d
 8003c38:	08003d05 	.word	0x08003d05
 8003c3c:	08003d05 	.word	0x08003d05
 8003c40:	08003d05 	.word	0x08003d05
 8003c44:	08003d05 	.word	0x08003d05
 8003c48:	08003d05 	.word	0x08003d05
 8003c4c:	08003d05 	.word	0x08003d05
 8003c50:	08003d05 	.word	0x08003d05
 8003c54:	08003cd9 	.word	0x08003cd9
 8003c58:	08003d05 	.word	0x08003d05
 8003c5c:	08003d05 	.word	0x08003d05
 8003c60:	08003d05 	.word	0x08003d05
 8003c64:	08003d05 	.word	0x08003d05
 8003c68:	08003d05 	.word	0x08003d05
 8003c6c:	08003d05 	.word	0x08003d05
 8003c70:	08003d05 	.word	0x08003d05
 8003c74:	08003cef 	.word	0x08003cef
 8003c78:	08003d05 	.word	0x08003d05
 8003c7c:	08003d05 	.word	0x08003d05
 8003c80:	08003d05 	.word	0x08003d05
 8003c84:	08003d05 	.word	0x08003d05
 8003c88:	08003d05 	.word	0x08003d05
 8003c8c:	08003d05 	.word	0x08003d05
 8003c90:	08003d05 	.word	0x08003d05
 8003c94:	08003d0d 	.word	0x08003d0d
 8003c98:	08003d05 	.word	0x08003d05
 8003c9c:	08003d05 	.word	0x08003d05
 8003ca0:	08003d05 	.word	0x08003d05
 8003ca4:	08003d05 	.word	0x08003d05
 8003ca8:	08003d05 	.word	0x08003d05
 8003cac:	08003d05 	.word	0x08003d05
 8003cb0:	08003d05 	.word	0x08003d05
 8003cb4:	08003d0d 	.word	0x08003d0d
 8003cb8:	08003d05 	.word	0x08003d05
 8003cbc:	08003d05 	.word	0x08003d05
 8003cc0:	08003d05 	.word	0x08003d05
 8003cc4:	08003d05 	.word	0x08003d05
 8003cc8:	08003d05 	.word	0x08003d05
 8003ccc:	08003d05 	.word	0x08003d05
 8003cd0:	08003d05 	.word	0x08003d05
 8003cd4:	08003d0d 	.word	0x08003d0d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cdc:	3308      	adds	r3, #8
 8003cde:	2101      	movs	r1, #1
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 ffc3 	bl	8004c6c <RCCEx_PLL2_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cec:	e00f      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf2:	3328      	adds	r3, #40	; 0x28
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 f86a 	bl	8004dd0 <RCCEx_PLL3_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d02:	e004      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d0a:	e000      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d16:	4bbf      	ldr	r3, [pc, #764]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d24:	4abb      	ldr	r2, [pc, #748]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d26:	430b      	orrs	r3, r1
 8003d28:	6553      	str	r3, [r2, #84]	; 0x54
 8003d2a:	e003      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f002 0302 	and.w	r3, r2, #2
 8003d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d4a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4313      	orrs	r3, r2
 8003d52:	d041      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d5a:	2b05      	cmp	r3, #5
 8003d5c:	d824      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d5e:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d64:	08003db1 	.word	0x08003db1
 8003d68:	08003d7d 	.word	0x08003d7d
 8003d6c:	08003d93 	.word	0x08003d93
 8003d70:	08003db1 	.word	0x08003db1
 8003d74:	08003db1 	.word	0x08003db1
 8003d78:	08003db1 	.word	0x08003db1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d80:	3308      	adds	r3, #8
 8003d82:	2101      	movs	r1, #1
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 ff71 	bl	8004c6c <RCCEx_PLL2_Config>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d90:	e00f      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d96:	3328      	adds	r3, #40	; 0x28
 8003d98:	2101      	movs	r1, #1
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f001 f818 	bl	8004dd0 <RCCEx_PLL3_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003da6:	e004      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dae:	e000      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10a      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dba:	4b96      	ldr	r3, [pc, #600]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	f023 0107 	bic.w	r1, r3, #7
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc8:	4a92      	ldr	r2, [pc, #584]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	6553      	str	r3, [r2, #84]	; 0x54
 8003dce:	e003      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	f002 0304 	and.w	r3, r2, #4
 8003de4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003de8:	2300      	movs	r3, #0
 8003dea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4313      	orrs	r3, r2
 8003df6:	d044      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e00:	2b05      	cmp	r3, #5
 8003e02:	d825      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003e04:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e59 	.word	0x08003e59
 8003e10:	08003e25 	.word	0x08003e25
 8003e14:	08003e3b 	.word	0x08003e3b
 8003e18:	08003e59 	.word	0x08003e59
 8003e1c:	08003e59 	.word	0x08003e59
 8003e20:	08003e59 	.word	0x08003e59
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e28:	3308      	adds	r3, #8
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 ff1d 	bl	8004c6c <RCCEx_PLL2_Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e38:	e00f      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e3e:	3328      	adds	r3, #40	; 0x28
 8003e40:	2101      	movs	r1, #1
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 ffc4 	bl	8004dd0 <RCCEx_PLL3_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e4e:	e004      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e56:	e000      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10b      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e62:	4b6c      	ldr	r3, [pc, #432]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	f023 0107 	bic.w	r1, r3, #7
 8003e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e72:	4a68      	ldr	r2, [pc, #416]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e74:	430b      	orrs	r3, r1
 8003e76:	6593      	str	r3, [r2, #88]	; 0x58
 8003e78:	e003      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f002 0320 	and.w	r3, r2, #32
 8003e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e92:	2300      	movs	r3, #0
 8003e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	d055      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eae:	d033      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eb4:	d82c      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eba:	d02f      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec0:	d826      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ec2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ec6:	d02b      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003ec8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ecc:	d820      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed2:	d012      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed8:	d81a      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d022      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ee2:	d115      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee8:	3308      	adds	r3, #8
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 febd 	bl	8004c6c <RCCEx_PLL2_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ef8:	e015      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efe:	3328      	adds	r3, #40	; 0x28
 8003f00:	2102      	movs	r1, #2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 ff64 	bl	8004dd0 <RCCEx_PLL3_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f16:	e006      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f18:	bf00      	nop
 8003f1a:	e004      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f1c:	bf00      	nop
 8003f1e:	e002      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f20:	bf00      	nop
 8003f22:	e000      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10b      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f2e:	4b39      	ldr	r3, [pc, #228]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f32:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3e:	4a35      	ldr	r2, [pc, #212]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f40:	430b      	orrs	r3, r1
 8003f42:	6553      	str	r3, [r2, #84]	; 0x54
 8003f44:	e003      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003f64:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	d058      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f76:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f7a:	d033      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f7c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f80:	d82c      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f86:	d02f      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8c:	d826      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f92:	d02b      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003f94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f98:	d820      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f9e:	d012      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa4:	d81a      	bhi.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d022      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fae:	d115      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fe57 	bl	8004c6c <RCCEx_PLL2_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fc4:	e015      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fca:	3328      	adds	r3, #40	; 0x28
 8003fcc:	2102      	movs	r1, #2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fefe 	bl	8004dd0 <RCCEx_PLL3_Config>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fda:	e00a      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fe2:	e006      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fe4:	bf00      	nop
 8003fe6:	e004      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fe8:	bf00      	nop
 8003fea:	e002      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fec:	bf00      	nop
 8003fee:	e000      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10e      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004006:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800400a:	4a02      	ldr	r2, [pc, #8]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800400c:	430b      	orrs	r3, r1
 800400e:	6593      	str	r3, [r2, #88]	; 0x58
 8004010:	e006      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004012:	bf00      	nop
 8004014:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004018:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800401c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800402c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004036:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800403a:	460b      	mov	r3, r1
 800403c:	4313      	orrs	r3, r2
 800403e:	d055      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004044:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004048:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800404c:	d033      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800404e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004052:	d82c      	bhi.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004058:	d02f      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800405a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405e:	d826      	bhi.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004060:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004064:	d02b      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004066:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800406a:	d820      	bhi.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800406c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004070:	d012      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004076:	d81a      	bhi.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d022      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800407c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004080:	d115      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004086:	3308      	adds	r3, #8
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fdee 	bl	8004c6c <RCCEx_PLL2_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004096:	e015      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800409c:	3328      	adds	r3, #40	; 0x28
 800409e:	2102      	movs	r1, #2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fe95 	bl	8004dd0 <RCCEx_PLL3_Config>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040ac:	e00a      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040b4:	e006      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040b6:	bf00      	nop
 80040b8:	e004      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040ba:	bf00      	nop
 80040bc:	e002      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10b      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040cc:	4ba1      	ldr	r3, [pc, #644]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80040d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040dc:	4a9d      	ldr	r2, [pc, #628]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040de:	430b      	orrs	r3, r1
 80040e0:	6593      	str	r3, [r2, #88]	; 0x58
 80040e2:	e003      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f002 0308 	and.w	r3, r2, #8
 80040f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004102:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004106:	460b      	mov	r3, r1
 8004108:	4313      	orrs	r3, r2
 800410a:	d01e      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800410c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004118:	d10c      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800411a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800411e:	3328      	adds	r3, #40	; 0x28
 8004120:	2102      	movs	r1, #2
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fe54 	bl	8004dd0 <RCCEx_PLL3_Config>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004134:	4b87      	ldr	r3, [pc, #540]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800413c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004144:	4a83      	ldr	r2, [pc, #524]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004146:	430b      	orrs	r3, r1
 8004148:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800414a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	f002 0310 	and.w	r3, r2, #16
 8004156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800415a:	2300      	movs	r3, #0
 800415c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004160:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004164:	460b      	mov	r3, r1
 8004166:	4313      	orrs	r3, r2
 8004168:	d01e      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004176:	d10c      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800417c:	3328      	adds	r3, #40	; 0x28
 800417e:	2102      	movs	r1, #2
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fe25 	bl	8004dd0 <RCCEx_PLL3_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004192:	4b70      	ldr	r3, [pc, #448]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004196:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800419a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800419e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041a2:	4a6c      	ldr	r2, [pc, #432]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80041b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041b8:	2300      	movs	r3, #0
 80041ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041be:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80041c2:	460b      	mov	r3, r1
 80041c4:	4313      	orrs	r3, r2
 80041c6:	d03e      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041d4:	d022      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80041d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041da:	d81b      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80041e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e4:	d00b      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80041e6:	e015      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ec:	3308      	adds	r3, #8
 80041ee:	2100      	movs	r1, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fd3b 	bl	8004c6c <RCCEx_PLL2_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041fc:	e00f      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004202:	3328      	adds	r3, #40	; 0x28
 8004204:	2102      	movs	r1, #2
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fde2 	bl	8004dd0 <RCCEx_PLL3_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004212:	e004      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800421a:	e000      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800421c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800421e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004226:	4b4b      	ldr	r3, [pc, #300]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004232:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004236:	4a47      	ldr	r2, [pc, #284]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004238:	430b      	orrs	r3, r1
 800423a:	6593      	str	r3, [r2, #88]	; 0x58
 800423c:	e003      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004242:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004252:	67bb      	str	r3, [r7, #120]	; 0x78
 8004254:	2300      	movs	r3, #0
 8004256:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004258:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800425c:	460b      	mov	r3, r1
 800425e:	4313      	orrs	r3, r2
 8004260:	d03b      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800426e:	d01f      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004270:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004274:	d818      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800427a:	d003      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800427c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004280:	d007      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004282:	e011      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004284:	4b33      	ldr	r3, [pc, #204]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	4a32      	ldr	r2, [pc, #200]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800428a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800428e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004290:	e00f      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004296:	3328      	adds	r3, #40	; 0x28
 8004298:	2101      	movs	r1, #1
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fd98 	bl	8004dd0 <RCCEx_PLL3_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80042a6:	e004      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042ae:	e000      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80042b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042ba:	4b26      	ldr	r3, [pc, #152]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	4a22      	ldr	r2, [pc, #136]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042cc:	430b      	orrs	r3, r1
 80042ce:	6553      	str	r3, [r2, #84]	; 0x54
 80042d0:	e003      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80042e6:	673b      	str	r3, [r7, #112]	; 0x70
 80042e8:	2300      	movs	r3, #0
 80042ea:	677b      	str	r3, [r7, #116]	; 0x74
 80042ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80042f0:	460b      	mov	r3, r1
 80042f2:	4313      	orrs	r3, r2
 80042f4:	d034      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004304:	d007      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004306:	e011      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004308:	4b12      	ldr	r3, [pc, #72]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	4a11      	ldr	r2, [pc, #68]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800430e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004312:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004314:	e00e      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431a:	3308      	adds	r3, #8
 800431c:	2102      	movs	r1, #2
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fca4 	bl	8004c6c <RCCEx_PLL2_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800432a:	e003      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004334:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10d      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800433e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004340:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434a:	4a02      	ldr	r2, [pc, #8]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800434c:	430b      	orrs	r3, r1
 800434e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004350:	e006      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004352:	bf00      	nop
 8004354:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004358:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800435c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800436c:	66bb      	str	r3, [r7, #104]	; 0x68
 800436e:	2300      	movs	r3, #0
 8004370:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004372:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004376:	460b      	mov	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	d00c      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004380:	3328      	adds	r3, #40	; 0x28
 8004382:	2102      	movs	r1, #2
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fd23 	bl	8004dd0 <RCCEx_PLL3_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80043a2:	663b      	str	r3, [r7, #96]	; 0x60
 80043a4:	2300      	movs	r3, #0
 80043a6:	667b      	str	r3, [r7, #100]	; 0x64
 80043a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80043ac:	460b      	mov	r3, r1
 80043ae:	4313      	orrs	r3, r2
 80043b0:	d038      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043be:	d018      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80043c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c4:	d811      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ca:	d014      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80043cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d0:	d80b      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d011      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80043d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043da:	d106      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043dc:	4bc3      	ldr	r3, [pc, #780]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	4ac2      	ldr	r2, [pc, #776]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043e8:	e008      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043f0:	e004      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043f2:	bf00      	nop
 80043f4:	e002      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043f6:	bf00      	nop
 80043f8:	e000      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10b      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004404:	4bb9      	ldr	r3, [pc, #740]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004408:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800440c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004414:	4ab5      	ldr	r2, [pc, #724]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004416:	430b      	orrs	r3, r1
 8004418:	6553      	str	r3, [r2, #84]	; 0x54
 800441a:	e003      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004420:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004430:	65bb      	str	r3, [r7, #88]	; 0x58
 8004432:	2300      	movs	r3, #0
 8004434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004436:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800443a:	460b      	mov	r3, r1
 800443c:	4313      	orrs	r3, r2
 800443e:	d009      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004440:	4baa      	ldr	r3, [pc, #680]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004444:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800444c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444e:	4aa7      	ldr	r2, [pc, #668]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004450:	430b      	orrs	r3, r1
 8004452:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004460:	653b      	str	r3, [r7, #80]	; 0x50
 8004462:	2300      	movs	r3, #0
 8004464:	657b      	str	r3, [r7, #84]	; 0x54
 8004466:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800446a:	460b      	mov	r3, r1
 800446c:	4313      	orrs	r3, r2
 800446e:	d00a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004470:	4b9e      	ldr	r3, [pc, #632]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004480:	4a9a      	ldr	r2, [pc, #616]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004482:	430b      	orrs	r3, r1
 8004484:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004492:	64bb      	str	r3, [r7, #72]	; 0x48
 8004494:	2300      	movs	r3, #0
 8004496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004498:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800449c:	460b      	mov	r3, r1
 800449e:	4313      	orrs	r3, r2
 80044a0:	d009      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044a2:	4b92      	ldr	r3, [pc, #584]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b0:	4a8e      	ldr	r2, [pc, #568]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b2:	430b      	orrs	r3, r1
 80044b4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80044c2:	643b      	str	r3, [r7, #64]	; 0x40
 80044c4:	2300      	movs	r3, #0
 80044c6:	647b      	str	r3, [r7, #68]	; 0x44
 80044c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80044cc:	460b      	mov	r3, r1
 80044ce:	4313      	orrs	r3, r2
 80044d0:	d00e      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044d2:	4b86      	ldr	r3, [pc, #536]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	4a85      	ldr	r2, [pc, #532]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044dc:	6113      	str	r3, [r2, #16]
 80044de:	4b83      	ldr	r3, [pc, #524]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e0:	6919      	ldr	r1, [r3, #16]
 80044e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80044ea:	4a80      	ldr	r2, [pc, #512]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ec:	430b      	orrs	r3, r1
 80044ee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80044fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80044fe:	2300      	movs	r3, #0
 8004500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004502:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004506:	460b      	mov	r3, r1
 8004508:	4313      	orrs	r3, r2
 800450a:	d009      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800450c:	4b77      	ldr	r3, [pc, #476]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800450e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004510:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	4a74      	ldr	r2, [pc, #464]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800451c:	430b      	orrs	r3, r1
 800451e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004528:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800452c:	633b      	str	r3, [r7, #48]	; 0x30
 800452e:	2300      	movs	r3, #0
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
 8004532:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004536:	460b      	mov	r3, r1
 8004538:	4313      	orrs	r3, r2
 800453a:	d00a      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800453c:	4b6b      	ldr	r3, [pc, #428]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800454c:	4a67      	ldr	r2, [pc, #412]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800454e:	430b      	orrs	r3, r1
 8004550:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455a:	2100      	movs	r1, #0
 800455c:	62b9      	str	r1, [r7, #40]	; 0x28
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004564:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004568:	460b      	mov	r3, r1
 800456a:	4313      	orrs	r3, r2
 800456c:	d011      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004572:	3308      	adds	r3, #8
 8004574:	2100      	movs	r1, #0
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fb78 	bl	8004c6c <RCCEx_PLL2_Config>
 800457c:	4603      	mov	r3, r0
 800457e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004582:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800458e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	2100      	movs	r1, #0
 800459c:	6239      	str	r1, [r7, #32]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
 80045a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045a8:	460b      	mov	r3, r1
 80045aa:	4313      	orrs	r3, r2
 80045ac:	d011      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b2:	3308      	adds	r3, #8
 80045b4:	2101      	movs	r1, #1
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fb58 	bl	8004c6c <RCCEx_PLL2_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	2100      	movs	r1, #0
 80045dc:	61b9      	str	r1, [r7, #24]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	61fb      	str	r3, [r7, #28]
 80045e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045e8:	460b      	mov	r3, r1
 80045ea:	4313      	orrs	r3, r2
 80045ec:	d011      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f2:	3308      	adds	r3, #8
 80045f4:	2102      	movs	r1, #2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fb38 	bl	8004c6c <RCCEx_PLL2_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004602:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800460e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461a:	2100      	movs	r1, #0
 800461c:	6139      	str	r1, [r7, #16]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004628:	460b      	mov	r3, r1
 800462a:	4313      	orrs	r3, r2
 800462c:	d011      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004632:	3328      	adds	r3, #40	; 0x28
 8004634:	2100      	movs	r1, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fbca 	bl	8004dd0 <RCCEx_PLL3_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004642:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800464e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465a:	2100      	movs	r1, #0
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004668:	460b      	mov	r3, r1
 800466a:	4313      	orrs	r3, r2
 800466c:	d011      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004672:	3328      	adds	r3, #40	; 0x28
 8004674:	2101      	movs	r1, #1
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fbaa 	bl	8004dd0 <RCCEx_PLL3_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800468e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469a:	2100      	movs	r1, #0
 800469c:	6039      	str	r1, [r7, #0]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	607b      	str	r3, [r7, #4]
 80046a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046a8:	460b      	mov	r3, r1
 80046aa:	4313      	orrs	r3, r2
 80046ac:	d011      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b2:	3328      	adds	r3, #40	; 0x28
 80046b4:	2102      	movs	r1, #2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fb8a 	bl	8004dd0 <RCCEx_PLL3_Config>
 80046bc:	4603      	mov	r3, r0
 80046be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80046c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80046d2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	e000      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80046e6:	46bd      	mov	sp, r7
 80046e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ec:	58024400 	.word	0x58024400

080046f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046f4:	f7fe fd96 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	091b      	lsrs	r3, r3, #4
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	4904      	ldr	r1, [pc, #16]	; (8004718 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004706:	5ccb      	ldrb	r3, [r1, r3]
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	58024400 	.word	0x58024400
 8004718:	08006444 	.word	0x08006444

0800471c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800471c:	b480      	push	{r7}
 800471e:	b089      	sub	sp, #36	; 0x24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004724:	4ba1      	ldr	r3, [pc, #644]	; (80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800472e:	4b9f      	ldr	r3, [pc, #636]	; (80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	0b1b      	lsrs	r3, r3, #12
 8004734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004738:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800473a:	4b9c      	ldr	r3, [pc, #624]	; (80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004746:	4b99      	ldr	r3, [pc, #612]	; (80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	08db      	lsrs	r3, r3, #3
 800474c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8111 	beq.w	800498c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	2b02      	cmp	r3, #2
 800476e:	f000 8083 	beq.w	8004878 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b02      	cmp	r3, #2
 8004776:	f200 80a1 	bhi.w	80048bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d056      	beq.n	8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004786:	e099      	b.n	80048bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004788:	4b88      	ldr	r3, [pc, #544]	; (80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0320 	and.w	r3, r3, #32
 8004790:	2b00      	cmp	r3, #0
 8004792:	d02d      	beq.n	80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004794:	4b85      	ldr	r3, [pc, #532]	; (80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	08db      	lsrs	r3, r3, #3
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	4a84      	ldr	r2, [pc, #528]	; (80049b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
 80047a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	ee07 3a90 	vmov	s15, r3
 80047ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047be:	4b7b      	ldr	r3, [pc, #492]	; (80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047ee:	e087      	b.n	8004900 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004802:	4b6a      	ldr	r3, [pc, #424]	; (80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004812:	ed97 6a03 	vldr	s12, [r7, #12]
 8004816:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800481a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800481e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800482a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004832:	e065      	b.n	8004900 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004846:	4b59      	ldr	r3, [pc, #356]	; (80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004856:	ed97 6a03 	vldr	s12, [r7, #12]
 800485a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800485e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800486a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800486e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004876:	e043      	b.n	8004900 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004882:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488a:	4b48      	ldr	r3, [pc, #288]	; (80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489a:	ed97 6a03 	vldr	s12, [r7, #12]
 800489e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ba:	e021      	b.n	8004900 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ce:	4b37      	ldr	r3, [pc, #220]	; (80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048de:	ed97 6a03 	vldr	s12, [r7, #12]
 80048e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004900:	4b2a      	ldr	r3, [pc, #168]	; (80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	0a5b      	lsrs	r3, r3, #9
 8004906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800491a:	edd7 6a07 	vldr	s13, [r7, #28]
 800491e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004926:	ee17 2a90 	vmov	r2, s15
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800492e:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	0c1b      	lsrs	r3, r3, #16
 8004934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004938:	ee07 3a90 	vmov	s15, r3
 800493c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004944:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004948:	edd7 6a07 	vldr	s13, [r7, #28]
 800494c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004954:	ee17 2a90 	vmov	r2, s15
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800495c:	4b13      	ldr	r3, [pc, #76]	; (80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	0e1b      	lsrs	r3, r3, #24
 8004962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004972:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004976:	edd7 6a07 	vldr	s13, [r7, #28]
 800497a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800497e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004982:	ee17 2a90 	vmov	r2, s15
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800498a:	e008      	b.n	800499e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	609a      	str	r2, [r3, #8]
}
 800499e:	bf00      	nop
 80049a0:	3724      	adds	r7, #36	; 0x24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	58024400 	.word	0x58024400
 80049b0:	03d09000 	.word	0x03d09000
 80049b4:	46000000 	.word	0x46000000
 80049b8:	4c742400 	.word	0x4c742400
 80049bc:	4a742400 	.word	0x4a742400
 80049c0:	4bb71b00 	.word	0x4bb71b00

080049c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	; 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049cc:	4ba1      	ldr	r3, [pc, #644]	; (8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049d6:	4b9f      	ldr	r3, [pc, #636]	; (8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	0d1b      	lsrs	r3, r3, #20
 80049dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049e2:	4b9c      	ldr	r3, [pc, #624]	; (8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	0a1b      	lsrs	r3, r3, #8
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049ee:	4b99      	ldr	r3, [pc, #612]	; (8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	08db      	lsrs	r3, r3, #3
 80049f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	fb02 f303 	mul.w	r3, r2, r3
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8111 	beq.w	8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	f000 8083 	beq.w	8004b20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	f200 80a1 	bhi.w	8004b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d056      	beq.n	8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a2e:	e099      	b.n	8004b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a30:	4b88      	ldr	r3, [pc, #544]	; (8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0320 	and.w	r3, r3, #32
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d02d      	beq.n	8004a98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a3c:	4b85      	ldr	r3, [pc, #532]	; (8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	08db      	lsrs	r3, r3, #3
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	4a84      	ldr	r2, [pc, #528]	; (8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	ee07 3a90 	vmov	s15, r3
 8004a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a66:	4b7b      	ldr	r3, [pc, #492]	; (8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a96:	e087      	b.n	8004ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aaa:	4b6a      	ldr	r3, [pc, #424]	; (8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004abe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ada:	e065      	b.n	8004ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aee:	4b59      	ldr	r3, [pc, #356]	; (8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b1e:	e043      	b.n	8004ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b32:	4b48      	ldr	r3, [pc, #288]	; (8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b62:	e021      	b.n	8004ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b76:	4b37      	ldr	r3, [pc, #220]	; (8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ba6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ba8:	4b2a      	ldr	r3, [pc, #168]	; (8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	0a5b      	lsrs	r3, r3, #9
 8004bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bce:	ee17 2a90 	vmov	r2, s15
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004bd6:	4b1f      	ldr	r3, [pc, #124]	; (8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	0c1b      	lsrs	r3, r3, #16
 8004bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be0:	ee07 3a90 	vmov	s15, r3
 8004be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bfc:	ee17 2a90 	vmov	r2, s15
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c04:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	0e1b      	lsrs	r3, r3, #24
 8004c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c2a:	ee17 2a90 	vmov	r2, s15
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c32:	e008      	b.n	8004c46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	609a      	str	r2, [r3, #8]
}
 8004c46:	bf00      	nop
 8004c48:	3724      	adds	r7, #36	; 0x24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	58024400 	.word	0x58024400
 8004c58:	03d09000 	.word	0x03d09000
 8004c5c:	46000000 	.word	0x46000000
 8004c60:	4c742400 	.word	0x4c742400
 8004c64:	4a742400 	.word	0x4a742400
 8004c68:	4bb71b00 	.word	0x4bb71b00

08004c6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c7a:	4b53      	ldr	r3, [pc, #332]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d101      	bne.n	8004c8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e099      	b.n	8004dbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c8a:	4b4f      	ldr	r3, [pc, #316]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a4e      	ldr	r2, [pc, #312]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004c90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c96:	f7fc fc5f 	bl	8001558 <HAL_GetTick>
 8004c9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c9c:	e008      	b.n	8004cb0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c9e:	f7fc fc5b 	bl	8001558 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e086      	b.n	8004dbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cb0:	4b45      	ldr	r3, [pc, #276]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f0      	bne.n	8004c9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004cbc:	4b42      	ldr	r3, [pc, #264]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	031b      	lsls	r3, r3, #12
 8004cca:	493f      	ldr	r1, [pc, #252]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	628b      	str	r3, [r1, #40]	; 0x28
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	025b      	lsls	r3, r3, #9
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	041b      	lsls	r3, r3, #16
 8004cee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	061b      	lsls	r3, r3, #24
 8004cfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d00:	4931      	ldr	r1, [pc, #196]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d06:	4b30      	ldr	r3, [pc, #192]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	492d      	ldr	r1, [pc, #180]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d18:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	f023 0220 	bic.w	r2, r3, #32
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	4928      	ldr	r1, [pc, #160]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d2a:	4b27      	ldr	r3, [pc, #156]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	4a26      	ldr	r2, [pc, #152]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d30:	f023 0310 	bic.w	r3, r3, #16
 8004d34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d3a:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <RCCEx_PLL2_Config+0x160>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	69d2      	ldr	r2, [r2, #28]
 8004d42:	00d2      	lsls	r2, r2, #3
 8004d44:	4920      	ldr	r1, [pc, #128]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d4a:	4b1f      	ldr	r3, [pc, #124]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	4a1e      	ldr	r2, [pc, #120]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d50:	f043 0310 	orr.w	r3, r3, #16
 8004d54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d106      	bne.n	8004d6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d5c:	4b1a      	ldr	r3, [pc, #104]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	4a19      	ldr	r2, [pc, #100]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d68:	e00f      	b.n	8004d8a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d106      	bne.n	8004d7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d70:	4b15      	ldr	r3, [pc, #84]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	4a14      	ldr	r2, [pc, #80]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d7c:	e005      	b.n	8004d8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d7e:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	4a11      	ldr	r2, [pc, #68]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d8a:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a0e      	ldr	r2, [pc, #56]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004d90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d96:	f7fc fbdf 	bl	8001558 <HAL_GetTick>
 8004d9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d9c:	e008      	b.n	8004db0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d9e:	f7fc fbdb 	bl	8001558 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e006      	b.n	8004dbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <RCCEx_PLL2_Config+0x15c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0f0      	beq.n	8004d9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	58024400 	.word	0x58024400
 8004dcc:	ffff0007 	.word	0xffff0007

08004dd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dde:	4b53      	ldr	r3, [pc, #332]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d101      	bne.n	8004dee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e099      	b.n	8004f22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dee:	4b4f      	ldr	r3, [pc, #316]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a4e      	ldr	r2, [pc, #312]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dfa:	f7fc fbad 	bl	8001558 <HAL_GetTick>
 8004dfe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e00:	e008      	b.n	8004e14 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e02:	f7fc fba9 	bl	8001558 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e086      	b.n	8004f22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e14:	4b45      	ldr	r3, [pc, #276]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1f0      	bne.n	8004e02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e20:	4b42      	ldr	r3, [pc, #264]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e24:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	051b      	lsls	r3, r3, #20
 8004e2e:	493f      	ldr	r1, [pc, #252]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	628b      	str	r3, [r1, #40]	; 0x28
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	025b      	lsls	r3, r3, #9
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	041b      	lsls	r3, r3, #16
 8004e52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	061b      	lsls	r3, r3, #24
 8004e60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e64:	4931      	ldr	r1, [pc, #196]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e6a:	4b30      	ldr	r3, [pc, #192]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	492d      	ldr	r1, [pc, #180]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e7c:	4b2b      	ldr	r3, [pc, #172]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	4928      	ldr	r1, [pc, #160]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e8e:	4b27      	ldr	r3, [pc, #156]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	4a26      	ldr	r2, [pc, #152]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e9a:	4b24      	ldr	r3, [pc, #144]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e9e:	4b24      	ldr	r3, [pc, #144]	; (8004f30 <RCCEx_PLL3_Config+0x160>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	69d2      	ldr	r2, [r2, #28]
 8004ea6:	00d2      	lsls	r2, r2, #3
 8004ea8:	4920      	ldr	r1, [pc, #128]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004eae:	4b1f      	ldr	r3, [pc, #124]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	4a1e      	ldr	r2, [pc, #120]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d106      	bne.n	8004ece <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ec0:	4b1a      	ldr	r3, [pc, #104]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	4a19      	ldr	r2, [pc, #100]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004ec6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004eca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ecc:	e00f      	b.n	8004eee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d106      	bne.n	8004ee2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ed4:	4b15      	ldr	r3, [pc, #84]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	4a14      	ldr	r2, [pc, #80]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004eda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ede:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ee0:	e005      	b.n	8004eee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ee2:	4b12      	ldr	r3, [pc, #72]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	4a11      	ldr	r2, [pc, #68]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004ee8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004eee:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a0e      	ldr	r2, [pc, #56]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004efa:	f7fc fb2d 	bl	8001558 <HAL_GetTick>
 8004efe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f00:	e008      	b.n	8004f14 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f02:	f7fc fb29 	bl	8001558 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e006      	b.n	8004f22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <RCCEx_PLL3_Config+0x15c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0f0      	beq.n	8004f02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	58024400 	.word	0x58024400
 8004f30:	ffff0007 	.word	0xffff0007

08004f34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e10f      	b.n	8005166 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a87      	ldr	r2, [pc, #540]	; (8005170 <HAL_SPI_Init+0x23c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00f      	beq.n	8004f76 <HAL_SPI_Init+0x42>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a86      	ldr	r2, [pc, #536]	; (8005174 <HAL_SPI_Init+0x240>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00a      	beq.n	8004f76 <HAL_SPI_Init+0x42>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a84      	ldr	r2, [pc, #528]	; (8005178 <HAL_SPI_Init+0x244>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d005      	beq.n	8004f76 <HAL_SPI_Init+0x42>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	2b0f      	cmp	r3, #15
 8004f70:	d901      	bls.n	8004f76 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e0f7      	b.n	8005166 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f900 	bl	800517c <SPI_GetPacketSize>
 8004f7c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a7b      	ldr	r2, [pc, #492]	; (8005170 <HAL_SPI_Init+0x23c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00c      	beq.n	8004fa2 <HAL_SPI_Init+0x6e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a79      	ldr	r2, [pc, #484]	; (8005174 <HAL_SPI_Init+0x240>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <HAL_SPI_Init+0x6e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a78      	ldr	r2, [pc, #480]	; (8005178 <HAL_SPI_Init+0x244>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d002      	beq.n	8004fa2 <HAL_SPI_Init+0x6e>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d811      	bhi.n	8004fc6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004fa6:	4a72      	ldr	r2, [pc, #456]	; (8005170 <HAL_SPI_Init+0x23c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d009      	beq.n	8004fc0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a70      	ldr	r2, [pc, #448]	; (8005174 <HAL_SPI_Init+0x240>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <HAL_SPI_Init+0x8c>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a6f      	ldr	r2, [pc, #444]	; (8005178 <HAL_SPI_Init+0x244>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d104      	bne.n	8004fca <HAL_SPI_Init+0x96>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d901      	bls.n	8004fca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e0cd      	b.n	8005166 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fb ffd6 	bl	8000f90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0201 	bic.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005006:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005010:	d119      	bne.n	8005046 <HAL_SPI_Init+0x112>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800501a:	d103      	bne.n	8005024 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10c      	bne.n	8005046 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005034:	d107      	bne.n	8005046 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005044:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00f      	beq.n	8005072 <HAL_SPI_Init+0x13e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	2b06      	cmp	r3, #6
 8005058:	d90b      	bls.n	8005072 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	e007      	b.n	8005082 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005080:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69da      	ldr	r2, [r3, #28]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508a:	431a      	orrs	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005094:	ea42 0103 	orr.w	r1, r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e2:	ea42 0103 	orr.w	r1, r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d113      	bne.n	8005122 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800510c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005120:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40013000 	.word	0x40013000
 8005174:	40003800 	.word	0x40003800
 8005178:	40003c00 	.word	0x40003c00

0800517c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	3301      	adds	r3, #1
 800518c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	3301      	adds	r3, #1
 8005194:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	3307      	adds	r3, #7
 800519a:	08db      	lsrs	r3, r3, #3
 800519c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e042      	b.n	800524a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fb ff68 	bl	80010ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2224      	movs	r2, #36	; 0x24
 80051e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0201 	bic.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 fd91 	bl	8005d24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f826 	bl	8005254 <UART_SetConfig>
 8005208:	4603      	mov	r3, r0
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e01b      	b.n	800524a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005220:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005230:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0201 	orr.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fe10 	bl	8005e68 <UART_CheckIdleState>
 8005248:	4603      	mov	r3, r0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005258:	b092      	sub	sp, #72	; 0x48
 800525a:	af00      	add	r7, sp, #0
 800525c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	431a      	orrs	r2, r3
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	431a      	orrs	r2, r3
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	4313      	orrs	r3, r2
 800527a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4bbe      	ldr	r3, [pc, #760]	; (800557c <UART_SetConfig+0x328>)
 8005284:	4013      	ands	r3, r2
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800528c:	430b      	orrs	r3, r1
 800528e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4ab3      	ldr	r2, [pc, #716]	; (8005580 <UART_SetConfig+0x32c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d004      	beq.n	80052c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052bc:	4313      	orrs	r3, r2
 80052be:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	4baf      	ldr	r3, [pc, #700]	; (8005584 <UART_SetConfig+0x330>)
 80052c8:	4013      	ands	r3, r2
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052d0:	430b      	orrs	r3, r1
 80052d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	f023 010f 	bic.w	r1, r3, #15
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4aa6      	ldr	r2, [pc, #664]	; (8005588 <UART_SetConfig+0x334>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d177      	bne.n	80053e4 <UART_SetConfig+0x190>
 80052f4:	4ba5      	ldr	r3, [pc, #660]	; (800558c <UART_SetConfig+0x338>)
 80052f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052fc:	2b28      	cmp	r3, #40	; 0x28
 80052fe:	d86d      	bhi.n	80053dc <UART_SetConfig+0x188>
 8005300:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <UART_SetConfig+0xb4>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	080053ad 	.word	0x080053ad
 800530c:	080053dd 	.word	0x080053dd
 8005310:	080053dd 	.word	0x080053dd
 8005314:	080053dd 	.word	0x080053dd
 8005318:	080053dd 	.word	0x080053dd
 800531c:	080053dd 	.word	0x080053dd
 8005320:	080053dd 	.word	0x080053dd
 8005324:	080053dd 	.word	0x080053dd
 8005328:	080053b5 	.word	0x080053b5
 800532c:	080053dd 	.word	0x080053dd
 8005330:	080053dd 	.word	0x080053dd
 8005334:	080053dd 	.word	0x080053dd
 8005338:	080053dd 	.word	0x080053dd
 800533c:	080053dd 	.word	0x080053dd
 8005340:	080053dd 	.word	0x080053dd
 8005344:	080053dd 	.word	0x080053dd
 8005348:	080053bd 	.word	0x080053bd
 800534c:	080053dd 	.word	0x080053dd
 8005350:	080053dd 	.word	0x080053dd
 8005354:	080053dd 	.word	0x080053dd
 8005358:	080053dd 	.word	0x080053dd
 800535c:	080053dd 	.word	0x080053dd
 8005360:	080053dd 	.word	0x080053dd
 8005364:	080053dd 	.word	0x080053dd
 8005368:	080053c5 	.word	0x080053c5
 800536c:	080053dd 	.word	0x080053dd
 8005370:	080053dd 	.word	0x080053dd
 8005374:	080053dd 	.word	0x080053dd
 8005378:	080053dd 	.word	0x080053dd
 800537c:	080053dd 	.word	0x080053dd
 8005380:	080053dd 	.word	0x080053dd
 8005384:	080053dd 	.word	0x080053dd
 8005388:	080053cd 	.word	0x080053cd
 800538c:	080053dd 	.word	0x080053dd
 8005390:	080053dd 	.word	0x080053dd
 8005394:	080053dd 	.word	0x080053dd
 8005398:	080053dd 	.word	0x080053dd
 800539c:	080053dd 	.word	0x080053dd
 80053a0:	080053dd 	.word	0x080053dd
 80053a4:	080053dd 	.word	0x080053dd
 80053a8:	080053d5 	.word	0x080053d5
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b2:	e222      	b.n	80057fa <UART_SetConfig+0x5a6>
 80053b4:	2304      	movs	r3, #4
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ba:	e21e      	b.n	80057fa <UART_SetConfig+0x5a6>
 80053bc:	2308      	movs	r3, #8
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c2:	e21a      	b.n	80057fa <UART_SetConfig+0x5a6>
 80053c4:	2310      	movs	r3, #16
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ca:	e216      	b.n	80057fa <UART_SetConfig+0x5a6>
 80053cc:	2320      	movs	r3, #32
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d2:	e212      	b.n	80057fa <UART_SetConfig+0x5a6>
 80053d4:	2340      	movs	r3, #64	; 0x40
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053da:	e20e      	b.n	80057fa <UART_SetConfig+0x5a6>
 80053dc:	2380      	movs	r3, #128	; 0x80
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e2:	e20a      	b.n	80057fa <UART_SetConfig+0x5a6>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a69      	ldr	r2, [pc, #420]	; (8005590 <UART_SetConfig+0x33c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d130      	bne.n	8005450 <UART_SetConfig+0x1fc>
 80053ee:	4b67      	ldr	r3, [pc, #412]	; (800558c <UART_SetConfig+0x338>)
 80053f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	2b05      	cmp	r3, #5
 80053f8:	d826      	bhi.n	8005448 <UART_SetConfig+0x1f4>
 80053fa:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <UART_SetConfig+0x1ac>)
 80053fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005400:	08005419 	.word	0x08005419
 8005404:	08005421 	.word	0x08005421
 8005408:	08005429 	.word	0x08005429
 800540c:	08005431 	.word	0x08005431
 8005410:	08005439 	.word	0x08005439
 8005414:	08005441 	.word	0x08005441
 8005418:	2300      	movs	r3, #0
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541e:	e1ec      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005420:	2304      	movs	r3, #4
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005426:	e1e8      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005428:	2308      	movs	r3, #8
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542e:	e1e4      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005430:	2310      	movs	r3, #16
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005436:	e1e0      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005438:	2320      	movs	r3, #32
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543e:	e1dc      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005440:	2340      	movs	r3, #64	; 0x40
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005446:	e1d8      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005448:	2380      	movs	r3, #128	; 0x80
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544e:	e1d4      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a4f      	ldr	r2, [pc, #316]	; (8005594 <UART_SetConfig+0x340>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d130      	bne.n	80054bc <UART_SetConfig+0x268>
 800545a:	4b4c      	ldr	r3, [pc, #304]	; (800558c <UART_SetConfig+0x338>)
 800545c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	2b05      	cmp	r3, #5
 8005464:	d826      	bhi.n	80054b4 <UART_SetConfig+0x260>
 8005466:	a201      	add	r2, pc, #4	; (adr r2, 800546c <UART_SetConfig+0x218>)
 8005468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546c:	08005485 	.word	0x08005485
 8005470:	0800548d 	.word	0x0800548d
 8005474:	08005495 	.word	0x08005495
 8005478:	0800549d 	.word	0x0800549d
 800547c:	080054a5 	.word	0x080054a5
 8005480:	080054ad 	.word	0x080054ad
 8005484:	2300      	movs	r3, #0
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548a:	e1b6      	b.n	80057fa <UART_SetConfig+0x5a6>
 800548c:	2304      	movs	r3, #4
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005492:	e1b2      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005494:	2308      	movs	r3, #8
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549a:	e1ae      	b.n	80057fa <UART_SetConfig+0x5a6>
 800549c:	2310      	movs	r3, #16
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a2:	e1aa      	b.n	80057fa <UART_SetConfig+0x5a6>
 80054a4:	2320      	movs	r3, #32
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054aa:	e1a6      	b.n	80057fa <UART_SetConfig+0x5a6>
 80054ac:	2340      	movs	r3, #64	; 0x40
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b2:	e1a2      	b.n	80057fa <UART_SetConfig+0x5a6>
 80054b4:	2380      	movs	r3, #128	; 0x80
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ba:	e19e      	b.n	80057fa <UART_SetConfig+0x5a6>
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a35      	ldr	r2, [pc, #212]	; (8005598 <UART_SetConfig+0x344>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d130      	bne.n	8005528 <UART_SetConfig+0x2d4>
 80054c6:	4b31      	ldr	r3, [pc, #196]	; (800558c <UART_SetConfig+0x338>)
 80054c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	2b05      	cmp	r3, #5
 80054d0:	d826      	bhi.n	8005520 <UART_SetConfig+0x2cc>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <UART_SetConfig+0x284>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	080054f1 	.word	0x080054f1
 80054dc:	080054f9 	.word	0x080054f9
 80054e0:	08005501 	.word	0x08005501
 80054e4:	08005509 	.word	0x08005509
 80054e8:	08005511 	.word	0x08005511
 80054ec:	08005519 	.word	0x08005519
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054f6:	e180      	b.n	80057fa <UART_SetConfig+0x5a6>
 80054f8:	2304      	movs	r3, #4
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054fe:	e17c      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005500:	2308      	movs	r3, #8
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005506:	e178      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005508:	2310      	movs	r3, #16
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550e:	e174      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005510:	2320      	movs	r3, #32
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005516:	e170      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005518:	2340      	movs	r3, #64	; 0x40
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551e:	e16c      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005520:	2380      	movs	r3, #128	; 0x80
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005526:	e168      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1b      	ldr	r2, [pc, #108]	; (800559c <UART_SetConfig+0x348>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d142      	bne.n	80055b8 <UART_SetConfig+0x364>
 8005532:	4b16      	ldr	r3, [pc, #88]	; (800558c <UART_SetConfig+0x338>)
 8005534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	2b05      	cmp	r3, #5
 800553c:	d838      	bhi.n	80055b0 <UART_SetConfig+0x35c>
 800553e:	a201      	add	r2, pc, #4	; (adr r2, 8005544 <UART_SetConfig+0x2f0>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	0800555d 	.word	0x0800555d
 8005548:	08005565 	.word	0x08005565
 800554c:	0800556d 	.word	0x0800556d
 8005550:	08005575 	.word	0x08005575
 8005554:	080055a1 	.word	0x080055a1
 8005558:	080055a9 	.word	0x080055a9
 800555c:	2300      	movs	r3, #0
 800555e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005562:	e14a      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005564:	2304      	movs	r3, #4
 8005566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556a:	e146      	b.n	80057fa <UART_SetConfig+0x5a6>
 800556c:	2308      	movs	r3, #8
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005572:	e142      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005574:	2310      	movs	r3, #16
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557a:	e13e      	b.n	80057fa <UART_SetConfig+0x5a6>
 800557c:	cfff69f3 	.word	0xcfff69f3
 8005580:	58000c00 	.word	0x58000c00
 8005584:	11fff4ff 	.word	0x11fff4ff
 8005588:	40011000 	.word	0x40011000
 800558c:	58024400 	.word	0x58024400
 8005590:	40004400 	.word	0x40004400
 8005594:	40004800 	.word	0x40004800
 8005598:	40004c00 	.word	0x40004c00
 800559c:	40005000 	.word	0x40005000
 80055a0:	2320      	movs	r3, #32
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a6:	e128      	b.n	80057fa <UART_SetConfig+0x5a6>
 80055a8:	2340      	movs	r3, #64	; 0x40
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ae:	e124      	b.n	80057fa <UART_SetConfig+0x5a6>
 80055b0:	2380      	movs	r3, #128	; 0x80
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b6:	e120      	b.n	80057fa <UART_SetConfig+0x5a6>
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4acb      	ldr	r2, [pc, #812]	; (80058ec <UART_SetConfig+0x698>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d176      	bne.n	80056b0 <UART_SetConfig+0x45c>
 80055c2:	4bcb      	ldr	r3, [pc, #812]	; (80058f0 <UART_SetConfig+0x69c>)
 80055c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055ca:	2b28      	cmp	r3, #40	; 0x28
 80055cc:	d86c      	bhi.n	80056a8 <UART_SetConfig+0x454>
 80055ce:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <UART_SetConfig+0x380>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	08005679 	.word	0x08005679
 80055d8:	080056a9 	.word	0x080056a9
 80055dc:	080056a9 	.word	0x080056a9
 80055e0:	080056a9 	.word	0x080056a9
 80055e4:	080056a9 	.word	0x080056a9
 80055e8:	080056a9 	.word	0x080056a9
 80055ec:	080056a9 	.word	0x080056a9
 80055f0:	080056a9 	.word	0x080056a9
 80055f4:	08005681 	.word	0x08005681
 80055f8:	080056a9 	.word	0x080056a9
 80055fc:	080056a9 	.word	0x080056a9
 8005600:	080056a9 	.word	0x080056a9
 8005604:	080056a9 	.word	0x080056a9
 8005608:	080056a9 	.word	0x080056a9
 800560c:	080056a9 	.word	0x080056a9
 8005610:	080056a9 	.word	0x080056a9
 8005614:	08005689 	.word	0x08005689
 8005618:	080056a9 	.word	0x080056a9
 800561c:	080056a9 	.word	0x080056a9
 8005620:	080056a9 	.word	0x080056a9
 8005624:	080056a9 	.word	0x080056a9
 8005628:	080056a9 	.word	0x080056a9
 800562c:	080056a9 	.word	0x080056a9
 8005630:	080056a9 	.word	0x080056a9
 8005634:	08005691 	.word	0x08005691
 8005638:	080056a9 	.word	0x080056a9
 800563c:	080056a9 	.word	0x080056a9
 8005640:	080056a9 	.word	0x080056a9
 8005644:	080056a9 	.word	0x080056a9
 8005648:	080056a9 	.word	0x080056a9
 800564c:	080056a9 	.word	0x080056a9
 8005650:	080056a9 	.word	0x080056a9
 8005654:	08005699 	.word	0x08005699
 8005658:	080056a9 	.word	0x080056a9
 800565c:	080056a9 	.word	0x080056a9
 8005660:	080056a9 	.word	0x080056a9
 8005664:	080056a9 	.word	0x080056a9
 8005668:	080056a9 	.word	0x080056a9
 800566c:	080056a9 	.word	0x080056a9
 8005670:	080056a9 	.word	0x080056a9
 8005674:	080056a1 	.word	0x080056a1
 8005678:	2301      	movs	r3, #1
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567e:	e0bc      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005680:	2304      	movs	r3, #4
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005686:	e0b8      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005688:	2308      	movs	r3, #8
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568e:	e0b4      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005690:	2310      	movs	r3, #16
 8005692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005696:	e0b0      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005698:	2320      	movs	r3, #32
 800569a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569e:	e0ac      	b.n	80057fa <UART_SetConfig+0x5a6>
 80056a0:	2340      	movs	r3, #64	; 0x40
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056a6:	e0a8      	b.n	80057fa <UART_SetConfig+0x5a6>
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ae:	e0a4      	b.n	80057fa <UART_SetConfig+0x5a6>
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a8f      	ldr	r2, [pc, #572]	; (80058f4 <UART_SetConfig+0x6a0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d130      	bne.n	800571c <UART_SetConfig+0x4c8>
 80056ba:	4b8d      	ldr	r3, [pc, #564]	; (80058f0 <UART_SetConfig+0x69c>)
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	2b05      	cmp	r3, #5
 80056c4:	d826      	bhi.n	8005714 <UART_SetConfig+0x4c0>
 80056c6:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <UART_SetConfig+0x478>)
 80056c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056cc:	080056e5 	.word	0x080056e5
 80056d0:	080056ed 	.word	0x080056ed
 80056d4:	080056f5 	.word	0x080056f5
 80056d8:	080056fd 	.word	0x080056fd
 80056dc:	08005705 	.word	0x08005705
 80056e0:	0800570d 	.word	0x0800570d
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ea:	e086      	b.n	80057fa <UART_SetConfig+0x5a6>
 80056ec:	2304      	movs	r3, #4
 80056ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f2:	e082      	b.n	80057fa <UART_SetConfig+0x5a6>
 80056f4:	2308      	movs	r3, #8
 80056f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056fa:	e07e      	b.n	80057fa <UART_SetConfig+0x5a6>
 80056fc:	2310      	movs	r3, #16
 80056fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005702:	e07a      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005704:	2320      	movs	r3, #32
 8005706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800570a:	e076      	b.n	80057fa <UART_SetConfig+0x5a6>
 800570c:	2340      	movs	r3, #64	; 0x40
 800570e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005712:	e072      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005714:	2380      	movs	r3, #128	; 0x80
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800571a:	e06e      	b.n	80057fa <UART_SetConfig+0x5a6>
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a75      	ldr	r2, [pc, #468]	; (80058f8 <UART_SetConfig+0x6a4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d130      	bne.n	8005788 <UART_SetConfig+0x534>
 8005726:	4b72      	ldr	r3, [pc, #456]	; (80058f0 <UART_SetConfig+0x69c>)
 8005728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	2b05      	cmp	r3, #5
 8005730:	d826      	bhi.n	8005780 <UART_SetConfig+0x52c>
 8005732:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <UART_SetConfig+0x4e4>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	08005751 	.word	0x08005751
 800573c:	08005759 	.word	0x08005759
 8005740:	08005761 	.word	0x08005761
 8005744:	08005769 	.word	0x08005769
 8005748:	08005771 	.word	0x08005771
 800574c:	08005779 	.word	0x08005779
 8005750:	2300      	movs	r3, #0
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005756:	e050      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005758:	2304      	movs	r3, #4
 800575a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800575e:	e04c      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005760:	2308      	movs	r3, #8
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005766:	e048      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005768:	2310      	movs	r3, #16
 800576a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800576e:	e044      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005770:	2320      	movs	r3, #32
 8005772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005776:	e040      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005778:	2340      	movs	r3, #64	; 0x40
 800577a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800577e:	e03c      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005780:	2380      	movs	r3, #128	; 0x80
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005786:	e038      	b.n	80057fa <UART_SetConfig+0x5a6>
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a5b      	ldr	r2, [pc, #364]	; (80058fc <UART_SetConfig+0x6a8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d130      	bne.n	80057f4 <UART_SetConfig+0x5a0>
 8005792:	4b57      	ldr	r3, [pc, #348]	; (80058f0 <UART_SetConfig+0x69c>)
 8005794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	2b05      	cmp	r3, #5
 800579c:	d826      	bhi.n	80057ec <UART_SetConfig+0x598>
 800579e:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <UART_SetConfig+0x550>)
 80057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a4:	080057bd 	.word	0x080057bd
 80057a8:	080057c5 	.word	0x080057c5
 80057ac:	080057cd 	.word	0x080057cd
 80057b0:	080057d5 	.word	0x080057d5
 80057b4:	080057dd 	.word	0x080057dd
 80057b8:	080057e5 	.word	0x080057e5
 80057bc:	2302      	movs	r3, #2
 80057be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057c2:	e01a      	b.n	80057fa <UART_SetConfig+0x5a6>
 80057c4:	2304      	movs	r3, #4
 80057c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ca:	e016      	b.n	80057fa <UART_SetConfig+0x5a6>
 80057cc:	2308      	movs	r3, #8
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057d2:	e012      	b.n	80057fa <UART_SetConfig+0x5a6>
 80057d4:	2310      	movs	r3, #16
 80057d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057da:	e00e      	b.n	80057fa <UART_SetConfig+0x5a6>
 80057dc:	2320      	movs	r3, #32
 80057de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057e2:	e00a      	b.n	80057fa <UART_SetConfig+0x5a6>
 80057e4:	2340      	movs	r3, #64	; 0x40
 80057e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ea:	e006      	b.n	80057fa <UART_SetConfig+0x5a6>
 80057ec:	2380      	movs	r3, #128	; 0x80
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f2:	e002      	b.n	80057fa <UART_SetConfig+0x5a6>
 80057f4:	2380      	movs	r3, #128	; 0x80
 80057f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a3f      	ldr	r2, [pc, #252]	; (80058fc <UART_SetConfig+0x6a8>)
 8005800:	4293      	cmp	r3, r2
 8005802:	f040 80f8 	bne.w	80059f6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005806:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800580a:	2b20      	cmp	r3, #32
 800580c:	dc46      	bgt.n	800589c <UART_SetConfig+0x648>
 800580e:	2b02      	cmp	r3, #2
 8005810:	f2c0 8082 	blt.w	8005918 <UART_SetConfig+0x6c4>
 8005814:	3b02      	subs	r3, #2
 8005816:	2b1e      	cmp	r3, #30
 8005818:	d87e      	bhi.n	8005918 <UART_SetConfig+0x6c4>
 800581a:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <UART_SetConfig+0x5cc>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	080058a3 	.word	0x080058a3
 8005824:	08005919 	.word	0x08005919
 8005828:	080058ab 	.word	0x080058ab
 800582c:	08005919 	.word	0x08005919
 8005830:	08005919 	.word	0x08005919
 8005834:	08005919 	.word	0x08005919
 8005838:	080058bb 	.word	0x080058bb
 800583c:	08005919 	.word	0x08005919
 8005840:	08005919 	.word	0x08005919
 8005844:	08005919 	.word	0x08005919
 8005848:	08005919 	.word	0x08005919
 800584c:	08005919 	.word	0x08005919
 8005850:	08005919 	.word	0x08005919
 8005854:	08005919 	.word	0x08005919
 8005858:	080058cb 	.word	0x080058cb
 800585c:	08005919 	.word	0x08005919
 8005860:	08005919 	.word	0x08005919
 8005864:	08005919 	.word	0x08005919
 8005868:	08005919 	.word	0x08005919
 800586c:	08005919 	.word	0x08005919
 8005870:	08005919 	.word	0x08005919
 8005874:	08005919 	.word	0x08005919
 8005878:	08005919 	.word	0x08005919
 800587c:	08005919 	.word	0x08005919
 8005880:	08005919 	.word	0x08005919
 8005884:	08005919 	.word	0x08005919
 8005888:	08005919 	.word	0x08005919
 800588c:	08005919 	.word	0x08005919
 8005890:	08005919 	.word	0x08005919
 8005894:	08005919 	.word	0x08005919
 8005898:	0800590b 	.word	0x0800590b
 800589c:	2b40      	cmp	r3, #64	; 0x40
 800589e:	d037      	beq.n	8005910 <UART_SetConfig+0x6bc>
 80058a0:	e03a      	b.n	8005918 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80058a2:	f7fe ff25 	bl	80046f0 <HAL_RCCEx_GetD3PCLK1Freq>
 80058a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058a8:	e03c      	b.n	8005924 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe ff34 	bl	800471c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058b8:	e034      	b.n	8005924 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058ba:	f107 0318 	add.w	r3, r7, #24
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff f880 	bl	80049c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058c8:	e02c      	b.n	8005924 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058ca:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <UART_SetConfig+0x69c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d016      	beq.n	8005904 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058d6:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <UART_SetConfig+0x69c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	08db      	lsrs	r3, r3, #3
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	4a07      	ldr	r2, [pc, #28]	; (8005900 <UART_SetConfig+0x6ac>)
 80058e2:	fa22 f303 	lsr.w	r3, r2, r3
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058e8:	e01c      	b.n	8005924 <UART_SetConfig+0x6d0>
 80058ea:	bf00      	nop
 80058ec:	40011400 	.word	0x40011400
 80058f0:	58024400 	.word	0x58024400
 80058f4:	40007800 	.word	0x40007800
 80058f8:	40007c00 	.word	0x40007c00
 80058fc:	58000c00 	.word	0x58000c00
 8005900:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005904:	4b9d      	ldr	r3, [pc, #628]	; (8005b7c <UART_SetConfig+0x928>)
 8005906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005908:	e00c      	b.n	8005924 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800590a:	4b9d      	ldr	r3, [pc, #628]	; (8005b80 <UART_SetConfig+0x92c>)
 800590c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800590e:	e009      	b.n	8005924 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005916:	e005      	b.n	8005924 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005922:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 81de 	beq.w	8005ce8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	4a94      	ldr	r2, [pc, #592]	; (8005b84 <UART_SetConfig+0x930>)
 8005932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005936:	461a      	mov	r2, r3
 8005938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593a:	fbb3 f3f2 	udiv	r3, r3, r2
 800593e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	4613      	mov	r3, r2
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	4413      	add	r3, r2
 800594a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800594c:	429a      	cmp	r2, r3
 800594e:	d305      	bcc.n	800595c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005958:	429a      	cmp	r2, r3
 800595a:	d903      	bls.n	8005964 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005962:	e1c1      	b.n	8005ce8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005966:	2200      	movs	r2, #0
 8005968:	60bb      	str	r3, [r7, #8]
 800596a:	60fa      	str	r2, [r7, #12]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	4a84      	ldr	r2, [pc, #528]	; (8005b84 <UART_SetConfig+0x930>)
 8005972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005976:	b29b      	uxth	r3, r3
 8005978:	2200      	movs	r2, #0
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	607a      	str	r2, [r7, #4]
 800597e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005982:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005986:	f7fa fca7 	bl	80002d8 <__aeabi_uldivmod>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	4610      	mov	r0, r2
 8005990:	4619      	mov	r1, r3
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	020b      	lsls	r3, r1, #8
 800599c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059a0:	0202      	lsls	r2, r0, #8
 80059a2:	6979      	ldr	r1, [r7, #20]
 80059a4:	6849      	ldr	r1, [r1, #4]
 80059a6:	0849      	lsrs	r1, r1, #1
 80059a8:	2000      	movs	r0, #0
 80059aa:	460c      	mov	r4, r1
 80059ac:	4605      	mov	r5, r0
 80059ae:	eb12 0804 	adds.w	r8, r2, r4
 80059b2:	eb43 0905 	adc.w	r9, r3, r5
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	469a      	mov	sl, r3
 80059be:	4693      	mov	fp, r2
 80059c0:	4652      	mov	r2, sl
 80059c2:	465b      	mov	r3, fp
 80059c4:	4640      	mov	r0, r8
 80059c6:	4649      	mov	r1, r9
 80059c8:	f7fa fc86 	bl	80002d8 <__aeabi_uldivmod>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4613      	mov	r3, r2
 80059d2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059da:	d308      	bcc.n	80059ee <UART_SetConfig+0x79a>
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059e2:	d204      	bcs.n	80059ee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ea:	60da      	str	r2, [r3, #12]
 80059ec:	e17c      	b.n	8005ce8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80059f4:	e178      	b.n	8005ce8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059fe:	f040 80c5 	bne.w	8005b8c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005a02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	dc48      	bgt.n	8005a9c <UART_SetConfig+0x848>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	db7b      	blt.n	8005b06 <UART_SetConfig+0x8b2>
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	d879      	bhi.n	8005b06 <UART_SetConfig+0x8b2>
 8005a12:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <UART_SetConfig+0x7c4>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005aa3 	.word	0x08005aa3
 8005a1c:	08005aab 	.word	0x08005aab
 8005a20:	08005b07 	.word	0x08005b07
 8005a24:	08005b07 	.word	0x08005b07
 8005a28:	08005ab3 	.word	0x08005ab3
 8005a2c:	08005b07 	.word	0x08005b07
 8005a30:	08005b07 	.word	0x08005b07
 8005a34:	08005b07 	.word	0x08005b07
 8005a38:	08005ac3 	.word	0x08005ac3
 8005a3c:	08005b07 	.word	0x08005b07
 8005a40:	08005b07 	.word	0x08005b07
 8005a44:	08005b07 	.word	0x08005b07
 8005a48:	08005b07 	.word	0x08005b07
 8005a4c:	08005b07 	.word	0x08005b07
 8005a50:	08005b07 	.word	0x08005b07
 8005a54:	08005b07 	.word	0x08005b07
 8005a58:	08005ad3 	.word	0x08005ad3
 8005a5c:	08005b07 	.word	0x08005b07
 8005a60:	08005b07 	.word	0x08005b07
 8005a64:	08005b07 	.word	0x08005b07
 8005a68:	08005b07 	.word	0x08005b07
 8005a6c:	08005b07 	.word	0x08005b07
 8005a70:	08005b07 	.word	0x08005b07
 8005a74:	08005b07 	.word	0x08005b07
 8005a78:	08005b07 	.word	0x08005b07
 8005a7c:	08005b07 	.word	0x08005b07
 8005a80:	08005b07 	.word	0x08005b07
 8005a84:	08005b07 	.word	0x08005b07
 8005a88:	08005b07 	.word	0x08005b07
 8005a8c:	08005b07 	.word	0x08005b07
 8005a90:	08005b07 	.word	0x08005b07
 8005a94:	08005b07 	.word	0x08005b07
 8005a98:	08005af9 	.word	0x08005af9
 8005a9c:	2b40      	cmp	r3, #64	; 0x40
 8005a9e:	d02e      	beq.n	8005afe <UART_SetConfig+0x8aa>
 8005aa0:	e031      	b.n	8005b06 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aa2:	f7fd fbef 	bl	8003284 <HAL_RCC_GetPCLK1Freq>
 8005aa6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005aa8:	e033      	b.n	8005b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aaa:	f7fd fc01 	bl	80032b0 <HAL_RCC_GetPCLK2Freq>
 8005aae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ab0:	e02f      	b.n	8005b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fe fe30 	bl	800471c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ac0:	e027      	b.n	8005b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ac2:	f107 0318 	add.w	r3, r7, #24
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fe ff7c 	bl	80049c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ad0:	e01f      	b.n	8005b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ad2:	4b2d      	ldr	r3, [pc, #180]	; (8005b88 <UART_SetConfig+0x934>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d009      	beq.n	8005af2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ade:	4b2a      	ldr	r3, [pc, #168]	; (8005b88 <UART_SetConfig+0x934>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	08db      	lsrs	r3, r3, #3
 8005ae4:	f003 0303 	and.w	r3, r3, #3
 8005ae8:	4a24      	ldr	r2, [pc, #144]	; (8005b7c <UART_SetConfig+0x928>)
 8005aea:	fa22 f303 	lsr.w	r3, r2, r3
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005af0:	e00f      	b.n	8005b12 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005af2:	4b22      	ldr	r3, [pc, #136]	; (8005b7c <UART_SetConfig+0x928>)
 8005af4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005af6:	e00c      	b.n	8005b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005af8:	4b21      	ldr	r3, [pc, #132]	; (8005b80 <UART_SetConfig+0x92c>)
 8005afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005afc:	e009      	b.n	8005b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b04:	e005      	b.n	8005b12 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005b10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 80e7 	beq.w	8005ce8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	4a19      	ldr	r2, [pc, #100]	; (8005b84 <UART_SetConfig+0x930>)
 8005b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b24:	461a      	mov	r2, r3
 8005b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b2c:	005a      	lsls	r2, r3, #1
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	085b      	lsrs	r3, r3, #1
 8005b34:	441a      	add	r2, r3
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	2b0f      	cmp	r3, #15
 8005b44:	d916      	bls.n	8005b74 <UART_SetConfig+0x920>
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b4c:	d212      	bcs.n	8005b74 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	f023 030f 	bic.w	r3, r3, #15
 8005b56:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	085b      	lsrs	r3, r3, #1
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b66:	4313      	orrs	r3, r2
 8005b68:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005b70:	60da      	str	r2, [r3, #12]
 8005b72:	e0b9      	b.n	8005ce8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005b7a:	e0b5      	b.n	8005ce8 <UART_SetConfig+0xa94>
 8005b7c:	03d09000 	.word	0x03d09000
 8005b80:	003d0900 	.word	0x003d0900
 8005b84:	08006454 	.word	0x08006454
 8005b88:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	dc49      	bgt.n	8005c28 <UART_SetConfig+0x9d4>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	db7c      	blt.n	8005c92 <UART_SetConfig+0xa3e>
 8005b98:	2b20      	cmp	r3, #32
 8005b9a:	d87a      	bhi.n	8005c92 <UART_SetConfig+0xa3e>
 8005b9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <UART_SetConfig+0x950>)
 8005b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba2:	bf00      	nop
 8005ba4:	08005c2f 	.word	0x08005c2f
 8005ba8:	08005c37 	.word	0x08005c37
 8005bac:	08005c93 	.word	0x08005c93
 8005bb0:	08005c93 	.word	0x08005c93
 8005bb4:	08005c3f 	.word	0x08005c3f
 8005bb8:	08005c93 	.word	0x08005c93
 8005bbc:	08005c93 	.word	0x08005c93
 8005bc0:	08005c93 	.word	0x08005c93
 8005bc4:	08005c4f 	.word	0x08005c4f
 8005bc8:	08005c93 	.word	0x08005c93
 8005bcc:	08005c93 	.word	0x08005c93
 8005bd0:	08005c93 	.word	0x08005c93
 8005bd4:	08005c93 	.word	0x08005c93
 8005bd8:	08005c93 	.word	0x08005c93
 8005bdc:	08005c93 	.word	0x08005c93
 8005be0:	08005c93 	.word	0x08005c93
 8005be4:	08005c5f 	.word	0x08005c5f
 8005be8:	08005c93 	.word	0x08005c93
 8005bec:	08005c93 	.word	0x08005c93
 8005bf0:	08005c93 	.word	0x08005c93
 8005bf4:	08005c93 	.word	0x08005c93
 8005bf8:	08005c93 	.word	0x08005c93
 8005bfc:	08005c93 	.word	0x08005c93
 8005c00:	08005c93 	.word	0x08005c93
 8005c04:	08005c93 	.word	0x08005c93
 8005c08:	08005c93 	.word	0x08005c93
 8005c0c:	08005c93 	.word	0x08005c93
 8005c10:	08005c93 	.word	0x08005c93
 8005c14:	08005c93 	.word	0x08005c93
 8005c18:	08005c93 	.word	0x08005c93
 8005c1c:	08005c93 	.word	0x08005c93
 8005c20:	08005c93 	.word	0x08005c93
 8005c24:	08005c85 	.word	0x08005c85
 8005c28:	2b40      	cmp	r3, #64	; 0x40
 8005c2a:	d02e      	beq.n	8005c8a <UART_SetConfig+0xa36>
 8005c2c:	e031      	b.n	8005c92 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c2e:	f7fd fb29 	bl	8003284 <HAL_RCC_GetPCLK1Freq>
 8005c32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c34:	e033      	b.n	8005c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c36:	f7fd fb3b 	bl	80032b0 <HAL_RCC_GetPCLK2Freq>
 8005c3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c3c:	e02f      	b.n	8005c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fe fd6a 	bl	800471c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c4c:	e027      	b.n	8005c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c4e:	f107 0318 	add.w	r3, r7, #24
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fe feb6 	bl	80049c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c5c:	e01f      	b.n	8005c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c5e:	4b2d      	ldr	r3, [pc, #180]	; (8005d14 <UART_SetConfig+0xac0>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c6a:	4b2a      	ldr	r3, [pc, #168]	; (8005d14 <UART_SetConfig+0xac0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	08db      	lsrs	r3, r3, #3
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	4a28      	ldr	r2, [pc, #160]	; (8005d18 <UART_SetConfig+0xac4>)
 8005c76:	fa22 f303 	lsr.w	r3, r2, r3
 8005c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c7c:	e00f      	b.n	8005c9e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005c7e:	4b26      	ldr	r3, [pc, #152]	; (8005d18 <UART_SetConfig+0xac4>)
 8005c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c82:	e00c      	b.n	8005c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c84:	4b25      	ldr	r3, [pc, #148]	; (8005d1c <UART_SetConfig+0xac8>)
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c88:	e009      	b.n	8005c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c90:	e005      	b.n	8005c9e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005c9c:	bf00      	nop
    }

    if (pclk != 0U)
 8005c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d021      	beq.n	8005ce8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	4a1d      	ldr	r2, [pc, #116]	; (8005d20 <UART_SetConfig+0xacc>)
 8005caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	441a      	add	r2, r3
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	2b0f      	cmp	r3, #15
 8005ccc:	d909      	bls.n	8005ce2 <UART_SetConfig+0xa8e>
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd4:	d205      	bcs.n	8005ce2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60da      	str	r2, [r3, #12]
 8005ce0:	e002      	b.n	8005ce8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2200      	movs	r2, #0
 8005d02:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005d04:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3748      	adds	r7, #72	; 0x48
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d12:	bf00      	nop
 8005d14:	58024400 	.word	0x58024400
 8005d18:	03d09000 	.word	0x03d09000
 8005d1c:	003d0900 	.word	0x003d0900
 8005d20:	08006454 	.word	0x08006454

08005d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00a      	beq.n	8005d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00a      	beq.n	8005d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00a      	beq.n	8005dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d01a      	beq.n	8005e3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e22:	d10a      	bne.n	8005e3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	605a      	str	r2, [r3, #4]
  }
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b098      	sub	sp, #96	; 0x60
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e78:	f7fb fb6e 	bl	8001558 <HAL_GetTick>
 8005e7c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d12f      	bne.n	8005eec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e94:	2200      	movs	r2, #0
 8005e96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f88e 	bl	8005fbc <UART_WaitOnFlagUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d022      	beq.n	8005eec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	e853 3f00 	ldrex	r3, [r3]
 8005eb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eba:	653b      	str	r3, [r7, #80]	; 0x50
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005eca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ecc:	e841 2300 	strex	r3, r2, [r1]
 8005ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e6      	bne.n	8005ea6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e063      	b.n	8005fb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d149      	bne.n	8005f8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005efa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f02:	2200      	movs	r2, #0
 8005f04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f857 	bl	8005fbc <UART_WaitOnFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d03c      	beq.n	8005f8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	623b      	str	r3, [r7, #32]
   return(result);
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f32:	633b      	str	r3, [r7, #48]	; 0x30
 8005f34:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f3a:	e841 2300 	strex	r3, r2, [r1]
 8005f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1e6      	bne.n	8005f14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f023 0301 	bic.w	r3, r3, #1
 8005f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3308      	adds	r3, #8
 8005f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f66:	61fa      	str	r2, [r7, #28]
 8005f68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	69b9      	ldr	r1, [r7, #24]
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	e841 2300 	strex	r3, r2, [r1]
 8005f72:	617b      	str	r3, [r7, #20]
   return(result);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1e5      	bne.n	8005f46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e012      	b.n	8005fb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3758      	adds	r7, #88	; 0x58
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fcc:	e04f      	b.n	800606e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d04b      	beq.n	800606e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd6:	f7fb fabf 	bl	8001558 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d302      	bcc.n	8005fec <UART_WaitOnFlagUntilTimeout+0x30>
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e04e      	b.n	800608e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d037      	beq.n	800606e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b80      	cmp	r3, #128	; 0x80
 8006002:	d034      	beq.n	800606e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b40      	cmp	r3, #64	; 0x40
 8006008:	d031      	beq.n	800606e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	2b08      	cmp	r3, #8
 8006016:	d110      	bne.n	800603a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2208      	movs	r2, #8
 800601e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f839 	bl	8006098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2208      	movs	r2, #8
 800602a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e029      	b.n	800608e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006048:	d111      	bne.n	800606e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 f81f 	bl	8006098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2220      	movs	r2, #32
 800605e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e00f      	b.n	800608e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69da      	ldr	r2, [r3, #28]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4013      	ands	r3, r2
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	429a      	cmp	r2, r3
 800607c:	bf0c      	ite	eq
 800607e:	2301      	moveq	r3, #1
 8006080:	2300      	movne	r3, #0
 8006082:	b2db      	uxtb	r3, r3
 8006084:	461a      	mov	r2, r3
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	429a      	cmp	r2, r3
 800608a:	d0a0      	beq.n	8005fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006098:	b480      	push	{r7}
 800609a:	b095      	sub	sp, #84	; 0x54
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060be:	643b      	str	r3, [r7, #64]	; 0x40
 80060c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e6      	bne.n	80060a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3308      	adds	r3, #8
 80060d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80060e2:	69fa      	ldr	r2, [r7, #28]
 80060e4:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <UART_EndRxTransfer+0xc8>)
 80060e6:	4013      	ands	r3, r2
 80060e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3308      	adds	r3, #8
 80060f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e5      	bne.n	80060d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800610a:	2b01      	cmp	r3, #1
 800610c:	d118      	bne.n	8006140 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	60bb      	str	r3, [r7, #8]
   return(result);
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f023 0310 	bic.w	r3, r3, #16
 8006122:	647b      	str	r3, [r7, #68]	; 0x44
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800612c:	61bb      	str	r3, [r7, #24]
 800612e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	6979      	ldr	r1, [r7, #20]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	613b      	str	r3, [r7, #16]
   return(result);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e6      	bne.n	800610e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006154:	bf00      	nop
 8006156:	3754      	adds	r7, #84	; 0x54
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	effffffe 	.word	0xeffffffe

08006164 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_UARTEx_DisableFifoMode+0x16>
 8006176:	2302      	movs	r3, #2
 8006178:	e027      	b.n	80061ca <HAL_UARTEx_DisableFifoMode+0x66>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2224      	movs	r2, #36	; 0x24
 8006186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0201 	bic.w	r2, r2, #1
 80061a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d101      	bne.n	80061ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061ea:	2302      	movs	r3, #2
 80061ec:	e02d      	b.n	800624a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2224      	movs	r2, #36	; 0x24
 80061fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0201 	bic.w	r2, r2, #1
 8006214:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f850 	bl	80062d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006266:	2302      	movs	r3, #2
 8006268:	e02d      	b.n	80062c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2224      	movs	r2, #36	; 0x24
 8006276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0201 	bic.w	r2, r2, #1
 8006290:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f812 	bl	80062d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d108      	bne.n	80062f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062f0:	e031      	b.n	8006356 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062f2:	2310      	movs	r3, #16
 80062f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062f6:	2310      	movs	r3, #16
 80062f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	0e5b      	lsrs	r3, r3, #25
 8006302:	b2db      	uxtb	r3, r3
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	0f5b      	lsrs	r3, r3, #29
 8006312:	b2db      	uxtb	r3, r3
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800631a:	7bbb      	ldrb	r3, [r7, #14]
 800631c:	7b3a      	ldrb	r2, [r7, #12]
 800631e:	4911      	ldr	r1, [pc, #68]	; (8006364 <UARTEx_SetNbDataToProcess+0x94>)
 8006320:	5c8a      	ldrb	r2, [r1, r2]
 8006322:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006326:	7b3a      	ldrb	r2, [r7, #12]
 8006328:	490f      	ldr	r1, [pc, #60]	; (8006368 <UARTEx_SetNbDataToProcess+0x98>)
 800632a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800632c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006330:	b29a      	uxth	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	7b7a      	ldrb	r2, [r7, #13]
 800633c:	4909      	ldr	r1, [pc, #36]	; (8006364 <UARTEx_SetNbDataToProcess+0x94>)
 800633e:	5c8a      	ldrb	r2, [r1, r2]
 8006340:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006344:	7b7a      	ldrb	r2, [r7, #13]
 8006346:	4908      	ldr	r1, [pc, #32]	; (8006368 <UARTEx_SetNbDataToProcess+0x98>)
 8006348:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800634a:	fb93 f3f2 	sdiv	r3, r3, r2
 800634e:	b29a      	uxth	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006356:	bf00      	nop
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	0800646c 	.word	0x0800646c
 8006368:	08006474 	.word	0x08006474

0800636c <memset>:
 800636c:	4402      	add	r2, r0
 800636e:	4603      	mov	r3, r0
 8006370:	4293      	cmp	r3, r2
 8006372:	d100      	bne.n	8006376 <memset+0xa>
 8006374:	4770      	bx	lr
 8006376:	f803 1b01 	strb.w	r1, [r3], #1
 800637a:	e7f9      	b.n	8006370 <memset+0x4>

0800637c <__libc_init_array>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4d0d      	ldr	r5, [pc, #52]	; (80063b4 <__libc_init_array+0x38>)
 8006380:	4c0d      	ldr	r4, [pc, #52]	; (80063b8 <__libc_init_array+0x3c>)
 8006382:	1b64      	subs	r4, r4, r5
 8006384:	10a4      	asrs	r4, r4, #2
 8006386:	2600      	movs	r6, #0
 8006388:	42a6      	cmp	r6, r4
 800638a:	d109      	bne.n	80063a0 <__libc_init_array+0x24>
 800638c:	4d0b      	ldr	r5, [pc, #44]	; (80063bc <__libc_init_array+0x40>)
 800638e:	4c0c      	ldr	r4, [pc, #48]	; (80063c0 <__libc_init_array+0x44>)
 8006390:	f000 f826 	bl	80063e0 <_init>
 8006394:	1b64      	subs	r4, r4, r5
 8006396:	10a4      	asrs	r4, r4, #2
 8006398:	2600      	movs	r6, #0
 800639a:	42a6      	cmp	r6, r4
 800639c:	d105      	bne.n	80063aa <__libc_init_array+0x2e>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a4:	4798      	blx	r3
 80063a6:	3601      	adds	r6, #1
 80063a8:	e7ee      	b.n	8006388 <__libc_init_array+0xc>
 80063aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ae:	4798      	blx	r3
 80063b0:	3601      	adds	r6, #1
 80063b2:	e7f2      	b.n	800639a <__libc_init_array+0x1e>
 80063b4:	08006484 	.word	0x08006484
 80063b8:	08006484 	.word	0x08006484
 80063bc:	08006484 	.word	0x08006484
 80063c0:	08006488 	.word	0x08006488

080063c4 <memcpy>:
 80063c4:	440a      	add	r2, r1
 80063c6:	4291      	cmp	r1, r2
 80063c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063cc:	d100      	bne.n	80063d0 <memcpy+0xc>
 80063ce:	4770      	bx	lr
 80063d0:	b510      	push	{r4, lr}
 80063d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063da:	4291      	cmp	r1, r2
 80063dc:	d1f9      	bne.n	80063d2 <memcpy+0xe>
 80063de:	bd10      	pop	{r4, pc}

080063e0 <_init>:
 80063e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e2:	bf00      	nop
 80063e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e6:	bc08      	pop	{r3}
 80063e8:	469e      	mov	lr, r3
 80063ea:	4770      	bx	lr

080063ec <_fini>:
 80063ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ee:	bf00      	nop
 80063f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f2:	bc08      	pop	{r3}
 80063f4:	469e      	mov	lr, r3
 80063f6:	4770      	bx	lr
