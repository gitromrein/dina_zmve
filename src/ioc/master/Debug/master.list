
master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006158  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800647c  0800647c  0001647c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006480  08006480  00016480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08006484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000043c  24000010  08006494  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400044c  08006494  0002044c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00014c6f  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000021eb  00000000  00000000  00034cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000f48  00000000  00000000  00036ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000bdf  00000000  00000000  00037e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000378fa  00000000  00000000  00038a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013333  00000000  00000000  00070301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001666c6  00000000  00000000  00083634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000041e8  00000000  00000000  001e9cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  001edee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080063d8 	.word	0x080063d8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080063d8 	.word	0x080063d8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005d8:	f000 fc18 	bl	8000e0c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 ff32 	bl	8001444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f814 	bl	800060c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005e4:	f000 f8c0 	bl	8000768 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fb50 	bl	8000c8c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80005ec:	f000 f900 	bl	80007f0 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80005f0:	f000 f962 	bl	80008b8 <MX_FDCAN2_Init>
  MX_SPI2_Init();
 80005f4:	f000 f9c4 	bl	8000980 <MX_SPI2_Init>
  MX_UART4_Init();
 80005f8:	f000 fa18 	bl	8000a2c <MX_UART4_Init>
  MX_UART5_Init();
 80005fc:	f000 fa62 	bl	8000ac4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000600:	f000 faac 	bl	8000b5c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000604:	f000 faf6 	bl	8000bf4 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x34>
	...

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b09e      	sub	sp, #120	; 0x78
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000616:	224c      	movs	r2, #76	; 0x4c
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f005 fea2 	bl	8006364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2220      	movs	r2, #32
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f005 fe9b 	bl	8006364 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800062e:	2002      	movs	r0, #2
 8000630:	f001 fe30 	bl	8002294 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b48      	ldr	r3, [pc, #288]	; (800075c <SystemClock_Config+0x150>)
 800063a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063c:	4a47      	ldr	r2, [pc, #284]	; (800075c <SystemClock_Config+0x150>)
 800063e:	f023 0301 	bic.w	r3, r3, #1
 8000642:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000644:	4b45      	ldr	r3, [pc, #276]	; (800075c <SystemClock_Config+0x150>)
 8000646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	4b44      	ldr	r3, [pc, #272]	; (8000760 <SystemClock_Config+0x154>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4a43      	ldr	r2, [pc, #268]	; (8000760 <SystemClock_Config+0x154>)
 8000654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000658:	6193      	str	r3, [r2, #24]
 800065a:	4b41      	ldr	r3, [pc, #260]	; (8000760 <SystemClock_Config+0x154>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000666:	bf00      	nop
 8000668:	4b3d      	ldr	r3, [pc, #244]	; (8000760 <SystemClock_Config+0x154>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000674:	d1f8      	bne.n	8000668 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000676:	4b3b      	ldr	r3, [pc, #236]	; (8000764 <SystemClock_Config+0x158>)
 8000678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800067c:	4a39      	ldr	r2, [pc, #228]	; (8000764 <SystemClock_Config+0x158>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000686:	4b37      	ldr	r3, [pc, #220]	; (8000764 <SystemClock_Config+0x158>)
 8000688:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	4b31      	ldr	r3, [pc, #196]	; (8000760 <SystemClock_Config+0x154>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a30      	ldr	r2, [pc, #192]	; (8000760 <SystemClock_Config+0x154>)
 800069e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <SystemClock_Config+0x154>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	4b2b      	ldr	r3, [pc, #172]	; (800075c <SystemClock_Config+0x150>)
 80006b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b2:	4a2a      	ldr	r2, [pc, #168]	; (800075c <SystemClock_Config+0x150>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <SystemClock_Config+0x150>)
 80006bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c6:	bf00      	nop
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <SystemClock_Config+0x154>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d4:	d1f8      	bne.n	80006c8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d6:	2301      	movs	r3, #1
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e4:	2302      	movs	r3, #2
 80006e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006ec:	2350      	movs	r3, #80	; 0x50
 80006ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80006f4:	2314      	movs	r3, #20
 80006f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006fc:	230c      	movs	r3, #12
 80006fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000700:	2300      	movs	r3, #0
 8000702:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800070c:	4618      	mov	r0, r3
 800070e:	f001 fdfb 	bl	8002308 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000718:	f000 fba4 	bl	8000e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	233f      	movs	r3, #63	; 0x3f
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2303      	movs	r3, #3
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000728:	2308      	movs	r3, #8
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800072c:	2340      	movs	r3, #64	; 0x40
 800072e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000730:	2340      	movs	r3, #64	; 0x40
 8000732:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800073a:	2340      	movs	r3, #64	; 0x40
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2104      	movs	r1, #4
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fa39 	bl	8002bbc <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000750:	f000 fb88 	bl	8000e64 <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3778      	adds	r7, #120	; 0x78
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	58000400 	.word	0x58000400
 8000760:	58024800 	.word	0x58024800
 8000764:	58024400 	.word	0x58024400

08000768 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b0b0      	sub	sp, #192	; 0xc0
 800076c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	22c0      	movs	r2, #192	; 0xc0
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f005 fdf5 	bl	8006364 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_FDCAN
 800077a:	f248 0203 	movw	r2, #32771	; 0x8003
 800077e:	f04f 0300 	mov.w	r3, #0
 8000782:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000786:	2302      	movs	r3, #2
 8000788:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 75;
 800078a:	234b      	movs	r3, #75	; 0x4b
 800078c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 18;
 8000792:	2312      	movs	r3, #18
 8000794:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000796:	2302      	movs	r3, #2
 8000798:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800079a:	23c0      	movs	r3, #192	; 0xc0
 800079c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 3;
 80007a6:	2303      	movs	r3, #3
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 80;
 80007aa:	2350      	movs	r3, #80	; 0x50
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 20;
 80007b2:	2314      	movs	r3, #20
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80007ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80007c8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007cc:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 80007ce:	2302      	movs	r3, #2
 80007d0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 80007d2:	2310      	movs	r3, #16
 80007d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 fd7b 	bl	80032d4 <HAL_RCCEx_PeriphCLKConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <PeriphCommonClock_Config+0x80>
  {
    Error_Handler();
 80007e4:	f000 fb3e 	bl	8000e64 <Error_Handler>
  }
}
 80007e8:	bf00      	nop
 80007ea:	37c0      	adds	r7, #192	; 0xc0
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 80007f6:	4a2f      	ldr	r2, [pc, #188]	; (80008b4 <MX_FDCAN1_Init+0xc4>)
 80007f8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000800:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000806:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000808:	2200      	movs	r2, #0
 800080a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800080c:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800080e:	2200      	movs	r2, #0
 8000810:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000814:	2200      	movs	r2, #0
 8000816:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000818:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800081a:	2210      	movs	r2, #16
 800081c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000820:	2201      	movs	r2, #1
 8000822:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000826:	2202      	movs	r2, #2
 8000828:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800082c:	2202      	movs	r2, #2
 800082e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000832:	2201      	movs	r2, #1
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000838:	2201      	movs	r2, #1
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800083e:	2201      	movs	r2, #1
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000844:	2201      	movs	r2, #1
 8000846:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800084a:	2200      	movs	r2, #0
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000850:	2200      	movs	r2, #0
 8000852:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000856:	2200      	movs	r2, #0
 8000858:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800085c:	2200      	movs	r2, #0
 800085e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000862:	2204      	movs	r2, #4
 8000864:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000868:	2200      	movs	r2, #0
 800086a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800086e:	2204      	movs	r2, #4
 8000870:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800087a:	2204      	movs	r2, #4
 800087c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000886:	2200      	movs	r2, #0
 8000888:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800088c:	2200      	movs	r2, #0
 800088e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000892:	2200      	movs	r2, #0
 8000894:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 8000898:	2204      	movs	r2, #4
 800089a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_FDCAN1_Init+0xc0>)
 800089e:	f000 ffcb 	bl	8001838 <HAL_FDCAN_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008a8:	f000 fadc 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2400002c 	.word	0x2400002c
 80008b4:	4000a000 	.word	0x4000a000

080008b8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80008bc:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008be:	4a2f      	ldr	r2, [pc, #188]	; (800097c <MX_FDCAN2_Init+0xc4>)
 80008c0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008c2:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80008ce:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80008da:	4b27      	ldr	r3, [pc, #156]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008e2:	2210      	movs	r2, #16
 80008e4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80008e6:	4b24      	ldr	r3, [pc, #144]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008ee:	2202      	movs	r2, #2
 80008f0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000900:	2201      	movs	r2, #1
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000906:	2201      	movs	r2, #1
 8000908:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800090a:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 800090c:	2201      	movs	r2, #1
 800090e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000912:	2200      	movs	r2, #0
 8000914:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000918:	2200      	movs	r2, #0
 800091a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 800091e:	2200      	movs	r2, #0
 8000920:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000924:	2200      	movs	r2, #0
 8000926:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 800092a:	2204      	movs	r2, #4
 800092c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000930:	2200      	movs	r2, #0
 8000932:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000936:	2204      	movs	r2, #4
 8000938:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 800093c:	2200      	movs	r2, #0
 800093e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000942:	2204      	movs	r2, #4
 8000944:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000948:	2200      	movs	r2, #0
 800094a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 800094e:	2200      	movs	r2, #0
 8000950:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000954:	2200      	movs	r2, #0
 8000956:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 800095a:	2200      	movs	r2, #0
 800095c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000960:	2204      	movs	r2, #4
 8000962:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_FDCAN2_Init+0xc0>)
 8000966:	f000 ff67 	bl	8001838 <HAL_FDCAN_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000970:	f000 fa78 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	240000cc 	.word	0x240000cc
 800097c:	4000a400 	.word	0x4000a400

08000980 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <MX_SPI2_Init+0xa4>)
 8000986:	4a28      	ldr	r2, [pc, #160]	; (8000a28 <MX_SPI2_Init+0xa8>)
 8000988:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <MX_SPI2_Init+0xa4>)
 800098c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000990:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <MX_SPI2_Init+0xa4>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <MX_SPI2_Init+0xa4>)
 800099a:	2207      	movs	r2, #7
 800099c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009ec:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_SPI2_Init+0xa4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_SPI2_Init+0xa4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <MX_SPI2_Init+0xa4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_SPI2_Init+0xa4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_SPI2_Init+0xa4>)
 8000a12:	f004 fa8b 	bl	8004f2c <HAL_SPI_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000a1c:	f000 fa22 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2400016c 	.word	0x2400016c
 8000a28:	40003800 	.word	0x40003800

08000a2c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <MX_UART4_Init+0x90>)
 8000a32:	4a23      	ldr	r2, [pc, #140]	; (8000ac0 <MX_UART4_Init+0x94>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_UART4_Init+0x90>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_UART4_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_UART4_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_UART4_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_UART4_Init+0x90>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_UART4_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_UART4_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_UART4_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_UART4_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_UART4_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a74:	4811      	ldr	r0, [pc, #68]	; (8000abc <MX_UART4_Init+0x90>)
 8000a76:	f004 fb98 	bl	80051aa <HAL_UART_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000a80:	f000 f9f0 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a84:	2100      	movs	r1, #0
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_UART4_Init+0x90>)
 8000a88:	f005 fba1 	bl	80061ce <HAL_UARTEx_SetTxFifoThreshold>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a92:	f000 f9e7 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a96:	2100      	movs	r1, #0
 8000a98:	4808      	ldr	r0, [pc, #32]	; (8000abc <MX_UART4_Init+0x90>)
 8000a9a:	f005 fbd6 	bl	800624a <HAL_UARTEx_SetRxFifoThreshold>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000aa4:	f000 f9de 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_UART4_Init+0x90>)
 8000aaa:	f005 fb57 	bl	800615c <HAL_UARTEx_DisableFifoMode>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000ab4:	f000 f9d6 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	240001f4 	.word	0x240001f4
 8000ac0:	40004c00 	.word	0x40004c00

08000ac4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_UART5_Init+0x90>)
 8000aca:	4a23      	ldr	r2, [pc, #140]	; (8000b58 <MX_UART5_Init+0x94>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <MX_UART5_Init+0x90>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_UART5_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_UART5_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_UART5_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_UART5_Init+0x90>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_UART5_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_UART5_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_UART5_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_UART5_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_UART5_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b0c:	4811      	ldr	r0, [pc, #68]	; (8000b54 <MX_UART5_Init+0x90>)
 8000b0e:	f004 fb4c 	bl	80051aa <HAL_UART_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000b18:	f000 f9a4 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_UART5_Init+0x90>)
 8000b20:	f005 fb55 	bl	80061ce <HAL_UARTEx_SetTxFifoThreshold>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000b2a:	f000 f99b 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4808      	ldr	r0, [pc, #32]	; (8000b54 <MX_UART5_Init+0x90>)
 8000b32:	f005 fb8a 	bl	800624a <HAL_UARTEx_SetRxFifoThreshold>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000b3c:	f000 f992 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_UART5_Init+0x90>)
 8000b42:	f005 fb0b 	bl	800615c <HAL_UARTEx_DisableFifoMode>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000b4c:	f000 f98a 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	24000288 	.word	0x24000288
 8000b58:	40005000 	.word	0x40005000

08000b5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b62:	4a23      	ldr	r2, [pc, #140]	; (8000bf0 <MX_USART1_UART_Init+0x94>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ba4:	4811      	ldr	r0, [pc, #68]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000ba6:	f004 fb00 	bl	80051aa <HAL_UART_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bb0:	f000 f958 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000bb8:	f005 fb09 	bl	80061ce <HAL_UARTEx_SetTxFifoThreshold>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bc2:	f000 f94f 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4808      	ldr	r0, [pc, #32]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000bca:	f005 fb3e 	bl	800624a <HAL_UARTEx_SetRxFifoThreshold>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd4:	f000 f946 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_USART1_UART_Init+0x90>)
 8000bda:	f005 fabf 	bl	800615c <HAL_UARTEx_DisableFifoMode>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000be4:	f000 f93e 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2400031c 	.word	0x2400031c
 8000bf0:	40011000 	.word	0x40011000

08000bf4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000bfa:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <MX_USART3_UART_Init+0x94>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c3c:	4811      	ldr	r0, [pc, #68]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c3e:	f004 fab4 	bl	80051aa <HAL_UART_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c48:	f000 f90c 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c50:	f005 fabd 	bl	80061ce <HAL_UARTEx_SetTxFifoThreshold>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c5a:	f000 f903 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4808      	ldr	r0, [pc, #32]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c62:	f005 faf2 	bl	800624a <HAL_UARTEx_SetRxFifoThreshold>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c6c:	f000 f8fa 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c72:	f005 fa73 	bl	800615c <HAL_UARTEx_DisableFifoMode>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c7c:	f000 f8f2 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	240003b0 	.word	0x240003b0
 8000c88:	40004800 	.word	0x40004800

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4b55      	ldr	r3, [pc, #340]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	4a53      	ldr	r2, [pc, #332]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb2:	4b51      	ldr	r3, [pc, #324]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc0:	4b4d      	ldr	r3, [pc, #308]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	4a4c      	ldr	r2, [pc, #304]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd0:	4b49      	ldr	r3, [pc, #292]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cde:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce4:	4a44      	ldr	r2, [pc, #272]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000ce6:	f043 0310 	orr.w	r3, r3, #16
 8000cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cee:	4b42      	ldr	r3, [pc, #264]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b3e      	ldr	r3, [pc, #248]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	4a3d      	ldr	r2, [pc, #244]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0c:	4b3a      	ldr	r3, [pc, #232]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1a:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d20:	4a35      	ldr	r2, [pc, #212]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2a:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	f003 0308 	and.w	r3, r3, #8
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	4b2f      	ldr	r3, [pc, #188]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3e:	4a2e      	ldr	r2, [pc, #184]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d48:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CSEEP_Pin|CSANZ1_Pin|CSANZ2_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d5c:	4827      	ldr	r0, [pc, #156]	; (8000dfc <MX_GPIO_Init+0x170>)
 8000d5e:	f001 fa7f 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FM_ADR_OUT_GPIO_Port, FM_ADR_OUT_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d68:	4825      	ldr	r0, [pc, #148]	; (8000e00 <MX_GPIO_Init+0x174>)
 8000d6a:	f001 fa79 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IPK_SYNC_GPIO_Port, IPK_SYNC_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d74:	4823      	ldr	r0, [pc, #140]	; (8000e04 <MX_GPIO_Init+0x178>)
 8000d76:	f001 fa73 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSEEP_Pin CSANZ1_Pin CSANZ2_Pin */
  GPIO_InitStruct.Pin = CSEEP_Pin|CSANZ1_Pin|CSANZ2_Pin;
 8000d7a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	481a      	ldr	r0, [pc, #104]	; (8000dfc <MX_GPIO_Init+0x170>)
 8000d94:	f001 f8b4 	bl	8001f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : FM_ADR_OUT_Pin */
  GPIO_InitStruct.Pin = FM_ADR_OUT_Pin;
 8000d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FM_ADR_OUT_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	4813      	ldr	r0, [pc, #76]	; (8000e00 <MX_GPIO_Init+0x174>)
 8000db2:	f001 f8a5 	bl	8001f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : FM_ADR_IN_Pin */
  GPIO_InitStruct.Pin = FM_ADR_IN_Pin;
 8000db6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FM_ADR_IN_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480f      	ldr	r0, [pc, #60]	; (8000e08 <MX_GPIO_Init+0x17c>)
 8000dcc:	f001 f898 	bl	8001f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : IPK_SYNC_Pin */
  GPIO_InitStruct.Pin = IPK_SYNC_Pin;
 8000dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IPK_SYNC_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4619      	mov	r1, r3
 8000de8:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_GPIO_Init+0x178>)
 8000dea:	f001 f889 	bl	8001f00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dee:	bf00      	nop
 8000df0:	3730      	adds	r7, #48	; 0x30
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	58024400 	.word	0x58024400
 8000dfc:	58020800 	.word	0x58020800
 8000e00:	58021000 	.word	0x58021000
 8000e04:	58020c00 	.word	0x58020c00
 8000e08:	58020400 	.word	0x58020400

08000e0c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e1e:	f000 fc93 	bl	8001748 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e22:	2301      	movs	r3, #1
 8000e24:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e2e:	231f      	movs	r3, #31
 8000e30:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e32:	2387      	movs	r3, #135	; 0x87
 8000e34:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e42:	2301      	movs	r3, #1
 8000e44:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 fcb1 	bl	80017b8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e56:	2004      	movs	r0, #4
 8000e58:	f000 fc8e 	bl	8001778 <HAL_MPU_Enable>

}
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <Error_Handler+0x8>
	...

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_MspInit+0x30>)
 8000e78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e7c:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_MspInit+0x30>)
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_MspInit+0x30>)
 8000e88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	58024400 	.word	0x58024400

08000ea4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a3e      	ldr	r2, [pc, #248]	; (8000fbc <HAL_FDCAN_MspInit+0x118>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d138      	bne.n	8000f38 <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000ec6:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <HAL_FDCAN_MspInit+0x11c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	4a3c      	ldr	r2, [pc, #240]	; (8000fc0 <HAL_FDCAN_MspInit+0x11c>)
 8000ece:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ed0:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <HAL_FDCAN_MspInit+0x11c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d10e      	bne.n	8000ef6 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ed8:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <HAL_FDCAN_MspInit+0x120>)
 8000eda:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ede:	4a39      	ldr	r2, [pc, #228]	; (8000fc4 <HAL_FDCAN_MspInit+0x120>)
 8000ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000ee8:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <HAL_FDCAN_MspInit+0x120>)
 8000eea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	61bb      	str	r3, [r7, #24]
 8000ef4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <HAL_FDCAN_MspInit+0x120>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	4a31      	ldr	r2, [pc, #196]	; (8000fc4 <HAL_FDCAN_MspInit+0x120>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f06:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <HAL_FDCAN_MspInit+0x120>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8000f14:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f26:	2309      	movs	r3, #9
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4825      	ldr	r0, [pc, #148]	; (8000fc8 <HAL_FDCAN_MspInit+0x124>)
 8000f32:	f000 ffe5 	bl	8001f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000f36:	e03c      	b.n	8000fb2 <HAL_FDCAN_MspInit+0x10e>
  else if(hfdcan->Instance==FDCAN2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a23      	ldr	r2, [pc, #140]	; (8000fcc <HAL_FDCAN_MspInit+0x128>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d137      	bne.n	8000fb2 <HAL_FDCAN_MspInit+0x10e>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000f42:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <HAL_FDCAN_MspInit+0x11c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	4a1d      	ldr	r2, [pc, #116]	; (8000fc0 <HAL_FDCAN_MspInit+0x11c>)
 8000f4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <HAL_FDCAN_MspInit+0x11c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d10e      	bne.n	8000f72 <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_FDCAN_MspInit+0x120>)
 8000f56:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f5a:	4a1a      	ldr	r2, [pc, #104]	; (8000fc4 <HAL_FDCAN_MspInit+0x120>)
 8000f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f60:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_FDCAN_MspInit+0x120>)
 8000f66:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_FDCAN_MspInit+0x120>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <HAL_FDCAN_MspInit+0x120>)
 8000f7a:	f043 0302 	orr.w	r3, r3, #2
 8000f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_FDCAN_MspInit+0x120>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CANFD_RX_Pin|CANFD_TX_Pin;
 8000f90:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000fa2:	2309      	movs	r3, #9
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <HAL_FDCAN_MspInit+0x12c>)
 8000fae:	f000 ffa7 	bl	8001f00 <HAL_GPIO_Init>
}
 8000fb2:	bf00      	nop
 8000fb4:	3730      	adds	r7, #48	; 0x30
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	4000a000 	.word	0x4000a000
 8000fc0:	24000444 	.word	0x24000444
 8000fc4:	58024400 	.word	0x58024400
 8000fc8:	58020000 	.word	0x58020000
 8000fcc:	4000a400 	.word	0x4000a400
 8000fd0:	58020400 	.word	0x58020400

08000fd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0ba      	sub	sp, #232	; 0xe8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	22c0      	movs	r2, #192	; 0xc0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f005 f9b5 	bl	8006364 <memset>
  if(hspi->Instance==SPI2)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a26      	ldr	r2, [pc, #152]	; (8001098 <HAL_SPI_MspInit+0xc4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d145      	bne.n	8001090 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001004:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001010:	2300      	movs	r3, #0
 8001012:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4618      	mov	r0, r3
 800101a:	f002 f95b 	bl	80032d4 <HAL_RCCEx_PeriphCLKConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001024:	f7ff ff1e 	bl	8000e64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <HAL_SPI_MspInit+0xc8>)
 800102a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800102e:	4a1b      	ldr	r2, [pc, #108]	; (800109c <HAL_SPI_MspInit+0xc8>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001034:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_SPI_MspInit+0xc8>)
 800103a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_SPI_MspInit+0xc8>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	4a13      	ldr	r2, [pc, #76]	; (800109c <HAL_SPI_MspInit+0xc8>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_SPI_MspInit+0xc8>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8001064:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001068:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800107e:	2305      	movs	r3, #5
 8001080:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001088:	4619      	mov	r1, r3
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_SPI_MspInit+0xcc>)
 800108c:	f000 ff38 	bl	8001f00 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001090:	bf00      	nop
 8001092:	37e8      	adds	r7, #232	; 0xe8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40003800 	.word	0x40003800
 800109c:	58024400 	.word	0x58024400
 80010a0:	58020400 	.word	0x58020400

080010a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b090      	sub	sp, #64	; 0x40
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a69      	ldr	r2, [pc, #420]	; (8001268 <HAL_UART_MspInit+0x1c4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12f      	bne.n	8001126 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80010c6:	4b69      	ldr	r3, [pc, #420]	; (800126c <HAL_UART_MspInit+0x1c8>)
 80010c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010cc:	4a67      	ldr	r2, [pc, #412]	; (800126c <HAL_UART_MspInit+0x1c8>)
 80010ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010d6:	4b65      	ldr	r3, [pc, #404]	; (800126c <HAL_UART_MspInit+0x1c8>)
 80010d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80010e2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e4:	4b61      	ldr	r3, [pc, #388]	; (800126c <HAL_UART_MspInit+0x1c8>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	4a60      	ldr	r2, [pc, #384]	; (800126c <HAL_UART_MspInit+0x1c8>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f4:	4b5d      	ldr	r3, [pc, #372]	; (800126c <HAL_UART_MspInit+0x1c8>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = V24_TX_Pin|V24_RX_Pin;
 8001102:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001114:	2308      	movs	r3, #8
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001118:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111c:	4619      	mov	r1, r3
 800111e:	4854      	ldr	r0, [pc, #336]	; (8001270 <HAL_UART_MspInit+0x1cc>)
 8001120:	f000 feee 	bl	8001f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001124:	e09c      	b.n	8001260 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==UART5)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a52      	ldr	r2, [pc, #328]	; (8001274 <HAL_UART_MspInit+0x1d0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d12e      	bne.n	800118e <HAL_UART_MspInit+0xea>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001130:	4b4e      	ldr	r3, [pc, #312]	; (800126c <HAL_UART_MspInit+0x1c8>)
 8001132:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001136:	4a4d      	ldr	r2, [pc, #308]	; (800126c <HAL_UART_MspInit+0x1c8>)
 8001138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800113c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001140:	4b4a      	ldr	r3, [pc, #296]	; (800126c <HAL_UART_MspInit+0x1c8>)
 8001142:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114a:	623b      	str	r3, [r7, #32]
 800114c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <HAL_UART_MspInit+0x1c8>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001154:	4a45      	ldr	r2, [pc, #276]	; (800126c <HAL_UART_MspInit+0x1c8>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115e:	4b43      	ldr	r3, [pc, #268]	; (800126c <HAL_UART_MspInit+0x1c8>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	61fb      	str	r3, [r7, #28]
 800116a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = IPK_RX_Pin|IPK_TX_Pin;
 800116c:	2360      	movs	r3, #96	; 0x60
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800117c:	230e      	movs	r3, #14
 800117e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001184:	4619      	mov	r1, r3
 8001186:	483c      	ldr	r0, [pc, #240]	; (8001278 <HAL_UART_MspInit+0x1d4>)
 8001188:	f000 feba 	bl	8001f00 <HAL_GPIO_Init>
}
 800118c:	e068      	b.n	8001260 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a3a      	ldr	r2, [pc, #232]	; (800127c <HAL_UART_MspInit+0x1d8>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d12f      	bne.n	80011f8 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001198:	4b34      	ldr	r3, [pc, #208]	; (800126c <HAL_UART_MspInit+0x1c8>)
 800119a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800119e:	4a33      	ldr	r2, [pc, #204]	; (800126c <HAL_UART_MspInit+0x1c8>)
 80011a0:	f043 0310 	orr.w	r3, r3, #16
 80011a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011a8:	4b30      	ldr	r3, [pc, #192]	; (800126c <HAL_UART_MspInit+0x1c8>)
 80011aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <HAL_UART_MspInit+0x1c8>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	4a2b      	ldr	r2, [pc, #172]	; (800126c <HAL_UART_MspInit+0x1c8>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <HAL_UART_MspInit+0x1c8>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = CONP_TX_Pin|CONP_RX_Pin;
 80011d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011e6:	2307      	movs	r3, #7
 80011e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ee:	4619      	mov	r1, r3
 80011f0:	4823      	ldr	r0, [pc, #140]	; (8001280 <HAL_UART_MspInit+0x1dc>)
 80011f2:	f000 fe85 	bl	8001f00 <HAL_GPIO_Init>
}
 80011f6:	e033      	b.n	8001260 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART3)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a21      	ldr	r2, [pc, #132]	; (8001284 <HAL_UART_MspInit+0x1e0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d12e      	bne.n	8001260 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_UART_MspInit+0x1c8>)
 8001204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001208:	4a18      	ldr	r2, [pc, #96]	; (800126c <HAL_UART_MspInit+0x1c8>)
 800120a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <HAL_UART_MspInit+0x1c8>)
 8001214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_UART_MspInit+0x1c8>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	4a11      	ldr	r2, [pc, #68]	; (800126c <HAL_UART_MspInit+0x1c8>)
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_UART_MspInit+0x1c8>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 800123e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001250:	2307      	movs	r3, #7
 8001252:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001254:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001258:	4619      	mov	r1, r3
 800125a:	480b      	ldr	r0, [pc, #44]	; (8001288 <HAL_UART_MspInit+0x1e4>)
 800125c:	f000 fe50 	bl	8001f00 <HAL_GPIO_Init>
}
 8001260:	bf00      	nop
 8001262:	3740      	adds	r7, #64	; 0x40
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40004c00 	.word	0x40004c00
 800126c:	58024400 	.word	0x58024400
 8001270:	58020800 	.word	0x58020800
 8001274:	40005000 	.word	0x40005000
 8001278:	58020400 	.word	0x58020400
 800127c:	40011000 	.word	0x40011000
 8001280:	58020000 	.word	0x58020000
 8001284:	40004800 	.word	0x40004800
 8001288:	58020c00 	.word	0x58020c00

0800128c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001290:	e7fe      	b.n	8001290 <NMI_Handler+0x4>

08001292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <HardFault_Handler+0x4>

08001298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <MemManage_Handler+0x4>

0800129e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <BusFault_Handler+0x4>

080012a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <UsageFault_Handler+0x4>

080012aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d8:	f000 f926 	bl	8001528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012e4:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <SystemInit+0xe4>)
 80012e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ea:	4a36      	ldr	r2, [pc, #216]	; (80013c4 <SystemInit+0xe4>)
 80012ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012f4:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <SystemInit+0xe8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	2b06      	cmp	r3, #6
 80012fe:	d807      	bhi.n	8001310 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001300:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <SystemInit+0xe8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f023 030f 	bic.w	r3, r3, #15
 8001308:	4a2f      	ldr	r2, [pc, #188]	; (80013c8 <SystemInit+0xe8>)
 800130a:	f043 0307 	orr.w	r3, r3, #7
 800130e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001310:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <SystemInit+0xec>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a2d      	ldr	r2, [pc, #180]	; (80013cc <SystemInit+0xec>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <SystemInit+0xec>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <SystemInit+0xec>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4929      	ldr	r1, [pc, #164]	; (80013cc <SystemInit+0xec>)
 8001328:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <SystemInit+0xf0>)
 800132a:	4013      	ands	r3, r2
 800132c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <SystemInit+0xe8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d007      	beq.n	800134a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800133a:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <SystemInit+0xe8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 030f 	bic.w	r3, r3, #15
 8001342:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <SystemInit+0xe8>)
 8001344:	f043 0307 	orr.w	r3, r3, #7
 8001348:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <SystemInit+0xec>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <SystemInit+0xec>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <SystemInit+0xec>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <SystemInit+0xec>)
 800135e:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <SystemInit+0xf4>)
 8001360:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <SystemInit+0xec>)
 8001364:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <SystemInit+0xf8>)
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <SystemInit+0xec>)
 800136a:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <SystemInit+0xfc>)
 800136c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <SystemInit+0xec>)
 8001370:	2200      	movs	r2, #0
 8001372:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <SystemInit+0xec>)
 8001376:	4a19      	ldr	r2, [pc, #100]	; (80013dc <SystemInit+0xfc>)
 8001378:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <SystemInit+0xec>)
 800137c:	2200      	movs	r2, #0
 800137e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <SystemInit+0xec>)
 8001382:	4a16      	ldr	r2, [pc, #88]	; (80013dc <SystemInit+0xfc>)
 8001384:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <SystemInit+0xec>)
 8001388:	2200      	movs	r2, #0
 800138a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <SystemInit+0xec>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <SystemInit+0xec>)
 8001392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001396:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <SystemInit+0xec>)
 800139a:	2200      	movs	r2, #0
 800139c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <SystemInit+0x100>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <SystemInit+0x104>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013aa:	d202      	bcs.n	80013b2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <SystemInit+0x108>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <SystemInit+0x10c>)
 80013b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	52002000 	.word	0x52002000
 80013cc:	58024400 	.word	0x58024400
 80013d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80013d4:	02020200 	.word	0x02020200
 80013d8:	01ff0000 	.word	0x01ff0000
 80013dc:	01010280 	.word	0x01010280
 80013e0:	5c001000 	.word	0x5c001000
 80013e4:	ffff0000 	.word	0xffff0000
 80013e8:	51008108 	.word	0x51008108
 80013ec:	52004000 	.word	0x52004000

080013f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001428 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013f4:	f7ff ff74 	bl	80012e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013fa:	490d      	ldr	r1, [pc, #52]	; (8001430 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001410:	4c0a      	ldr	r4, [pc, #40]	; (800143c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141e:	f004 ffa9 	bl	8006374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001422:	f7ff f8d7 	bl	80005d4 <main>
  bx  lr
 8001426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001428:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800142c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001430:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001434:	08006484 	.word	0x08006484
  ldr r2, =_sbss
 8001438:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800143c:	2400044c 	.word	0x2400044c

08001440 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC3_IRQHandler>
	...

08001444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144a:	2003      	movs	r0, #3
 800144c:	f000 f94a 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001450:	f001 fd6a 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_Init+0x68>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	4913      	ldr	r1, [pc, #76]	; (80014b0 <HAL_Init+0x6c>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	fa22 f303 	lsr.w	r3, r2, r3
 800146c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_Init+0x68>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <HAL_Init+0x6c>)
 8001478:	5cd3      	ldrb	r3, [r2, r3]
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
 8001484:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <HAL_Init+0x70>)
 8001486:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001488:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <HAL_Init+0x74>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800148e:	200f      	movs	r0, #15
 8001490:	f000 f814 	bl	80014bc <HAL_InitTick>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e002      	b.n	80014a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800149e:	f7ff fce7 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	58024400 	.word	0x58024400
 80014b0:	0800643c 	.word	0x0800643c
 80014b4:	24000004 	.word	0x24000004
 80014b8:	24000000 	.word	0x24000000

080014bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_InitTick+0x60>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e021      	b.n	8001514 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <HAL_InitTick+0x64>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_InitTick+0x60>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f921 	bl	800172e <HAL_SYSTICK_Config>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00e      	b.n	8001514 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d80a      	bhi.n	8001512 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f000 f8f9 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001508:	4a06      	ldr	r2, [pc, #24]	; (8001524 <HAL_InitTick+0x68>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2400000c 	.word	0x2400000c
 8001520:	24000000 	.word	0x24000000
 8001524:	24000008 	.word	0x24000008

08001528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_IncTick+0x20>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x24>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <HAL_IncTick+0x24>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	2400000c 	.word	0x2400000c
 800154c:	24000448 	.word	0x24000448

08001550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <HAL_GetTick+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	24000448 	.word	0x24000448

08001568 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <HAL_GetREVID+0x14>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	0c1b      	lsrs	r3, r3, #16
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	5c001000 	.word	0x5c001000

08001580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800159c:	4013      	ands	r3, r2
 800159e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x40>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00
 80015c4:	05fa0000 	.word	0x05fa0000

080015c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	f003 0307 	and.w	r3, r3, #7
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	; (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	; (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
         );
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff8e 	bl	80015e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff47 	bl	8001580 <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001708:	f7ff ff5e 	bl	80015c8 <__NVIC_GetPriorityGrouping>
 800170c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f7ff ff90 	bl	8001638 <NVIC_EncodePriority>
 8001718:	4602      	mov	r2, r0
 800171a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff5f 	bl	80015e4 <__NVIC_SetPriority>
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffb2 	bl	80016a0 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800174c:	f3bf 8f5f 	dmb	sy
}
 8001750:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_MPU_Disable+0x28>)
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	4a06      	ldr	r2, [pc, #24]	; (8001770 <HAL_MPU_Disable+0x28>)
 8001758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_MPU_Disable+0x2c>)
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00
 8001774:	e000ed90 	.word	0xe000ed90

08001778 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <HAL_MPU_Enable+0x38>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_MPU_Enable+0x3c>)
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_MPU_Enable+0x3c>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001794:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001796:	f3bf 8f4f 	dsb	sy
}
 800179a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800179c:	f3bf 8f6f 	isb	sy
}
 80017a0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed90 	.word	0xe000ed90
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	785a      	ldrb	r2, [r3, #1]
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_MPU_ConfigRegion+0x7c>)
 80017c6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <HAL_MPU_ConfigRegion+0x7c>)
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	4a19      	ldr	r2, [pc, #100]	; (8001834 <HAL_MPU_ConfigRegion+0x7c>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80017d4:	4a17      	ldr	r2, [pc, #92]	; (8001834 <HAL_MPU_ConfigRegion+0x7c>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	7b1b      	ldrb	r3, [r3, #12]
 80017e0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	7adb      	ldrb	r3, [r3, #11]
 80017e6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7a9b      	ldrb	r3, [r3, #10]
 80017ee:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7b5b      	ldrb	r3, [r3, #13]
 80017f6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7b9b      	ldrb	r3, [r3, #14]
 80017fe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001800:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7bdb      	ldrb	r3, [r3, #15]
 8001806:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001808:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7a5b      	ldrb	r3, [r3, #9]
 800180e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001810:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7a1b      	ldrb	r3, [r3, #8]
 8001816:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001818:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	7812      	ldrb	r2, [r2, #0]
 800181e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001820:	4a04      	ldr	r2, [pc, #16]	; (8001834 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001822:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001824:	6113      	str	r3, [r2, #16]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed90 	.word	0xe000ed90

08001838 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b098      	sub	sp, #96	; 0x60
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001840:	4a84      	ldr	r2, [pc, #528]	; (8001a54 <HAL_FDCAN_Init+0x21c>)
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	4611      	mov	r1, r2
 8001848:	224c      	movs	r2, #76	; 0x4c
 800184a:	4618      	mov	r0, r3
 800184c:	f004 fdb6 	bl	80063bc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e1c6      	b.n	8001be8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a7e      	ldr	r2, [pc, #504]	; (8001a58 <HAL_FDCAN_Init+0x220>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d106      	bne.n	8001872 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800186c:	461a      	mov	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff fb0c 	bl	8000ea4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0210 	bic.w	r2, r2, #16
 800189a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800189c:	f7ff fe58 	bl	8001550 <HAL_GetTick>
 80018a0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80018a2:	e014      	b.n	80018ce <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80018a4:	f7ff fe54 	bl	8001550 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b0a      	cmp	r3, #10
 80018b0:	d90d      	bls.n	80018ce <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018b8:	f043 0201 	orr.w	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2203      	movs	r2, #3
 80018c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e18c      	b.n	8001be8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d0e3      	beq.n	80018a4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	699a      	ldr	r2, [r3, #24]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ec:	f7ff fe30 	bl	8001550 <HAL_GetTick>
 80018f0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80018f2:	e014      	b.n	800191e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80018f4:	f7ff fe2c 	bl	8001550 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b0a      	cmp	r3, #10
 8001900:	d90d      	bls.n	800191e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e164      	b.n	8001be8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0e3      	beq.n	80018f4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699a      	ldr	r2, [r3, #24]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0202 	orr.w	r2, r2, #2
 800193a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7c1b      	ldrb	r3, [r3, #16]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d108      	bne.n	8001956 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699a      	ldr	r2, [r3, #24]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001952:	619a      	str	r2, [r3, #24]
 8001954:	e007      	b.n	8001966 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699a      	ldr	r2, [r3, #24]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001964:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7c5b      	ldrb	r3, [r3, #17]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d108      	bne.n	8001980 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	699a      	ldr	r2, [r3, #24]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800197c:	619a      	str	r2, [r3, #24]
 800197e:	e007      	b.n	8001990 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	699a      	ldr	r2, [r3, #24]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800198e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7c9b      	ldrb	r3, [r3, #18]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d108      	bne.n	80019aa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699a      	ldr	r2, [r3, #24]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019a6:	619a      	str	r2, [r3, #24]
 80019a8:	e007      	b.n	80019ba <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	699a      	ldr	r2, [r3, #24]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80019b8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699a      	ldr	r2, [r3, #24]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80019de:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	691a      	ldr	r2, [r3, #16]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0210 	bic.w	r2, r2, #16
 80019ee:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d108      	bne.n	8001a0a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699a      	ldr	r2, [r3, #24]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0204 	orr.w	r2, r2, #4
 8001a06:	619a      	str	r2, [r3, #24]
 8001a08:	e030      	b.n	8001a6c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d02c      	beq.n	8001a6c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d020      	beq.n	8001a5c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699a      	ldr	r2, [r3, #24]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a28:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0210 	orr.w	r2, r2, #16
 8001a38:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d114      	bne.n	8001a6c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699a      	ldr	r2, [r3, #24]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 0220 	orr.w	r2, r2, #32
 8001a50:	619a      	str	r2, [r3, #24]
 8001a52:	e00b      	b.n	8001a6c <HAL_FDCAN_Init+0x234>
 8001a54:	080063f0 	.word	0x080063f0
 8001a58:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0220 	orr.w	r2, r2, #32
 8001a6a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a7c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a84:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a94:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a96:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001aa0:	d115      	bne.n	8001ace <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	3b01      	subs	r3, #1
 8001aae:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001ab0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001aba:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001aca:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001acc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af4:	4413      	add	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d011      	beq.n	8001b1e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001b02:	f023 0107 	bic.w	r1, r3, #7
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	3360      	adds	r3, #96	; 0x60
 8001b0e:	443b      	add	r3, r7
 8001b10:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d011      	beq.n	8001b4a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001b2e:	f023 0107 	bic.w	r1, r3, #7
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	3360      	adds	r3, #96	; 0x60
 8001b3a:	443b      	add	r3, r7
 8001b3c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d012      	beq.n	8001b78 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001b5a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	3360      	adds	r3, #96	; 0x60
 8001b66:	443b      	add	r3, r7
 8001b68:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b6c:	011a      	lsls	r2, r3, #4
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d012      	beq.n	8001ba6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001b88:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	3360      	adds	r3, #96	; 0x60
 8001b94:	443b      	add	r3, r7
 8001b96:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b9a:	021a      	lsls	r2, r3, #8
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <HAL_FDCAN_Init+0x3b8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d107      	bne.n	8001bc0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f022 0203 	bic.w	r2, r2, #3
 8001bbe:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f80b 	bl	8001bf4 <FDCAN_CalcultateRamBlockAddresses>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001be4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3760      	adds	r7, #96	; 0x60
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	4000a000 	.word	0x4000a000

08001bf4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c00:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001c0a:	4ba7      	ldr	r3, [pc, #668]	; (8001ea8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	0091      	lsls	r1, r2, #2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	430b      	orrs	r3, r1
 8001c18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c24:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2c:	041a      	lsls	r2, r3, #16
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	4413      	add	r3, r2
 8001c40:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001c4a:	4b97      	ldr	r3, [pc, #604]	; (8001ea8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	0091      	lsls	r1, r2, #2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	430b      	orrs	r3, r1
 8001c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c64:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6c:	041a      	lsls	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	4413      	add	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001c8c:	4b86      	ldr	r3, [pc, #536]	; (8001ea8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	0091      	lsls	r1, r2, #2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001ca6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	041a      	lsls	r2, r3, #16
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	4413      	add	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cd4:	4b74      	ldr	r3, [pc, #464]	; (8001ea8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	0091      	lsls	r1, r2, #2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001cee:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf6:	041a      	lsls	r2, r3, #16
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	4413      	add	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001d1c:	4b62      	ldr	r3, [pc, #392]	; (8001ea8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	0091      	lsls	r1, r2, #2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001d36:	fb02 f303 	mul.w	r3, r2, r3
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001d48:	4b57      	ldr	r3, [pc, #348]	; (8001ea8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	0091      	lsls	r1, r2, #2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d62:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	041a      	lsls	r2, r3, #16
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	4413      	add	r3, r2
 8001d80:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001d8a:	4b47      	ldr	r3, [pc, #284]	; (8001ea8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	0091      	lsls	r1, r2, #2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	430b      	orrs	r3, r1
 8001d98:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001da4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dac:	041a      	lsls	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001dc0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc8:	061a      	lsls	r2, r3, #24
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dd8:	4b34      	ldr	r3, [pc, #208]	; (8001eac <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001dda:	4413      	add	r3, r2
 8001ddc:	009a      	lsls	r2, r3, #2
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	441a      	add	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	441a      	add	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001e14:	441a      	add	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001e26:	fb01 f303 	mul.w	r3, r1, r3
 8001e2a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001e2c:	441a      	add	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001e44:	441a      	add	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	441a      	add	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	441a      	add	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001e8a:	fb01 f303 	mul.w	r3, r1, r3
 8001e8e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001e90:	441a      	add	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d915      	bls.n	8001ed0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001ea4:	e006      	b.n	8001eb4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001ea6:	bf00      	nop
 8001ea8:	ffff0003 	.word	0xffff0003
 8001eac:	10002b00 	.word	0x10002b00
 8001eb0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001eba:	f043 0220 	orr.w	r2, r3, #32
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e010      	b.n	8001ef2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	e005      	b.n	8001ee4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d3f3      	bcc.n	8001ed8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop

08001f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b089      	sub	sp, #36	; 0x24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f0e:	4b89      	ldr	r3, [pc, #548]	; (8002134 <HAL_GPIO_Init+0x234>)
 8001f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f12:	e194      	b.n	800223e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2101      	movs	r1, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8186 	beq.w	8002238 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d005      	beq.n	8001f44 <HAL_GPIO_Init+0x44>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d130      	bne.n	8001fa6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	f003 0201 	and.w	r2, r3, #1
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d017      	beq.n	8001fe2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d123      	bne.n	8002036 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	08da      	lsrs	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3208      	adds	r2, #8
 8001ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	08da      	lsrs	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3208      	adds	r2, #8
 8002030:	69b9      	ldr	r1, [r7, #24]
 8002032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0203 	and.w	r2, r3, #3
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80e0 	beq.w	8002238 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002078:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <HAL_GPIO_Init+0x238>)
 800207a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800207e:	4a2e      	ldr	r2, [pc, #184]	; (8002138 <HAL_GPIO_Init+0x238>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002088:	4b2b      	ldr	r3, [pc, #172]	; (8002138 <HAL_GPIO_Init+0x238>)
 800208a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002096:	4a29      	ldr	r2, [pc, #164]	; (800213c <HAL_GPIO_Init+0x23c>)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a20      	ldr	r2, [pc, #128]	; (8002140 <HAL_GPIO_Init+0x240>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d052      	beq.n	8002168 <HAL_GPIO_Init+0x268>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a1f      	ldr	r2, [pc, #124]	; (8002144 <HAL_GPIO_Init+0x244>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d031      	beq.n	800212e <HAL_GPIO_Init+0x22e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a1e      	ldr	r2, [pc, #120]	; (8002148 <HAL_GPIO_Init+0x248>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d02b      	beq.n	800212a <HAL_GPIO_Init+0x22a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a1d      	ldr	r2, [pc, #116]	; (800214c <HAL_GPIO_Init+0x24c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d025      	beq.n	8002126 <HAL_GPIO_Init+0x226>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <HAL_GPIO_Init+0x250>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01f      	beq.n	8002122 <HAL_GPIO_Init+0x222>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <HAL_GPIO_Init+0x254>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d019      	beq.n	800211e <HAL_GPIO_Init+0x21e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a1a      	ldr	r2, [pc, #104]	; (8002158 <HAL_GPIO_Init+0x258>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <HAL_GPIO_Init+0x21a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a19      	ldr	r2, [pc, #100]	; (800215c <HAL_GPIO_Init+0x25c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00d      	beq.n	8002116 <HAL_GPIO_Init+0x216>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a18      	ldr	r2, [pc, #96]	; (8002160 <HAL_GPIO_Init+0x260>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d007      	beq.n	8002112 <HAL_GPIO_Init+0x212>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a17      	ldr	r2, [pc, #92]	; (8002164 <HAL_GPIO_Init+0x264>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d101      	bne.n	800210e <HAL_GPIO_Init+0x20e>
 800210a:	2309      	movs	r3, #9
 800210c:	e02d      	b.n	800216a <HAL_GPIO_Init+0x26a>
 800210e:	230a      	movs	r3, #10
 8002110:	e02b      	b.n	800216a <HAL_GPIO_Init+0x26a>
 8002112:	2308      	movs	r3, #8
 8002114:	e029      	b.n	800216a <HAL_GPIO_Init+0x26a>
 8002116:	2307      	movs	r3, #7
 8002118:	e027      	b.n	800216a <HAL_GPIO_Init+0x26a>
 800211a:	2306      	movs	r3, #6
 800211c:	e025      	b.n	800216a <HAL_GPIO_Init+0x26a>
 800211e:	2305      	movs	r3, #5
 8002120:	e023      	b.n	800216a <HAL_GPIO_Init+0x26a>
 8002122:	2304      	movs	r3, #4
 8002124:	e021      	b.n	800216a <HAL_GPIO_Init+0x26a>
 8002126:	2303      	movs	r3, #3
 8002128:	e01f      	b.n	800216a <HAL_GPIO_Init+0x26a>
 800212a:	2302      	movs	r3, #2
 800212c:	e01d      	b.n	800216a <HAL_GPIO_Init+0x26a>
 800212e:	2301      	movs	r3, #1
 8002130:	e01b      	b.n	800216a <HAL_GPIO_Init+0x26a>
 8002132:	bf00      	nop
 8002134:	58000080 	.word	0x58000080
 8002138:	58024400 	.word	0x58024400
 800213c:	58000400 	.word	0x58000400
 8002140:	58020000 	.word	0x58020000
 8002144:	58020400 	.word	0x58020400
 8002148:	58020800 	.word	0x58020800
 800214c:	58020c00 	.word	0x58020c00
 8002150:	58021000 	.word	0x58021000
 8002154:	58021400 	.word	0x58021400
 8002158:	58021800 	.word	0x58021800
 800215c:	58021c00 	.word	0x58021c00
 8002160:	58022000 	.word	0x58022000
 8002164:	58022400 	.word	0x58022400
 8002168:	2300      	movs	r3, #0
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	f002 0203 	and.w	r2, r2, #3
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	4093      	lsls	r3, r2
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800217a:	4938      	ldr	r1, [pc, #224]	; (800225c <HAL_GPIO_Init+0x35c>)
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	089b      	lsrs	r3, r3, #2
 8002180:	3302      	adds	r3, #2
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	3301      	adds	r3, #1
 800223c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	f47f ae63 	bne.w	8001f14 <HAL_GPIO_Init+0x14>
  }
}
 800224e:	bf00      	nop
 8002250:	bf00      	nop
 8002252:	3724      	adds	r7, #36	; 0x24
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	58000400 	.word	0x58000400

08002260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
 800226c:	4613      	mov	r3, r2
 800226e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002270:	787b      	ldrb	r3, [r7, #1]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800227c:	e003      	b.n	8002286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	041a      	lsls	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	619a      	str	r2, [r3, #24]
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_PWREx_ConfigSupply+0x70>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d00a      	beq.n	80022be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_PWREx_ConfigSupply+0x70>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d001      	beq.n	80022ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e01f      	b.n	80022fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e01d      	b.n	80022fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_PWREx_ConfigSupply+0x70>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f023 0207 	bic.w	r2, r3, #7
 80022c6:	490f      	ldr	r1, [pc, #60]	; (8002304 <HAL_PWREx_ConfigSupply+0x70>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022ce:	f7ff f93f 	bl	8001550 <HAL_GetTick>
 80022d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022d4:	e009      	b.n	80022ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022d6:	f7ff f93b 	bl	8001550 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022e4:	d901      	bls.n	80022ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e007      	b.n	80022fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_PWREx_ConfigSupply+0x70>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f6:	d1ee      	bne.n	80022d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	58024800 	.word	0x58024800

08002308 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08c      	sub	sp, #48	; 0x30
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d102      	bne.n	800231c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	f000 bc48 	b.w	8002bac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 8088 	beq.w	800243a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800232a:	4b99      	ldr	r3, [pc, #612]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002334:	4b96      	ldr	r3, [pc, #600]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800233a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233c:	2b10      	cmp	r3, #16
 800233e:	d007      	beq.n	8002350 <HAL_RCC_OscConfig+0x48>
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002342:	2b18      	cmp	r3, #24
 8002344:	d111      	bne.n	800236a <HAL_RCC_OscConfig+0x62>
 8002346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d10c      	bne.n	800236a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	4b8f      	ldr	r3, [pc, #572]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d06d      	beq.n	8002438 <HAL_RCC_OscConfig+0x130>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d169      	bne.n	8002438 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	f000 bc21 	b.w	8002bac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002372:	d106      	bne.n	8002382 <HAL_RCC_OscConfig+0x7a>
 8002374:	4b86      	ldr	r3, [pc, #536]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a85      	ldr	r2, [pc, #532]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 800237a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	e02e      	b.n	80023e0 <HAL_RCC_OscConfig+0xd8>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x9c>
 800238a:	4b81      	ldr	r3, [pc, #516]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a80      	ldr	r2, [pc, #512]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 8002390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b7e      	ldr	r3, [pc, #504]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a7d      	ldr	r2, [pc, #500]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 800239c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e01d      	b.n	80023e0 <HAL_RCC_OscConfig+0xd8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0xc0>
 80023ae:	4b78      	ldr	r3, [pc, #480]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a77      	ldr	r2, [pc, #476]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 80023b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b75      	ldr	r3, [pc, #468]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a74      	ldr	r2, [pc, #464]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e00b      	b.n	80023e0 <HAL_RCC_OscConfig+0xd8>
 80023c8:	4b71      	ldr	r3, [pc, #452]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a70      	ldr	r2, [pc, #448]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 80023ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	4b6e      	ldr	r3, [pc, #440]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a6d      	ldr	r2, [pc, #436]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 80023da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d013      	beq.n	8002410 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7ff f8b2 	bl	8001550 <HAL_GetTick>
 80023ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f0:	f7ff f8ae 	bl	8001550 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e3d4      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002402:	4b63      	ldr	r3, [pc, #396]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0xe8>
 800240e:	e014      	b.n	800243a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7ff f89e 	bl	8001550 <HAL_GetTick>
 8002414:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002418:	f7ff f89a 	bl	8001550 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	; 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e3c0      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800242a:	4b59      	ldr	r3, [pc, #356]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x110>
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 80ca 	beq.w	80025dc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002448:	4b51      	ldr	r3, [pc, #324]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002450:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002452:	4b4f      	ldr	r3, [pc, #316]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <HAL_RCC_OscConfig+0x166>
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	2b18      	cmp	r3, #24
 8002462:	d156      	bne.n	8002512 <HAL_RCC_OscConfig+0x20a>
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d151      	bne.n	8002512 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800246e:	4b48      	ldr	r3, [pc, #288]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_RCC_OscConfig+0x17e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e392      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002486:	4b42      	ldr	r3, [pc, #264]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 0219 	bic.w	r2, r3, #25
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	493f      	ldr	r1, [pc, #252]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7ff f85a 	bl	8001550 <HAL_GetTick>
 800249c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a0:	f7ff f856 	bl	8001550 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e37c      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024b2:	4b37      	ldr	r3, [pc, #220]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	f7ff f853 	bl	8001568 <HAL_GetREVID>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d817      	bhi.n	80024fc <HAL_RCC_OscConfig+0x1f4>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b40      	cmp	r3, #64	; 0x40
 80024d2:	d108      	bne.n	80024e6 <HAL_RCC_OscConfig+0x1de>
 80024d4:	4b2e      	ldr	r3, [pc, #184]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024dc:	4a2c      	ldr	r2, [pc, #176]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 80024de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e4:	e07a      	b.n	80025dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e6:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	031b      	lsls	r3, r3, #12
 80024f4:	4926      	ldr	r1, [pc, #152]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024fa:	e06f      	b.n	80025dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b24      	ldr	r3, [pc, #144]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	061b      	lsls	r3, r3, #24
 800250a:	4921      	ldr	r1, [pc, #132]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002510:	e064      	b.n	80025dc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d047      	beq.n	80025aa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 0219 	bic.w	r2, r3, #25
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	491a      	ldr	r1, [pc, #104]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7ff f810 	bl	8001550 <HAL_GetTick>
 8002530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002534:	f7ff f80c 	bl	8001550 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e332      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002552:	f7ff f809 	bl	8001568 <HAL_GetREVID>
 8002556:	4603      	mov	r3, r0
 8002558:	f241 0203 	movw	r2, #4099	; 0x1003
 800255c:	4293      	cmp	r3, r2
 800255e:	d819      	bhi.n	8002594 <HAL_RCC_OscConfig+0x28c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	d108      	bne.n	800257a <HAL_RCC_OscConfig+0x272>
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002570:	4a07      	ldr	r2, [pc, #28]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 8002572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002576:	6053      	str	r3, [r2, #4]
 8002578:	e030      	b.n	80025dc <HAL_RCC_OscConfig+0x2d4>
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	031b      	lsls	r3, r3, #12
 8002588:	4901      	ldr	r1, [pc, #4]	; (8002590 <HAL_RCC_OscConfig+0x288>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
 800258e:	e025      	b.n	80025dc <HAL_RCC_OscConfig+0x2d4>
 8002590:	58024400 	.word	0x58024400
 8002594:	4b9a      	ldr	r3, [pc, #616]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	4997      	ldr	r1, [pc, #604]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
 80025a8:	e018      	b.n	80025dc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025aa:	4b95      	ldr	r3, [pc, #596]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a94      	ldr	r2, [pc, #592]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025b0:	f023 0301 	bic.w	r3, r3, #1
 80025b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7fe ffcb 	bl	8001550 <HAL_GetTick>
 80025ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025be:	f7fe ffc7 	bl	8001550 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e2ed      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025d0:	4b8b      	ldr	r3, [pc, #556]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80a9 	beq.w	800273c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ea:	4b85      	ldr	r3, [pc, #532]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025f4:	4b82      	ldr	r3, [pc, #520]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d007      	beq.n	8002610 <HAL_RCC_OscConfig+0x308>
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	2b18      	cmp	r3, #24
 8002604:	d13a      	bne.n	800267c <HAL_RCC_OscConfig+0x374>
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d135      	bne.n	800267c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002610:	4b7b      	ldr	r3, [pc, #492]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_OscConfig+0x320>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2b80      	cmp	r3, #128	; 0x80
 8002622:	d001      	beq.n	8002628 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e2c1      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002628:	f7fe ff9e 	bl	8001568 <HAL_GetREVID>
 800262c:	4603      	mov	r3, r0
 800262e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002632:	4293      	cmp	r3, r2
 8002634:	d817      	bhi.n	8002666 <HAL_RCC_OscConfig+0x35e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	2b20      	cmp	r3, #32
 800263c:	d108      	bne.n	8002650 <HAL_RCC_OscConfig+0x348>
 800263e:	4b70      	ldr	r3, [pc, #448]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002646:	4a6e      	ldr	r2, [pc, #440]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 8002648:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800264c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800264e:	e075      	b.n	800273c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002650:	4b6b      	ldr	r3, [pc, #428]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	069b      	lsls	r3, r3, #26
 800265e:	4968      	ldr	r1, [pc, #416]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002664:	e06a      	b.n	800273c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002666:	4b66      	ldr	r3, [pc, #408]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	061b      	lsls	r3, r3, #24
 8002674:	4962      	ldr	r1, [pc, #392]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 8002676:	4313      	orrs	r3, r2
 8002678:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800267a:	e05f      	b.n	800273c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d042      	beq.n	800270a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002684:	4b5e      	ldr	r3, [pc, #376]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a5d      	ldr	r2, [pc, #372]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 800268a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7fe ff5e 	bl	8001550 <HAL_GetTick>
 8002694:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002698:	f7fe ff5a 	bl	8001550 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e280      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026aa:	4b55      	ldr	r3, [pc, #340]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026b6:	f7fe ff57 	bl	8001568 <HAL_GetREVID>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d817      	bhi.n	80026f4 <HAL_RCC_OscConfig+0x3ec>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d108      	bne.n	80026de <HAL_RCC_OscConfig+0x3d6>
 80026cc:	4b4c      	ldr	r3, [pc, #304]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026d4:	4a4a      	ldr	r2, [pc, #296]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80026d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026da:	6053      	str	r3, [r2, #4]
 80026dc:	e02e      	b.n	800273c <HAL_RCC_OscConfig+0x434>
 80026de:	4b48      	ldr	r3, [pc, #288]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	069b      	lsls	r3, r3, #26
 80026ec:	4944      	ldr	r1, [pc, #272]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
 80026f2:	e023      	b.n	800273c <HAL_RCC_OscConfig+0x434>
 80026f4:	4b42      	ldr	r3, [pc, #264]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	061b      	lsls	r3, r3, #24
 8002702:	493f      	ldr	r1, [pc, #252]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 8002704:	4313      	orrs	r3, r2
 8002706:	60cb      	str	r3, [r1, #12]
 8002708:	e018      	b.n	800273c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800270a:	4b3d      	ldr	r3, [pc, #244]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a3c      	ldr	r2, [pc, #240]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 8002710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002716:	f7fe ff1b 	bl	8001550 <HAL_GetTick>
 800271a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800271e:	f7fe ff17 	bl	8001550 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e23d      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002730:	4b33      	ldr	r3, [pc, #204]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f0      	bne.n	800271e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d036      	beq.n	80027b6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d019      	beq.n	8002784 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002750:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 8002752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002754:	4a2a      	ldr	r2, [pc, #168]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe fef8 	bl	8001550 <HAL_GetTick>
 8002760:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002764:	f7fe fef4 	bl	8001550 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e21a      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002776:	4b22      	ldr	r3, [pc, #136]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 8002778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x45c>
 8002782:	e018      	b.n	80027b6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002784:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 8002786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002788:	4a1d      	ldr	r2, [pc, #116]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 800278a:	f023 0301 	bic.w	r3, r3, #1
 800278e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7fe fede 	bl	8001550 <HAL_GetTick>
 8002794:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002798:	f7fe feda 	bl	8001550 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e200      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80027ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d039      	beq.n	8002836 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d01c      	beq.n	8002804 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a0c      	ldr	r2, [pc, #48]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80027d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027d6:	f7fe febb 	bl	8001550 <HAL_GetTick>
 80027da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027de:	f7fe feb7 	bl	8001550 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e1dd      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x4d6>
 80027fc:	e01b      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
 80027fe:	bf00      	nop
 8002800:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002804:	4b9b      	ldr	r3, [pc, #620]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a9a      	ldr	r2, [pc, #616]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 800280a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800280e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002810:	f7fe fe9e 	bl	8001550 <HAL_GetTick>
 8002814:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002818:	f7fe fe9a 	bl	8001550 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e1c0      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800282a:	4b92      	ldr	r3, [pc, #584]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 8081 	beq.w	8002946 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002844:	4b8c      	ldr	r3, [pc, #560]	; (8002a78 <HAL_RCC_OscConfig+0x770>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a8b      	ldr	r2, [pc, #556]	; (8002a78 <HAL_RCC_OscConfig+0x770>)
 800284a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002850:	f7fe fe7e 	bl	8001550 <HAL_GetTick>
 8002854:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002858:	f7fe fe7a 	bl	8001550 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	; 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e1a0      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800286a:	4b83      	ldr	r3, [pc, #524]	; (8002a78 <HAL_RCC_OscConfig+0x770>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d106      	bne.n	800288c <HAL_RCC_OscConfig+0x584>
 800287e:	4b7d      	ldr	r3, [pc, #500]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	4a7c      	ldr	r2, [pc, #496]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6713      	str	r3, [r2, #112]	; 0x70
 800288a:	e02d      	b.n	80028e8 <HAL_RCC_OscConfig+0x5e0>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10c      	bne.n	80028ae <HAL_RCC_OscConfig+0x5a6>
 8002894:	4b77      	ldr	r3, [pc, #476]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	4a76      	ldr	r2, [pc, #472]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	6713      	str	r3, [r2, #112]	; 0x70
 80028a0:	4b74      	ldr	r3, [pc, #464]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	4a73      	ldr	r2, [pc, #460]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 80028a6:	f023 0304 	bic.w	r3, r3, #4
 80028aa:	6713      	str	r3, [r2, #112]	; 0x70
 80028ac:	e01c      	b.n	80028e8 <HAL_RCC_OscConfig+0x5e0>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b05      	cmp	r3, #5
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c8>
 80028b6:	4b6f      	ldr	r3, [pc, #444]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	4a6e      	ldr	r2, [pc, #440]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 80028bc:	f043 0304 	orr.w	r3, r3, #4
 80028c0:	6713      	str	r3, [r2, #112]	; 0x70
 80028c2:	4b6c      	ldr	r3, [pc, #432]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	4a6b      	ldr	r2, [pc, #428]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6713      	str	r3, [r2, #112]	; 0x70
 80028ce:	e00b      	b.n	80028e8 <HAL_RCC_OscConfig+0x5e0>
 80028d0:	4b68      	ldr	r3, [pc, #416]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a67      	ldr	r2, [pc, #412]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 80028d6:	f023 0301 	bic.w	r3, r3, #1
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
 80028dc:	4b65      	ldr	r3, [pc, #404]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a64      	ldr	r2, [pc, #400]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 80028e2:	f023 0304 	bic.w	r3, r3, #4
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d015      	beq.n	800291c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7fe fe2e 	bl	8001550 <HAL_GetTick>
 80028f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028f6:	e00a      	b.n	800290e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7fe fe2a 	bl	8001550 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e14e      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800290e:	4b59      	ldr	r3, [pc, #356]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0ee      	beq.n	80028f8 <HAL_RCC_OscConfig+0x5f0>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7fe fe18 	bl	8001550 <HAL_GetTick>
 8002920:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7fe fe14 	bl	8001550 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e138      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800293a:	4b4e      	ldr	r3, [pc, #312]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1ee      	bne.n	8002924 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 812d 	beq.w	8002baa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002950:	4b48      	ldr	r3, [pc, #288]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002958:	2b18      	cmp	r3, #24
 800295a:	f000 80bd 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	2b02      	cmp	r3, #2
 8002964:	f040 809e 	bne.w	8002aa4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002968:	4b42      	ldr	r3, [pc, #264]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a41      	ldr	r2, [pc, #260]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 800296e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe fdec 	bl	8001550 <HAL_GetTick>
 8002978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297c:	f7fe fde8 	bl	8001550 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e10e      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800298e:	4b39      	ldr	r3, [pc, #228]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800299a:	4b36      	ldr	r3, [pc, #216]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 800299c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800299e:	4b37      	ldr	r3, [pc, #220]	; (8002a7c <HAL_RCC_OscConfig+0x774>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029aa:	0112      	lsls	r2, r2, #4
 80029ac:	430a      	orrs	r2, r1
 80029ae:	4931      	ldr	r1, [pc, #196]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	628b      	str	r3, [r1, #40]	; 0x28
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	3b01      	subs	r3, #1
 80029ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	3b01      	subs	r3, #1
 80029c4:	025b      	lsls	r3, r3, #9
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	3b01      	subs	r3, #1
 80029d0:	041b      	lsls	r3, r3, #16
 80029d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029dc:	3b01      	subs	r3, #1
 80029de:	061b      	lsls	r3, r3, #24
 80029e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80029e4:	4923      	ldr	r1, [pc, #140]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80029ea:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	4a21      	ldr	r2, [pc, #132]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 80029f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029fa:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <HAL_RCC_OscConfig+0x778>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a02:	00d2      	lsls	r2, r2, #3
 8002a04:	491b      	ldr	r1, [pc, #108]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a0a:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	f023 020c 	bic.w	r2, r3, #12
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	4917      	ldr	r1, [pc, #92]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a1c:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	f023 0202 	bic.w	r2, r3, #2
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	4912      	ldr	r1, [pc, #72]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <HAL_RCC_OscConfig+0x76c>)
 8002a64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fd71 	bl	8001550 <HAL_GetTick>
 8002a6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a70:	e011      	b.n	8002a96 <HAL_RCC_OscConfig+0x78e>
 8002a72:	bf00      	nop
 8002a74:	58024400 	.word	0x58024400
 8002a78:	58024800 	.word	0x58024800
 8002a7c:	fffffc0c 	.word	0xfffffc0c
 8002a80:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a84:	f7fe fd64 	bl	8001550 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e08a      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_OscConfig+0x8ac>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x77c>
 8002aa2:	e082      	b.n	8002baa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa4:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <HAL_RCC_OscConfig+0x8ac>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a42      	ldr	r2, [pc, #264]	; (8002bb4 <HAL_RCC_OscConfig+0x8ac>)
 8002aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fd4e 	bl	8001550 <HAL_GetTick>
 8002ab4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe fd4a 	bl	8001550 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e070      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aca:	4b3a      	ldr	r3, [pc, #232]	; (8002bb4 <HAL_RCC_OscConfig+0x8ac>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x7b0>
 8002ad6:	e068      	b.n	8002baa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ad8:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <HAL_RCC_OscConfig+0x8ac>)
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ade:	4b35      	ldr	r3, [pc, #212]	; (8002bb4 <HAL_RCC_OscConfig+0x8ac>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d031      	beq.n	8002b50 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f003 0203 	and.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d12a      	bne.n	8002b50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d122      	bne.n	8002b50 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d11a      	bne.n	8002b50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	0a5b      	lsrs	r3, r3, #9
 8002b1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b26:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d111      	bne.n	8002b50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	0c1b      	lsrs	r3, r3, #16
 8002b30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b38:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d108      	bne.n	8002b50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	0e1b      	lsrs	r3, r3, #24
 8002b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e02b      	b.n	8002bac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b54:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <HAL_RCC_OscConfig+0x8ac>)
 8002b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b58:	08db      	lsrs	r3, r3, #3
 8002b5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b5e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d01f      	beq.n	8002baa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_RCC_OscConfig+0x8ac>)
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	4a11      	ldr	r2, [pc, #68]	; (8002bb4 <HAL_RCC_OscConfig+0x8ac>)
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b76:	f7fe fceb 	bl	8001550 <HAL_GetTick>
 8002b7a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b7c:	bf00      	nop
 8002b7e:	f7fe fce7 	bl	8001550 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d0f9      	beq.n	8002b7e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_RCC_OscConfig+0x8ac>)
 8002b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <HAL_RCC_OscConfig+0x8b0>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b96:	00d2      	lsls	r2, r2, #3
 8002b98:	4906      	ldr	r1, [pc, #24]	; (8002bb4 <HAL_RCC_OscConfig+0x8ac>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCC_OscConfig+0x8ac>)
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <HAL_RCC_OscConfig+0x8ac>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3730      	adds	r7, #48	; 0x30
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	58024400 	.word	0x58024400
 8002bb8:	ffff0007 	.word	0xffff0007

08002bbc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e19c      	b.n	8002f0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b8a      	ldr	r3, [pc, #552]	; (8002dfc <HAL_RCC_ClockConfig+0x240>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d910      	bls.n	8002c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b87      	ldr	r3, [pc, #540]	; (8002dfc <HAL_RCC_ClockConfig+0x240>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 020f 	bic.w	r2, r3, #15
 8002be6:	4985      	ldr	r1, [pc, #532]	; (8002dfc <HAL_RCC_ClockConfig+0x240>)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b83      	ldr	r3, [pc, #524]	; (8002dfc <HAL_RCC_ClockConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e184      	b.n	8002f0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d010      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	4b7b      	ldr	r3, [pc, #492]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d908      	bls.n	8002c2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c1c:	4b78      	ldr	r3, [pc, #480]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	4975      	ldr	r1, [pc, #468]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d010      	beq.n	8002c5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	4b70      	ldr	r3, [pc, #448]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d908      	bls.n	8002c5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c4a:	4b6d      	ldr	r3, [pc, #436]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	496a      	ldr	r1, [pc, #424]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d010      	beq.n	8002c8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699a      	ldr	r2, [r3, #24]
 8002c6c:	4b64      	ldr	r3, [pc, #400]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d908      	bls.n	8002c8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c78:	4b61      	ldr	r3, [pc, #388]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	495e      	ldr	r1, [pc, #376]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d010      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69da      	ldr	r2, [r3, #28]
 8002c9a:	4b59      	ldr	r3, [pc, #356]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d908      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ca6:	4b56      	ldr	r3, [pc, #344]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	4953      	ldr	r1, [pc, #332]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	4b4d      	ldr	r3, [pc, #308]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d908      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd4:	4b4a      	ldr	r3, [pc, #296]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f023 020f 	bic.w	r2, r3, #15
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4947      	ldr	r1, [pc, #284]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d055      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cf2:	4b43      	ldr	r3, [pc, #268]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	4940      	ldr	r1, [pc, #256]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d107      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d0c:	4b3c      	ldr	r3, [pc, #240]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d121      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0f6      	b.n	8002f0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d24:	4b36      	ldr	r3, [pc, #216]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d115      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0ea      	b.n	8002f0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d107      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d3c:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d109      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0de      	b.n	8002f0a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d4c:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0d6      	b.n	8002f0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d5c:	4b28      	ldr	r3, [pc, #160]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f023 0207 	bic.w	r2, r3, #7
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4925      	ldr	r1, [pc, #148]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d6e:	f7fe fbef 	bl	8001550 <HAL_GetTick>
 8002d72:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d76:	f7fe fbeb 	bl	8001550 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e0be      	b.n	8002f0a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8c:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d1eb      	bne.n	8002d76 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d010      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d208      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f023 020f 	bic.w	r2, r3, #15
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	490e      	ldr	r1, [pc, #56]	; (8002e00 <HAL_RCC_ClockConfig+0x244>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_RCC_ClockConfig+0x240>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d214      	bcs.n	8002e04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_RCC_ClockConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 020f 	bic.w	r2, r3, #15
 8002de2:	4906      	ldr	r1, [pc, #24]	; (8002dfc <HAL_RCC_ClockConfig+0x240>)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <HAL_RCC_ClockConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e086      	b.n	8002f0a <HAL_RCC_ClockConfig+0x34e>
 8002dfc:	52002000 	.word	0x52002000
 8002e00:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d010      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <HAL_RCC_ClockConfig+0x358>)
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d208      	bcs.n	8002e32 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e20:	4b3c      	ldr	r3, [pc, #240]	; (8002f14 <HAL_RCC_ClockConfig+0x358>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	4939      	ldr	r1, [pc, #228]	; (8002f14 <HAL_RCC_ClockConfig+0x358>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d010      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	4b34      	ldr	r3, [pc, #208]	; (8002f14 <HAL_RCC_ClockConfig+0x358>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d208      	bcs.n	8002e60 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e4e:	4b31      	ldr	r3, [pc, #196]	; (8002f14 <HAL_RCC_ClockConfig+0x358>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	492e      	ldr	r1, [pc, #184]	; (8002f14 <HAL_RCC_ClockConfig+0x358>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d010      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699a      	ldr	r2, [r3, #24]
 8002e70:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <HAL_RCC_ClockConfig+0x358>)
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d208      	bcs.n	8002e8e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e7c:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <HAL_RCC_ClockConfig+0x358>)
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	4922      	ldr	r1, [pc, #136]	; (8002f14 <HAL_RCC_ClockConfig+0x358>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d010      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69da      	ldr	r2, [r3, #28]
 8002e9e:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <HAL_RCC_ClockConfig+0x358>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d208      	bcs.n	8002ebc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002eaa:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <HAL_RCC_ClockConfig+0x358>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	4917      	ldr	r1, [pc, #92]	; (8002f14 <HAL_RCC_ClockConfig+0x358>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ebc:	f000 f834 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_RCC_ClockConfig+0x358>)
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	4912      	ldr	r1, [pc, #72]	; (8002f18 <HAL_RCC_ClockConfig+0x35c>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <HAL_RCC_ClockConfig+0x358>)
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	4a0d      	ldr	r2, [pc, #52]	; (8002f18 <HAL_RCC_ClockConfig+0x35c>)
 8002ee4:	5cd3      	ldrb	r3, [r2, r3]
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <HAL_RCC_ClockConfig+0x360>)
 8002ef2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ef4:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <HAL_RCC_ClockConfig+0x364>)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_RCC_ClockConfig+0x368>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fadc 	bl	80014bc <HAL_InitTick>
 8002f04:	4603      	mov	r3, r0
 8002f06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	58024400 	.word	0x58024400
 8002f18:	0800643c 	.word	0x0800643c
 8002f1c:	24000004 	.word	0x24000004
 8002f20:	24000000 	.word	0x24000000
 8002f24:	24000008 	.word	0x24000008

08002f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b089      	sub	sp, #36	; 0x24
 8002f2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f2e:	4bb3      	ldr	r3, [pc, #716]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f36:	2b18      	cmp	r3, #24
 8002f38:	f200 8155 	bhi.w	80031e6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002f3c:	a201      	add	r2, pc, #4	; (adr r2, 8002f44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f42:	bf00      	nop
 8002f44:	08002fa9 	.word	0x08002fa9
 8002f48:	080031e7 	.word	0x080031e7
 8002f4c:	080031e7 	.word	0x080031e7
 8002f50:	080031e7 	.word	0x080031e7
 8002f54:	080031e7 	.word	0x080031e7
 8002f58:	080031e7 	.word	0x080031e7
 8002f5c:	080031e7 	.word	0x080031e7
 8002f60:	080031e7 	.word	0x080031e7
 8002f64:	08002fcf 	.word	0x08002fcf
 8002f68:	080031e7 	.word	0x080031e7
 8002f6c:	080031e7 	.word	0x080031e7
 8002f70:	080031e7 	.word	0x080031e7
 8002f74:	080031e7 	.word	0x080031e7
 8002f78:	080031e7 	.word	0x080031e7
 8002f7c:	080031e7 	.word	0x080031e7
 8002f80:	080031e7 	.word	0x080031e7
 8002f84:	08002fd5 	.word	0x08002fd5
 8002f88:	080031e7 	.word	0x080031e7
 8002f8c:	080031e7 	.word	0x080031e7
 8002f90:	080031e7 	.word	0x080031e7
 8002f94:	080031e7 	.word	0x080031e7
 8002f98:	080031e7 	.word	0x080031e7
 8002f9c:	080031e7 	.word	0x080031e7
 8002fa0:	080031e7 	.word	0x080031e7
 8002fa4:	08002fdb 	.word	0x08002fdb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fa8:	4b94      	ldr	r3, [pc, #592]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d009      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fb4:	4b91      	ldr	r3, [pc, #580]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	08db      	lsrs	r3, r3, #3
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	4a90      	ldr	r2, [pc, #576]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fc6:	e111      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fc8:	4b8d      	ldr	r3, [pc, #564]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fca:	61bb      	str	r3, [r7, #24]
      break;
 8002fcc:	e10e      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002fce:	4b8d      	ldr	r3, [pc, #564]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fd0:	61bb      	str	r3, [r7, #24]
      break;
 8002fd2:	e10b      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002fd4:	4b8c      	ldr	r3, [pc, #560]	; (8003208 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fd6:	61bb      	str	r3, [r7, #24]
      break;
 8002fd8:	e108      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fda:	4b88      	ldr	r3, [pc, #544]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002fe4:	4b85      	ldr	r3, [pc, #532]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ff0:	4b82      	ldr	r3, [pc, #520]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002ffa:	4b80      	ldr	r3, [pc, #512]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffe:	08db      	lsrs	r3, r3, #3
 8003000:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003012:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80e1 	beq.w	80031e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b02      	cmp	r3, #2
 8003022:	f000 8083 	beq.w	800312c <HAL_RCC_GetSysClockFreq+0x204>
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b02      	cmp	r3, #2
 800302a:	f200 80a1 	bhi.w	8003170 <HAL_RCC_GetSysClockFreq+0x248>
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x114>
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d056      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800303a:	e099      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800303c:	4b6f      	ldr	r3, [pc, #444]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	d02d      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003048:	4b6c      	ldr	r3, [pc, #432]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	08db      	lsrs	r3, r3, #3
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	4a6b      	ldr	r2, [pc, #428]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
 8003058:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	ee07 3a90 	vmov	s15, r3
 8003060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003072:	4b62      	ldr	r3, [pc, #392]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003082:	ed97 6a02 	vldr	s12, [r7, #8]
 8003086:	eddf 5a61 	vldr	s11, [pc, #388]	; 800320c <HAL_RCC_GetSysClockFreq+0x2e4>
 800308a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800308e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800309a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030a2:	e087      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003210 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030b6:	4b51      	ldr	r3, [pc, #324]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800320c <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030e6:	e065      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003214 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030fa:	4b40      	ldr	r3, [pc, #256]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003102:	ee07 3a90 	vmov	s15, r3
 8003106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800310a:	ed97 6a02 	vldr	s12, [r7, #8]
 800310e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800320c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800311a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800311e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003126:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800312a:	e043      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003136:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003218 <HAL_RCC_GetSysClockFreq+0x2f0>
 800313a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800313e:	4b2f      	ldr	r3, [pc, #188]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800314e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003152:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800320c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800315a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800315e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800316e:	e021      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003214 <HAL_RCC_GetSysClockFreq+0x2ec>
 800317e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003182:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003192:	ed97 6a02 	vldr	s12, [r7, #8]
 8003196:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800320c <HAL_RCC_GetSysClockFreq+0x2e4>
 800319a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800319e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	0a5b      	lsrs	r3, r3, #9
 80031ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031be:	3301      	adds	r3, #1
 80031c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	ee07 3a90 	vmov	s15, r3
 80031c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80031d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031d8:	ee17 3a90 	vmov	r3, s15
 80031dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80031de:	e005      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	61bb      	str	r3, [r7, #24]
      break;
 80031e4:	e002      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80031e6:	4b07      	ldr	r3, [pc, #28]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031e8:	61bb      	str	r3, [r7, #24]
      break;
 80031ea:	bf00      	nop
  }

  return sysclockfreq;
 80031ec:	69bb      	ldr	r3, [r7, #24]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3724      	adds	r7, #36	; 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	58024400 	.word	0x58024400
 8003200:	03d09000 	.word	0x03d09000
 8003204:	003d0900 	.word	0x003d0900
 8003208:	016e3600 	.word	0x016e3600
 800320c:	46000000 	.word	0x46000000
 8003210:	4c742400 	.word	0x4c742400
 8003214:	4a742400 	.word	0x4a742400
 8003218:	4bb71b00 	.word	0x4bb71b00

0800321c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003222:	f7ff fe81 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 8003226:	4602      	mov	r2, r0
 8003228:	4b10      	ldr	r3, [pc, #64]	; (800326c <HAL_RCC_GetHCLKFreq+0x50>)
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	0a1b      	lsrs	r3, r3, #8
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	490f      	ldr	r1, [pc, #60]	; (8003270 <HAL_RCC_GetHCLKFreq+0x54>)
 8003234:	5ccb      	ldrb	r3, [r1, r3]
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	fa22 f303 	lsr.w	r3, r2, r3
 800323e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003240:	4b0a      	ldr	r3, [pc, #40]	; (800326c <HAL_RCC_GetHCLKFreq+0x50>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	4a09      	ldr	r2, [pc, #36]	; (8003270 <HAL_RCC_GetHCLKFreq+0x54>)
 800324a:	5cd3      	ldrb	r3, [r2, r3]
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	fa22 f303 	lsr.w	r3, r2, r3
 8003256:	4a07      	ldr	r2, [pc, #28]	; (8003274 <HAL_RCC_GetHCLKFreq+0x58>)
 8003258:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800325a:	4a07      	ldr	r2, [pc, #28]	; (8003278 <HAL_RCC_GetHCLKFreq+0x5c>)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003260:	4b04      	ldr	r3, [pc, #16]	; (8003274 <HAL_RCC_GetHCLKFreq+0x58>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	58024400 	.word	0x58024400
 8003270:	0800643c 	.word	0x0800643c
 8003274:	24000004 	.word	0x24000004
 8003278:	24000000 	.word	0x24000000

0800327c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003280:	f7ff ffcc 	bl	800321c <HAL_RCC_GetHCLKFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4904      	ldr	r1, [pc, #16]	; (80032a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	58024400 	.word	0x58024400
 80032a4:	0800643c 	.word	0x0800643c

080032a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032ac:	f7ff ffb6 	bl	800321c <HAL_RCC_GetHCLKFreq>
 80032b0:	4602      	mov	r2, r0
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	4904      	ldr	r1, [pc, #16]	; (80032d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032be:	5ccb      	ldrb	r3, [r1, r3]
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	58024400 	.word	0x58024400
 80032d0:	0800643c 	.word	0x0800643c

080032d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d8:	b0ca      	sub	sp, #296	; 0x128
 80032da:	af00      	add	r7, sp, #0
 80032dc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032e0:	2300      	movs	r3, #0
 80032e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032e6:	2300      	movs	r3, #0
 80032e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80032f8:	2500      	movs	r5, #0
 80032fa:	ea54 0305 	orrs.w	r3, r4, r5
 80032fe:	d049      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003306:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800330a:	d02f      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800330c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003310:	d828      	bhi.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003312:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003316:	d01a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003318:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800331c:	d822      	bhi.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003326:	d007      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003328:	e01c      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800332a:	4bb8      	ldr	r3, [pc, #736]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	4ab7      	ldr	r2, [pc, #732]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003334:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003336:	e01a      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800333c:	3308      	adds	r3, #8
 800333e:	2102      	movs	r1, #2
 8003340:	4618      	mov	r0, r3
 8003342:	f001 fc8f 	bl	8004c64 <RCCEx_PLL2_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800334c:	e00f      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800334e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003352:	3328      	adds	r3, #40	; 0x28
 8003354:	2102      	movs	r1, #2
 8003356:	4618      	mov	r0, r3
 8003358:	f001 fd36 	bl	8004dc8 <RCCEx_PLL3_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003362:	e004      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800336a:	e000      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800336c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800336e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10a      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003376:	4ba5      	ldr	r3, [pc, #660]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800337e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003384:	4aa1      	ldr	r2, [pc, #644]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003386:	430b      	orrs	r3, r1
 8003388:	6513      	str	r3, [r2, #80]	; 0x50
 800338a:	e003      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003390:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80033a0:	f04f 0900 	mov.w	r9, #0
 80033a4:	ea58 0309 	orrs.w	r3, r8, r9
 80033a8:	d047      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d82a      	bhi.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033b4:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ba:	bf00      	nop
 80033bc:	080033d1 	.word	0x080033d1
 80033c0:	080033df 	.word	0x080033df
 80033c4:	080033f5 	.word	0x080033f5
 80033c8:	08003413 	.word	0x08003413
 80033cc:	08003413 	.word	0x08003413
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d0:	4b8e      	ldr	r3, [pc, #568]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	4a8d      	ldr	r2, [pc, #564]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033dc:	e01a      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e2:	3308      	adds	r3, #8
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f001 fc3c 	bl	8004c64 <RCCEx_PLL2_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033f2:	e00f      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033f8:	3328      	adds	r3, #40	; 0x28
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f001 fce3 	bl	8004dc8 <RCCEx_PLL3_Config>
 8003402:	4603      	mov	r3, r0
 8003404:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003408:	e004      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003410:	e000      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003414:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800341c:	4b7b      	ldr	r3, [pc, #492]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800341e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003420:	f023 0107 	bic.w	r1, r3, #7
 8003424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	4a78      	ldr	r2, [pc, #480]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800342c:	430b      	orrs	r3, r1
 800342e:	6513      	str	r3, [r2, #80]	; 0x50
 8003430:	e003      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003436:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800343a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003446:	f04f 0b00 	mov.w	fp, #0
 800344a:	ea5a 030b 	orrs.w	r3, sl, fp
 800344e:	d04c      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800345a:	d030      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800345c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003460:	d829      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003462:	2bc0      	cmp	r3, #192	; 0xc0
 8003464:	d02d      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003466:	2bc0      	cmp	r3, #192	; 0xc0
 8003468:	d825      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800346a:	2b80      	cmp	r3, #128	; 0x80
 800346c:	d018      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800346e:	2b80      	cmp	r3, #128	; 0x80
 8003470:	d821      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	d007      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800347a:	e01c      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800347c:	4b63      	ldr	r3, [pc, #396]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	4a62      	ldr	r2, [pc, #392]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003486:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003488:	e01c      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800348a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800348e:	3308      	adds	r3, #8
 8003490:	2100      	movs	r1, #0
 8003492:	4618      	mov	r0, r3
 8003494:	f001 fbe6 	bl	8004c64 <RCCEx_PLL2_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800349e:	e011      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034a4:	3328      	adds	r3, #40	; 0x28
 80034a6:	2100      	movs	r1, #0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f001 fc8d 	bl	8004dc8 <RCCEx_PLL3_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034b4:	e006      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034bc:	e002      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034be:	bf00      	nop
 80034c0:	e000      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10a      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034cc:	4b4f      	ldr	r3, [pc, #316]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80034d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	4a4c      	ldr	r2, [pc, #304]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034dc:	430b      	orrs	r3, r1
 80034de:	6513      	str	r3, [r2, #80]	; 0x50
 80034e0:	e003      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80034f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80034fa:	2300      	movs	r3, #0
 80034fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003500:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003504:	460b      	mov	r3, r1
 8003506:	4313      	orrs	r3, r2
 8003508:	d053      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800350e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003512:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003516:	d035      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003518:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800351c:	d82e      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800351e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003522:	d031      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003524:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003528:	d828      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800352a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800352e:	d01a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003534:	d822      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800353a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800353e:	d007      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003540:	e01c      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003542:	4b32      	ldr	r3, [pc, #200]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	4a31      	ldr	r2, [pc, #196]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800354c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800354e:	e01c      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003554:	3308      	adds	r3, #8
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f001 fb83 	bl	8004c64 <RCCEx_PLL2_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003564:	e011      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800356a:	3328      	adds	r3, #40	; 0x28
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f001 fc2a 	bl	8004dc8 <RCCEx_PLL3_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800357a:	e006      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003582:	e002      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003584:	bf00      	nop
 8003586:	e000      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800358a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10b      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003592:	4b1e      	ldr	r3, [pc, #120]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800359a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035a2:	4a1a      	ldr	r2, [pc, #104]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6593      	str	r3, [r2, #88]	; 0x58
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ba:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80035be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035c2:	2300      	movs	r3, #0
 80035c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035c8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80035cc:	460b      	mov	r3, r1
 80035ce:	4313      	orrs	r3, r2
 80035d0:	d056      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035de:	d038      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035e4:	d831      	bhi.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035ea:	d034      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80035ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035f0:	d82b      	bhi.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035f6:	d01d      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80035f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035fc:	d825      	bhi.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d006      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003602:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003608:	e01f      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800360a:	bf00      	nop
 800360c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003610:	4ba2      	ldr	r3, [pc, #648]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	4aa1      	ldr	r2, [pc, #644]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800361c:	e01c      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003622:	3308      	adds	r3, #8
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f001 fb1c 	bl	8004c64 <RCCEx_PLL2_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003632:	e011      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003638:	3328      	adds	r3, #40	; 0x28
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f001 fbc3 	bl	8004dc8 <RCCEx_PLL3_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003648:	e006      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003650:	e002      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003652:	bf00      	nop
 8003654:	e000      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003658:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10b      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003660:	4b8e      	ldr	r3, [pc, #568]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003670:	4a8a      	ldr	r2, [pc, #552]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003672:	430b      	orrs	r3, r1
 8003674:	6593      	str	r3, [r2, #88]	; 0x58
 8003676:	e003      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003678:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800367c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800368c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003690:	2300      	movs	r3, #0
 8003692:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003696:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800369a:	460b      	mov	r3, r1
 800369c:	4313      	orrs	r3, r2
 800369e:	d03a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80036a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a6:	2b30      	cmp	r3, #48	; 0x30
 80036a8:	d01f      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x416>
 80036aa:	2b30      	cmp	r3, #48	; 0x30
 80036ac:	d819      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d00c      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d815      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d019      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d111      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036be:	4b77      	ldr	r3, [pc, #476]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	4a76      	ldr	r2, [pc, #472]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036ca:	e011      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d0:	3308      	adds	r3, #8
 80036d2:	2102      	movs	r1, #2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 fac5 	bl	8004c64 <RCCEx_PLL2_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036e0:	e006      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036e8:	e002      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036ea:	bf00      	nop
 80036ec:	e000      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036f8:	4b68      	ldr	r3, [pc, #416]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003706:	4a65      	ldr	r2, [pc, #404]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003708:	430b      	orrs	r3, r1
 800370a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800370c:	e003      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003722:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003726:	2300      	movs	r3, #0
 8003728:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800372c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003730:	460b      	mov	r3, r1
 8003732:	4313      	orrs	r3, r2
 8003734:	d051      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003740:	d035      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003746:	d82e      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003748:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800374c:	d031      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800374e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003752:	d828      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003758:	d01a      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800375a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375e:	d822      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003768:	d007      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800376a:	e01c      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800376c:	4b4b      	ldr	r3, [pc, #300]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	4a4a      	ldr	r2, [pc, #296]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003776:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003778:	e01c      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800377a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800377e:	3308      	adds	r3, #8
 8003780:	2100      	movs	r1, #0
 8003782:	4618      	mov	r0, r3
 8003784:	f001 fa6e 	bl	8004c64 <RCCEx_PLL2_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800378e:	e011      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003794:	3328      	adds	r3, #40	; 0x28
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f001 fb15 	bl	8004dc8 <RCCEx_PLL3_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037a4:	e006      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037ac:	e002      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037bc:	4b37      	ldr	r3, [pc, #220]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ca:	4a34      	ldr	r2, [pc, #208]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6513      	str	r3, [r2, #80]	; 0x50
 80037d0:	e003      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80037e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80037f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80037f4:	460b      	mov	r3, r1
 80037f6:	4313      	orrs	r3, r2
 80037f8:	d056      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80037fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003804:	d033      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003806:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800380a:	d82c      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800380c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003810:	d02f      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003812:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003816:	d826      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003818:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800381c:	d02b      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800381e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003822:	d820      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003824:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003828:	d012      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800382a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800382e:	d81a      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d022      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003838:	d115      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800383e:	3308      	adds	r3, #8
 8003840:	2101      	movs	r1, #1
 8003842:	4618      	mov	r0, r3
 8003844:	f001 fa0e 	bl	8004c64 <RCCEx_PLL2_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800384e:	e015      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003854:	3328      	adds	r3, #40	; 0x28
 8003856:	2101      	movs	r1, #1
 8003858:	4618      	mov	r0, r3
 800385a:	f001 fab5 	bl	8004dc8 <RCCEx_PLL3_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003864:	e00a      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800386c:	e006      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800386e:	bf00      	nop
 8003870:	e004      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003872:	bf00      	nop
 8003874:	e002      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800387a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800387c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10d      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003888:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003892:	4a02      	ldr	r2, [pc, #8]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003894:	430b      	orrs	r3, r1
 8003896:	6513      	str	r3, [r2, #80]	; 0x50
 8003898:	e006      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800389a:	bf00      	nop
 800389c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80038b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038be:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4313      	orrs	r3, r2
 80038c6:	d055      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038d4:	d033      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80038d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038da:	d82c      	bhi.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e0:	d02f      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e6:	d826      	bhi.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038ec:	d02b      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80038ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038f2:	d820      	bhi.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038f8:	d012      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80038fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038fe:	d81a      	bhi.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d022      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003904:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003908:	d115      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800390a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800390e:	3308      	adds	r3, #8
 8003910:	2101      	movs	r1, #1
 8003912:	4618      	mov	r0, r3
 8003914:	f001 f9a6 	bl	8004c64 <RCCEx_PLL2_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800391e:	e015      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003924:	3328      	adds	r3, #40	; 0x28
 8003926:	2101      	movs	r1, #1
 8003928:	4618      	mov	r0, r3
 800392a:	f001 fa4d 	bl	8004dc8 <RCCEx_PLL3_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003934:	e00a      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800393c:	e006      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800393e:	bf00      	nop
 8003940:	e004      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003942:	bf00      	nop
 8003944:	e002      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800394a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10b      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003954:	4ba3      	ldr	r3, [pc, #652]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003960:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003964:	4a9f      	ldr	r2, [pc, #636]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003966:	430b      	orrs	r3, r1
 8003968:	6593      	str	r3, [r2, #88]	; 0x58
 800396a:	e003      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003970:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003984:	2300      	movs	r3, #0
 8003986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800398a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800398e:	460b      	mov	r3, r1
 8003990:	4313      	orrs	r3, r2
 8003992:	d037      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800399e:	d00e      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80039a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a4:	d816      	bhi.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d018      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80039aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ae:	d111      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b0:	4b8c      	ldr	r3, [pc, #560]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	4a8b      	ldr	r2, [pc, #556]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039bc:	e00f      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c2:	3308      	adds	r3, #8
 80039c4:	2101      	movs	r1, #1
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 f94c 	bl	8004c64 <RCCEx_PLL2_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039d2:	e004      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039da:	e000      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80039dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039e6:	4b7f      	ldr	r3, [pc, #508]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	4a7b      	ldr	r2, [pc, #492]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039f6:	430b      	orrs	r3, r1
 80039f8:	6513      	str	r3, [r2, #80]	; 0x50
 80039fa:	e003      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003a10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a1a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4313      	orrs	r3, r2
 8003a22:	d039      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d81c      	bhi.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a2e:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003a71 	.word	0x08003a71
 8003a38:	08003a45 	.word	0x08003a45
 8003a3c:	08003a53 	.word	0x08003a53
 8003a40:	08003a71 	.word	0x08003a71
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a44:	4b67      	ldr	r3, [pc, #412]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	4a66      	ldr	r2, [pc, #408]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a50:	e00f      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a56:	3308      	adds	r3, #8
 8003a58:	2102      	movs	r1, #2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f001 f902 	bl	8004c64 <RCCEx_PLL2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a66:	e004      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a6e:	e000      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a7a:	4b5a      	ldr	r3, [pc, #360]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7e:	f023 0103 	bic.w	r1, r3, #3
 8003a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a88:	4a56      	ldr	r2, [pc, #344]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a8e:	e003      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003aa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003aae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f000 809f 	beq.w	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aba:	4b4b      	ldr	r3, [pc, #300]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a4a      	ldr	r2, [pc, #296]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ac6:	f7fd fd43 	bl	8001550 <HAL_GetTick>
 8003aca:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ace:	e00b      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad0:	f7fd fd3e 	bl	8001550 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b64      	cmp	r3, #100	; 0x64
 8003ade:	d903      	bls.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ae6:	e005      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ae8:	4b3f      	ldr	r3, [pc, #252]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ed      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003af4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d179      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003afc:	4b39      	ldr	r3, [pc, #228]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003afe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b08:	4053      	eors	r3, r2
 8003b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d015      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b12:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b1e:	4b31      	ldr	r3, [pc, #196]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	4a30      	ldr	r2, [pc, #192]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b28:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b2a:	4b2e      	ldr	r3, [pc, #184]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	4a2d      	ldr	r2, [pc, #180]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b34:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b36:	4a2b      	ldr	r2, [pc, #172]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b3c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b4a:	d118      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fd00 	bl	8001550 <HAL_GetTick>
 8003b50:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b54:	e00d      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b56:	f7fd fcfb 	bl	8001550 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b60:	1ad2      	subs	r2, r2, r3
 8003b62:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d903      	bls.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003b70:	e005      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b72:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0eb      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d129      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b96:	d10e      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ba8:	091a      	lsrs	r2, r3, #4
 8003baa:	4b10      	ldr	r3, [pc, #64]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	4a0d      	ldr	r2, [pc, #52]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6113      	str	r3, [r2, #16]
 8003bb4:	e005      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bbc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bc0:	6113      	str	r3, [r2, #16]
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd2:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd8:	e00e      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003be2:	e009      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003be4:	58024400 	.word	0x58024400
 8003be8:	58024800 	.word	0x58024800
 8003bec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c00:	f002 0301 	and.w	r3, r2, #1
 8003c04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f000 8089 	beq.w	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c20:	2b28      	cmp	r3, #40	; 0x28
 8003c22:	d86b      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c24:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2a:	bf00      	nop
 8003c2c:	08003d05 	.word	0x08003d05
 8003c30:	08003cfd 	.word	0x08003cfd
 8003c34:	08003cfd 	.word	0x08003cfd
 8003c38:	08003cfd 	.word	0x08003cfd
 8003c3c:	08003cfd 	.word	0x08003cfd
 8003c40:	08003cfd 	.word	0x08003cfd
 8003c44:	08003cfd 	.word	0x08003cfd
 8003c48:	08003cfd 	.word	0x08003cfd
 8003c4c:	08003cd1 	.word	0x08003cd1
 8003c50:	08003cfd 	.word	0x08003cfd
 8003c54:	08003cfd 	.word	0x08003cfd
 8003c58:	08003cfd 	.word	0x08003cfd
 8003c5c:	08003cfd 	.word	0x08003cfd
 8003c60:	08003cfd 	.word	0x08003cfd
 8003c64:	08003cfd 	.word	0x08003cfd
 8003c68:	08003cfd 	.word	0x08003cfd
 8003c6c:	08003ce7 	.word	0x08003ce7
 8003c70:	08003cfd 	.word	0x08003cfd
 8003c74:	08003cfd 	.word	0x08003cfd
 8003c78:	08003cfd 	.word	0x08003cfd
 8003c7c:	08003cfd 	.word	0x08003cfd
 8003c80:	08003cfd 	.word	0x08003cfd
 8003c84:	08003cfd 	.word	0x08003cfd
 8003c88:	08003cfd 	.word	0x08003cfd
 8003c8c:	08003d05 	.word	0x08003d05
 8003c90:	08003cfd 	.word	0x08003cfd
 8003c94:	08003cfd 	.word	0x08003cfd
 8003c98:	08003cfd 	.word	0x08003cfd
 8003c9c:	08003cfd 	.word	0x08003cfd
 8003ca0:	08003cfd 	.word	0x08003cfd
 8003ca4:	08003cfd 	.word	0x08003cfd
 8003ca8:	08003cfd 	.word	0x08003cfd
 8003cac:	08003d05 	.word	0x08003d05
 8003cb0:	08003cfd 	.word	0x08003cfd
 8003cb4:	08003cfd 	.word	0x08003cfd
 8003cb8:	08003cfd 	.word	0x08003cfd
 8003cbc:	08003cfd 	.word	0x08003cfd
 8003cc0:	08003cfd 	.word	0x08003cfd
 8003cc4:	08003cfd 	.word	0x08003cfd
 8003cc8:	08003cfd 	.word	0x08003cfd
 8003ccc:	08003d05 	.word	0x08003d05
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 ffc3 	bl	8004c64 <RCCEx_PLL2_Config>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ce4:	e00f      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cea:	3328      	adds	r3, #40	; 0x28
 8003cec:	2101      	movs	r1, #1
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f001 f86a 	bl	8004dc8 <RCCEx_PLL3_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cfa:	e004      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d02:	e000      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d0e:	4bbf      	ldr	r3, [pc, #764]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d12:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d1c:	4abb      	ldr	r2, [pc, #748]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	6553      	str	r3, [r2, #84]	; 0x54
 8003d22:	e003      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	f002 0302 	and.w	r3, r2, #2
 8003d38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d42:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003d46:	460b      	mov	r3, r1
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	d041      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d52:	2b05      	cmp	r3, #5
 8003d54:	d824      	bhi.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d56:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003da9 	.word	0x08003da9
 8003d60:	08003d75 	.word	0x08003d75
 8003d64:	08003d8b 	.word	0x08003d8b
 8003d68:	08003da9 	.word	0x08003da9
 8003d6c:	08003da9 	.word	0x08003da9
 8003d70:	08003da9 	.word	0x08003da9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d78:	3308      	adds	r3, #8
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 ff71 	bl	8004c64 <RCCEx_PLL2_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d88:	e00f      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d8e:	3328      	adds	r3, #40	; 0x28
 8003d90:	2101      	movs	r1, #1
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 f818 	bl	8004dc8 <RCCEx_PLL3_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d9e:	e004      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003da6:	e000      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003daa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10a      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003db2:	4b96      	ldr	r3, [pc, #600]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db6:	f023 0107 	bic.w	r1, r3, #7
 8003dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc0:	4a92      	ldr	r2, [pc, #584]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	6553      	str	r3, [r2, #84]	; 0x54
 8003dc6:	e003      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f002 0304 	and.w	r3, r2, #4
 8003ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003de0:	2300      	movs	r3, #0
 8003de2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003de6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4313      	orrs	r3, r2
 8003dee:	d044      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df8:	2b05      	cmp	r3, #5
 8003dfa:	d825      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003dfc:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e02:	bf00      	nop
 8003e04:	08003e51 	.word	0x08003e51
 8003e08:	08003e1d 	.word	0x08003e1d
 8003e0c:	08003e33 	.word	0x08003e33
 8003e10:	08003e51 	.word	0x08003e51
 8003e14:	08003e51 	.word	0x08003e51
 8003e18:	08003e51 	.word	0x08003e51
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e20:	3308      	adds	r3, #8
 8003e22:	2101      	movs	r1, #1
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 ff1d 	bl	8004c64 <RCCEx_PLL2_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e30:	e00f      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e36:	3328      	adds	r3, #40	; 0x28
 8003e38:	2101      	movs	r1, #1
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 ffc4 	bl	8004dc8 <RCCEx_PLL3_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e46:	e004      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e4e:	e000      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e5a:	4b6c      	ldr	r3, [pc, #432]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	f023 0107 	bic.w	r1, r3, #7
 8003e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6a:	4a68      	ldr	r2, [pc, #416]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e70:	e003      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	f002 0320 	and.w	r3, r2, #32
 8003e86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e94:	460b      	mov	r3, r1
 8003e96:	4313      	orrs	r3, r2
 8003e98:	d055      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ea6:	d033      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eac:	d82c      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb2:	d02f      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb8:	d826      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ebe:	d02b      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003ec0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ec4:	d820      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eca:	d012      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed0:	d81a      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d022      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003ed6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eda:	d115      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 febd 	bl	8004c64 <RCCEx_PLL2_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ef0:	e015      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef6:	3328      	adds	r3, #40	; 0x28
 8003ef8:	2102      	movs	r1, #2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 ff64 	bl	8004dc8 <RCCEx_PLL3_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f06:	e00a      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f0e:	e006      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f10:	bf00      	nop
 8003f12:	e004      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f14:	bf00      	nop
 8003f16:	e002      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f18:	bf00      	nop
 8003f1a:	e000      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f26:	4b39      	ldr	r3, [pc, #228]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	4a35      	ldr	r2, [pc, #212]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	6553      	str	r3, [r2, #84]	; 0x54
 8003f3c:	e003      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003f52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f56:	2300      	movs	r3, #0
 8003f58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003f5c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4313      	orrs	r3, r2
 8003f64:	d058      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f6e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f72:	d033      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f74:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f78:	d82c      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f7e:	d02f      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f84:	d826      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f8a:	d02b      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003f8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f90:	d820      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f96:	d012      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f9c:	d81a      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d022      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa6:	d115      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fac:	3308      	adds	r3, #8
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fe57 	bl	8004c64 <RCCEx_PLL2_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fbc:	e015      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc2:	3328      	adds	r3, #40	; 0x28
 8003fc4:	2102      	movs	r1, #2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fefe 	bl	8004dc8 <RCCEx_PLL3_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fd2:	e00a      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fda:	e006      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fdc:	bf00      	nop
 8003fde:	e004      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fe0:	bf00      	nop
 8003fe2:	e002      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fe4:	bf00      	nop
 8003fe6:	e000      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10e      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ff2:	4b06      	ldr	r3, [pc, #24]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004002:	4a02      	ldr	r2, [pc, #8]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004004:	430b      	orrs	r3, r1
 8004006:	6593      	str	r3, [r2, #88]	; 0x58
 8004008:	e006      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800400a:	bf00      	nop
 800400c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004010:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004014:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004020:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004028:	2300      	movs	r3, #0
 800402a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800402e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004032:	460b      	mov	r3, r1
 8004034:	4313      	orrs	r3, r2
 8004036:	d055      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800403c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004040:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004044:	d033      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004046:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800404a:	d82c      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800404c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004050:	d02f      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004056:	d826      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004058:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800405c:	d02b      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800405e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004062:	d820      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004068:	d012      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800406a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800406e:	d81a      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d022      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004078:	d115      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800407a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800407e:	3308      	adds	r3, #8
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fdee 	bl	8004c64 <RCCEx_PLL2_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800408e:	e015      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004094:	3328      	adds	r3, #40	; 0x28
 8004096:	2102      	movs	r1, #2
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fe95 	bl	8004dc8 <RCCEx_PLL3_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040a4:	e00a      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040ac:	e006      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040ae:	bf00      	nop
 80040b0:	e004      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040b2:	bf00      	nop
 80040b4:	e002      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040b6:	bf00      	nop
 80040b8:	e000      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10b      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040c4:	4ba1      	ldr	r3, [pc, #644]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80040cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040d4:	4a9d      	ldr	r2, [pc, #628]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040d6:	430b      	orrs	r3, r1
 80040d8:	6593      	str	r3, [r2, #88]	; 0x58
 80040da:	e003      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	f002 0308 	and.w	r3, r2, #8
 80040f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040f4:	2300      	movs	r3, #0
 80040f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80040fe:	460b      	mov	r3, r1
 8004100:	4313      	orrs	r3, r2
 8004102:	d01e      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800410c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004110:	d10c      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004116:	3328      	adds	r3, #40	; 0x28
 8004118:	2102      	movs	r1, #2
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fe54 	bl	8004dc8 <RCCEx_PLL3_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800412c:	4b87      	ldr	r3, [pc, #540]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800413c:	4a83      	ldr	r2, [pc, #524]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800413e:	430b      	orrs	r3, r1
 8004140:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	f002 0310 	and.w	r3, r2, #16
 800414e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004152:	2300      	movs	r3, #0
 8004154:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004158:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800415c:	460b      	mov	r3, r1
 800415e:	4313      	orrs	r3, r2
 8004160:	d01e      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004166:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800416a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800416e:	d10c      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004174:	3328      	adds	r3, #40	; 0x28
 8004176:	2102      	movs	r1, #2
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fe25 	bl	8004dc8 <RCCEx_PLL3_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800418a:	4b70      	ldr	r3, [pc, #448]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800419a:	4a6c      	ldr	r2, [pc, #432]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800419c:	430b      	orrs	r3, r1
 800419e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80041ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041b0:	2300      	movs	r3, #0
 80041b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80041ba:	460b      	mov	r3, r1
 80041bc:	4313      	orrs	r3, r2
 80041be:	d03e      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041cc:	d022      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80041ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041d2:	d81b      	bhi.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041dc:	d00b      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80041de:	e015      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e4:	3308      	adds	r3, #8
 80041e6:	2100      	movs	r1, #0
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fd3b 	bl	8004c64 <RCCEx_PLL2_Config>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041f4:	e00f      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fa:	3328      	adds	r3, #40	; 0x28
 80041fc:	2102      	movs	r1, #2
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fde2 	bl	8004dc8 <RCCEx_PLL3_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800420a:	e004      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800421e:	4b4b      	ldr	r3, [pc, #300]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800422e:	4a47      	ldr	r2, [pc, #284]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004230:	430b      	orrs	r3, r1
 8004232:	6593      	str	r3, [r2, #88]	; 0x58
 8004234:	e003      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800423a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800424a:	67bb      	str	r3, [r7, #120]	; 0x78
 800424c:	2300      	movs	r3, #0
 800424e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004250:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004254:	460b      	mov	r3, r1
 8004256:	4313      	orrs	r3, r2
 8004258:	d03b      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800425a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004266:	d01f      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004268:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800426c:	d818      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800426e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004272:	d003      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004274:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004278:	d007      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800427a:	e011      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800427c:	4b33      	ldr	r3, [pc, #204]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	4a32      	ldr	r2, [pc, #200]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004286:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004288:	e00f      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800428a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428e:	3328      	adds	r3, #40	; 0x28
 8004290:	2101      	movs	r1, #1
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fd98 	bl	8004dc8 <RCCEx_PLL3_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800429e:	e004      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042a6:	e000      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80042a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10b      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042b2:	4b26      	ldr	r3, [pc, #152]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	4a22      	ldr	r2, [pc, #136]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6553      	str	r3, [r2, #84]	; 0x54
 80042c8:	e003      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80042de:	673b      	str	r3, [r7, #112]	; 0x70
 80042e0:	2300      	movs	r3, #0
 80042e2:	677b      	str	r3, [r7, #116]	; 0x74
 80042e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80042e8:	460b      	mov	r3, r1
 80042ea:	4313      	orrs	r3, r2
 80042ec:	d034      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80042f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fc:	d007      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80042fe:	e011      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004300:	4b12      	ldr	r3, [pc, #72]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	4a11      	ldr	r2, [pc, #68]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800430c:	e00e      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800430e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004312:	3308      	adds	r3, #8
 8004314:	2102      	movs	r1, #2
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fca4 	bl	8004c64 <RCCEx_PLL2_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004322:	e003      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800432a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10d      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004338:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004342:	4a02      	ldr	r2, [pc, #8]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004344:	430b      	orrs	r3, r1
 8004346:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004348:	e006      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800434a:	bf00      	nop
 800434c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004354:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004364:	66bb      	str	r3, [r7, #104]	; 0x68
 8004366:	2300      	movs	r3, #0
 8004368:	66fb      	str	r3, [r7, #108]	; 0x6c
 800436a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800436e:	460b      	mov	r3, r1
 8004370:	4313      	orrs	r3, r2
 8004372:	d00c      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004378:	3328      	adds	r3, #40	; 0x28
 800437a:	2102      	movs	r1, #2
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fd23 	bl	8004dc8 <RCCEx_PLL3_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800439a:	663b      	str	r3, [r7, #96]	; 0x60
 800439c:	2300      	movs	r3, #0
 800439e:	667b      	str	r3, [r7, #100]	; 0x64
 80043a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80043a4:	460b      	mov	r3, r1
 80043a6:	4313      	orrs	r3, r2
 80043a8:	d038      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043b6:	d018      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80043b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043bc:	d811      	bhi.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c2:	d014      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80043c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c8:	d80b      	bhi.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d011      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80043ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d2:	d106      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d4:	4bc3      	ldr	r3, [pc, #780]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	4ac2      	ldr	r2, [pc, #776]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043e0:	e008      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043e8:	e004      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043ea:	bf00      	nop
 80043ec:	e002      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043ee:	bf00      	nop
 80043f0:	e000      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10b      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043fc:	4bb9      	ldr	r3, [pc, #740]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004400:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800440c:	4ab5      	ldr	r2, [pc, #724]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800440e:	430b      	orrs	r3, r1
 8004410:	6553      	str	r3, [r2, #84]	; 0x54
 8004412:	e003      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004418:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800441c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004428:	65bb      	str	r3, [r7, #88]	; 0x58
 800442a:	2300      	movs	r3, #0
 800442c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800442e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004432:	460b      	mov	r3, r1
 8004434:	4313      	orrs	r3, r2
 8004436:	d009      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004438:	4baa      	ldr	r3, [pc, #680]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800443a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004446:	4aa7      	ldr	r2, [pc, #668]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004448:	430b      	orrs	r3, r1
 800444a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800444c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004458:	653b      	str	r3, [r7, #80]	; 0x50
 800445a:	2300      	movs	r3, #0
 800445c:	657b      	str	r3, [r7, #84]	; 0x54
 800445e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004462:	460b      	mov	r3, r1
 8004464:	4313      	orrs	r3, r2
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004468:	4b9e      	ldr	r3, [pc, #632]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004474:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004478:	4a9a      	ldr	r2, [pc, #616]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800447a:	430b      	orrs	r3, r1
 800447c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800448a:	64bb      	str	r3, [r7, #72]	; 0x48
 800448c:	2300      	movs	r3, #0
 800448e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004490:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004494:	460b      	mov	r3, r1
 8004496:	4313      	orrs	r3, r2
 8004498:	d009      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800449a:	4b92      	ldr	r3, [pc, #584]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800449c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a8:	4a8e      	ldr	r2, [pc, #568]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044aa:	430b      	orrs	r3, r1
 80044ac:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80044ba:	643b      	str	r3, [r7, #64]	; 0x40
 80044bc:	2300      	movs	r3, #0
 80044be:	647b      	str	r3, [r7, #68]	; 0x44
 80044c0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80044c4:	460b      	mov	r3, r1
 80044c6:	4313      	orrs	r3, r2
 80044c8:	d00e      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ca:	4b86      	ldr	r3, [pc, #536]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	4a85      	ldr	r2, [pc, #532]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044d4:	6113      	str	r3, [r2, #16]
 80044d6:	4b83      	ldr	r3, [pc, #524]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044d8:	6919      	ldr	r1, [r3, #16]
 80044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80044e2:	4a80      	ldr	r2, [pc, #512]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e4:	430b      	orrs	r3, r1
 80044e6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80044f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80044f6:	2300      	movs	r3, #0
 80044f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044fa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80044fe:	460b      	mov	r3, r1
 8004500:	4313      	orrs	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004504:	4b77      	ldr	r3, [pc, #476]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004508:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004512:	4a74      	ldr	r2, [pc, #464]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004514:	430b      	orrs	r3, r1
 8004516:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004524:	633b      	str	r3, [r7, #48]	; 0x30
 8004526:	2300      	movs	r3, #0
 8004528:	637b      	str	r3, [r7, #52]	; 0x34
 800452a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800452e:	460b      	mov	r3, r1
 8004530:	4313      	orrs	r3, r2
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004534:	4b6b      	ldr	r3, [pc, #428]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004538:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800453c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004544:	4a67      	ldr	r2, [pc, #412]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004546:	430b      	orrs	r3, r1
 8004548:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	2100      	movs	r1, #0
 8004554:	62b9      	str	r1, [r7, #40]	; 0x28
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800455c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004560:	460b      	mov	r3, r1
 8004562:	4313      	orrs	r3, r2
 8004564:	d011      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456a:	3308      	adds	r3, #8
 800456c:	2100      	movs	r1, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fb78 	bl	8004c64 <RCCEx_PLL2_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800457a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004582:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004586:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	2100      	movs	r1, #0
 8004594:	6239      	str	r1, [r7, #32]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
 800459c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045a0:	460b      	mov	r3, r1
 80045a2:	4313      	orrs	r3, r2
 80045a4:	d011      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045aa:	3308      	adds	r3, #8
 80045ac:	2101      	movs	r1, #1
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fb58 	bl	8004c64 <RCCEx_PLL2_Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d2:	2100      	movs	r1, #0
 80045d4:	61b9      	str	r1, [r7, #24]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045e0:	460b      	mov	r3, r1
 80045e2:	4313      	orrs	r3, r2
 80045e4:	d011      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ea:	3308      	adds	r3, #8
 80045ec:	2102      	movs	r1, #2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fb38 	bl	8004c64 <RCCEx_PLL2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004602:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004606:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	2100      	movs	r1, #0
 8004614:	6139      	str	r1, [r7, #16]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004620:	460b      	mov	r3, r1
 8004622:	4313      	orrs	r3, r2
 8004624:	d011      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800462a:	3328      	adds	r3, #40	; 0x28
 800462c:	2100      	movs	r1, #0
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fbca 	bl	8004dc8 <RCCEx_PLL3_Config>
 8004634:	4603      	mov	r3, r0
 8004636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800463a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004642:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004646:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	2100      	movs	r1, #0
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004660:	460b      	mov	r3, r1
 8004662:	4313      	orrs	r3, r2
 8004664:	d011      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800466a:	3328      	adds	r3, #40	; 0x28
 800466c:	2101      	movs	r1, #1
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fbaa 	bl	8004dc8 <RCCEx_PLL3_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800467a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004686:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	2100      	movs	r1, #0
 8004694:	6039      	str	r1, [r7, #0]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	607b      	str	r3, [r7, #4]
 800469c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046a0:	460b      	mov	r3, r1
 80046a2:	4313      	orrs	r3, r2
 80046a4:	d011      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046aa:	3328      	adds	r3, #40	; 0x28
 80046ac:	2102      	movs	r1, #2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fb8a 	bl	8004dc8 <RCCEx_PLL3_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80046ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80046ca:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e000      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
}
 80046d8:	4618      	mov	r0, r3
 80046da:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80046de:	46bd      	mov	sp, r7
 80046e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046e4:	58024400 	.word	0x58024400

080046e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046ec:	f7fe fd96 	bl	800321c <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4904      	ldr	r1, [pc, #16]	; (8004710 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}
 800470c:	58024400 	.word	0x58024400
 8004710:	0800643c 	.word	0x0800643c

08004714 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004714:	b480      	push	{r7}
 8004716:	b089      	sub	sp, #36	; 0x24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800471c:	4ba1      	ldr	r3, [pc, #644]	; (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004726:	4b9f      	ldr	r3, [pc, #636]	; (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	0b1b      	lsrs	r3, r3, #12
 800472c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004730:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004732:	4b9c      	ldr	r3, [pc, #624]	; (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800473e:	4b99      	ldr	r3, [pc, #612]	; (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	08db      	lsrs	r3, r3, #3
 8004744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	fb02 f303 	mul.w	r3, r2, r3
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8111 	beq.w	8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b02      	cmp	r3, #2
 8004766:	f000 8083 	beq.w	8004870 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	2b02      	cmp	r3, #2
 800476e:	f200 80a1 	bhi.w	80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d056      	beq.n	800482c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800477e:	e099      	b.n	80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004780:	4b88      	ldr	r3, [pc, #544]	; (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	d02d      	beq.n	80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800478c:	4b85      	ldr	r3, [pc, #532]	; (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	08db      	lsrs	r3, r3, #3
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	4a84      	ldr	r2, [pc, #528]	; (80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
 800479c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	ee07 3a90 	vmov	s15, r3
 80047a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b6:	4b7b      	ldr	r3, [pc, #492]	; (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047e6:	e087      	b.n	80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80049b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fa:	4b6a      	ldr	r3, [pc, #424]	; (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480a:	ed97 6a03 	vldr	s12, [r7, #12]
 800480e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800481e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800482a:	e065      	b.n	80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004836:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800483a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483e:	4b59      	ldr	r3, [pc, #356]	; (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004852:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800485a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800486e:	e043      	b.n	80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800487e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004882:	4b48      	ldr	r3, [pc, #288]	; (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004892:	ed97 6a03 	vldr	s12, [r7, #12]
 8004896:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800489a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048b2:	e021      	b.n	80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c6:	4b37      	ldr	r3, [pc, #220]	; (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80048f8:	4b2a      	ldr	r3, [pc, #168]	; (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	0a5b      	lsrs	r3, r3, #9
 80048fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800490e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004912:	edd7 6a07 	vldr	s13, [r7, #28]
 8004916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800491a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800491e:	ee17 2a90 	vmov	r2, s15
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004926:	4b1f      	ldr	r3, [pc, #124]	; (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	0c1b      	lsrs	r3, r3, #16
 800492c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004930:	ee07 3a90 	vmov	s15, r3
 8004934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800493c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004940:	edd7 6a07 	vldr	s13, [r7, #28]
 8004944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800494c:	ee17 2a90 	vmov	r2, s15
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004954:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	0e1b      	lsrs	r3, r3, #24
 800495a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800496a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800496e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800497a:	ee17 2a90 	vmov	r2, s15
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004982:	e008      	b.n	8004996 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	609a      	str	r2, [r3, #8]
}
 8004996:	bf00      	nop
 8004998:	3724      	adds	r7, #36	; 0x24
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	58024400 	.word	0x58024400
 80049a8:	03d09000 	.word	0x03d09000
 80049ac:	46000000 	.word	0x46000000
 80049b0:	4c742400 	.word	0x4c742400
 80049b4:	4a742400 	.word	0x4a742400
 80049b8:	4bb71b00 	.word	0x4bb71b00

080049bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049bc:	b480      	push	{r7}
 80049be:	b089      	sub	sp, #36	; 0x24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049c4:	4ba1      	ldr	r3, [pc, #644]	; (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049ce:	4b9f      	ldr	r3, [pc, #636]	; (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	0d1b      	lsrs	r3, r3, #20
 80049d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049da:	4b9c      	ldr	r3, [pc, #624]	; (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049de:	0a1b      	lsrs	r3, r3, #8
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049e6:	4b99      	ldr	r3, [pc, #612]	; (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	08db      	lsrs	r3, r3, #3
 80049ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	fb02 f303 	mul.w	r3, r2, r3
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 8111 	beq.w	8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	f000 8083 	beq.w	8004b18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	f200 80a1 	bhi.w	8004b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d056      	beq.n	8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a26:	e099      	b.n	8004b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a28:	4b88      	ldr	r3, [pc, #544]	; (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d02d      	beq.n	8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a34:	4b85      	ldr	r3, [pc, #532]	; (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	08db      	lsrs	r3, r3, #3
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	4a84      	ldr	r2, [pc, #528]	; (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a40:	fa22 f303 	lsr.w	r3, r2, r3
 8004a44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	ee07 3a90 	vmov	s15, r3
 8004a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a5e:	4b7b      	ldr	r3, [pc, #492]	; (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a72:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a8e:	e087      	b.n	8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa2:	4b6a      	ldr	r3, [pc, #424]	; (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ab6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ad2:	e065      	b.n	8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ade:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae6:	4b59      	ldr	r3, [pc, #356]	; (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004afa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b16:	e043      	b.n	8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2a:	4b48      	ldr	r3, [pc, #288]	; (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b5a:	e021      	b.n	8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6e:	4b37      	ldr	r3, [pc, #220]	; (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b82:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ba0:	4b2a      	ldr	r3, [pc, #168]	; (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	0a5b      	lsrs	r3, r3, #9
 8004ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bc6:	ee17 2a90 	vmov	r2, s15
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004bce:	4b1f      	ldr	r3, [pc, #124]	; (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	0c1b      	lsrs	r3, r3, #16
 8004bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bd8:	ee07 3a90 	vmov	s15, r3
 8004bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004be4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004be8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf4:	ee17 2a90 	vmov	r2, s15
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004bfc:	4b13      	ldr	r3, [pc, #76]	; (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	0e1b      	lsrs	r3, r3, #24
 8004c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c16:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c22:	ee17 2a90 	vmov	r2, s15
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c2a:	e008      	b.n	8004c3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	609a      	str	r2, [r3, #8]
}
 8004c3e:	bf00      	nop
 8004c40:	3724      	adds	r7, #36	; 0x24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	58024400 	.word	0x58024400
 8004c50:	03d09000 	.word	0x03d09000
 8004c54:	46000000 	.word	0x46000000
 8004c58:	4c742400 	.word	0x4c742400
 8004c5c:	4a742400 	.word	0x4a742400
 8004c60:	4bb71b00 	.word	0x4bb71b00

08004c64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c72:	4b53      	ldr	r3, [pc, #332]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d101      	bne.n	8004c82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e099      	b.n	8004db6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c82:	4b4f      	ldr	r3, [pc, #316]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a4e      	ldr	r2, [pc, #312]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004c88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c8e:	f7fc fc5f 	bl	8001550 <HAL_GetTick>
 8004c92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c94:	e008      	b.n	8004ca8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c96:	f7fc fc5b 	bl	8001550 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e086      	b.n	8004db6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ca8:	4b45      	ldr	r3, [pc, #276]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f0      	bne.n	8004c96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004cb4:	4b42      	ldr	r3, [pc, #264]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	031b      	lsls	r3, r3, #12
 8004cc2:	493f      	ldr	r1, [pc, #252]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	628b      	str	r3, [r1, #40]	; 0x28
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	025b      	lsls	r3, r3, #9
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	041b      	lsls	r3, r3, #16
 8004ce6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	061b      	lsls	r3, r3, #24
 8004cf4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004cf8:	4931      	ldr	r1, [pc, #196]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004cfe:	4b30      	ldr	r3, [pc, #192]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	492d      	ldr	r1, [pc, #180]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d10:	4b2b      	ldr	r3, [pc, #172]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	f023 0220 	bic.w	r2, r3, #32
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	4928      	ldr	r1, [pc, #160]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d22:	4b27      	ldr	r3, [pc, #156]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	4a26      	ldr	r2, [pc, #152]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d28:	f023 0310 	bic.w	r3, r3, #16
 8004d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d2e:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d32:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <RCCEx_PLL2_Config+0x160>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	69d2      	ldr	r2, [r2, #28]
 8004d3a:	00d2      	lsls	r2, r2, #3
 8004d3c:	4920      	ldr	r1, [pc, #128]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d42:	4b1f      	ldr	r3, [pc, #124]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	4a1e      	ldr	r2, [pc, #120]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d48:	f043 0310 	orr.w	r3, r3, #16
 8004d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d106      	bne.n	8004d62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d54:	4b1a      	ldr	r3, [pc, #104]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	4a19      	ldr	r2, [pc, #100]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d60:	e00f      	b.n	8004d82 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d106      	bne.n	8004d76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d68:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	4a14      	ldr	r2, [pc, #80]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d74:	e005      	b.n	8004d82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d76:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	4a11      	ldr	r2, [pc, #68]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d82:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a0e      	ldr	r2, [pc, #56]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8e:	f7fc fbdf 	bl	8001550 <HAL_GetTick>
 8004d92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d94:	e008      	b.n	8004da8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d96:	f7fc fbdb 	bl	8001550 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e006      	b.n	8004db6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004da8:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f0      	beq.n	8004d96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	58024400 	.word	0x58024400
 8004dc4:	ffff0007 	.word	0xffff0007

08004dc8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dd6:	4b53      	ldr	r3, [pc, #332]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d101      	bne.n	8004de6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e099      	b.n	8004f1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004de6:	4b4f      	ldr	r3, [pc, #316]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a4e      	ldr	r2, [pc, #312]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df2:	f7fc fbad 	bl	8001550 <HAL_GetTick>
 8004df6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004df8:	e008      	b.n	8004e0c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dfa:	f7fc fba9 	bl	8001550 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e086      	b.n	8004f1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e0c:	4b45      	ldr	r3, [pc, #276]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f0      	bne.n	8004dfa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e18:	4b42      	ldr	r3, [pc, #264]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	051b      	lsls	r3, r3, #20
 8004e26:	493f      	ldr	r1, [pc, #252]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	628b      	str	r3, [r1, #40]	; 0x28
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	025b      	lsls	r3, r3, #9
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	061b      	lsls	r3, r3, #24
 8004e58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e5c:	4931      	ldr	r1, [pc, #196]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e62:	4b30      	ldr	r3, [pc, #192]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	492d      	ldr	r1, [pc, #180]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e74:	4b2b      	ldr	r3, [pc, #172]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	4928      	ldr	r1, [pc, #160]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e86:	4b27      	ldr	r3, [pc, #156]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	4a26      	ldr	r2, [pc, #152]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e92:	4b24      	ldr	r3, [pc, #144]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e96:	4b24      	ldr	r3, [pc, #144]	; (8004f28 <RCCEx_PLL3_Config+0x160>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	69d2      	ldr	r2, [r2, #28]
 8004e9e:	00d2      	lsls	r2, r2, #3
 8004ea0:	4920      	ldr	r1, [pc, #128]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ea6:	4b1f      	ldr	r3, [pc, #124]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	4a1e      	ldr	r2, [pc, #120]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004eb8:	4b1a      	ldr	r3, [pc, #104]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	4a19      	ldr	r2, [pc, #100]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004ebe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ec2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ec4:	e00f      	b.n	8004ee6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d106      	bne.n	8004eda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ecc:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	4a14      	ldr	r2, [pc, #80]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004ed2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ed6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ed8:	e005      	b.n	8004ee6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004eda:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004ee0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ee4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ee6:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a0e      	ldr	r2, [pc, #56]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef2:	f7fc fb2d 	bl	8001550 <HAL_GetTick>
 8004ef6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ef8:	e008      	b.n	8004f0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004efa:	f7fc fb29 	bl	8001550 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e006      	b.n	8004f1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	58024400 	.word	0x58024400
 8004f28:	ffff0007 	.word	0xffff0007

08004f2c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e10f      	b.n	800515e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a87      	ldr	r2, [pc, #540]	; (8005168 <HAL_SPI_Init+0x23c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00f      	beq.n	8004f6e <HAL_SPI_Init+0x42>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a86      	ldr	r2, [pc, #536]	; (800516c <HAL_SPI_Init+0x240>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00a      	beq.n	8004f6e <HAL_SPI_Init+0x42>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a84      	ldr	r2, [pc, #528]	; (8005170 <HAL_SPI_Init+0x244>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d005      	beq.n	8004f6e <HAL_SPI_Init+0x42>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	2b0f      	cmp	r3, #15
 8004f68:	d901      	bls.n	8004f6e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e0f7      	b.n	800515e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f900 	bl	8005174 <SPI_GetPacketSize>
 8004f74:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a7b      	ldr	r2, [pc, #492]	; (8005168 <HAL_SPI_Init+0x23c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00c      	beq.n	8004f9a <HAL_SPI_Init+0x6e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a79      	ldr	r2, [pc, #484]	; (800516c <HAL_SPI_Init+0x240>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d007      	beq.n	8004f9a <HAL_SPI_Init+0x6e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a78      	ldr	r2, [pc, #480]	; (8005170 <HAL_SPI_Init+0x244>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d002      	beq.n	8004f9a <HAL_SPI_Init+0x6e>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d811      	bhi.n	8004fbe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f9e:	4a72      	ldr	r2, [pc, #456]	; (8005168 <HAL_SPI_Init+0x23c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d009      	beq.n	8004fb8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a70      	ldr	r2, [pc, #448]	; (800516c <HAL_SPI_Init+0x240>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <HAL_SPI_Init+0x8c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a6f      	ldr	r2, [pc, #444]	; (8005170 <HAL_SPI_Init+0x244>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d104      	bne.n	8004fc2 <HAL_SPI_Init+0x96>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b10      	cmp	r3, #16
 8004fbc:	d901      	bls.n	8004fc2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e0cd      	b.n	800515e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fb fffc 	bl	8000fd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0201 	bic.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004ffe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005008:	d119      	bne.n	800503e <HAL_SPI_Init+0x112>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005012:	d103      	bne.n	800501c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10c      	bne.n	800503e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005028:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800502c:	d107      	bne.n	800503e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800503c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00f      	beq.n	800506a <HAL_SPI_Init+0x13e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	2b06      	cmp	r3, #6
 8005050:	d90b      	bls.n	800506a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e007      	b.n	800507a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005078:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69da      	ldr	r2, [r3, #28]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	431a      	orrs	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508c:	ea42 0103 	orr.w	r1, r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050da:	ea42 0103 	orr.w	r1, r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d113      	bne.n	800511a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005104:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005118:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0201 	bic.w	r2, r2, #1
 8005128:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40013000 	.word	0x40013000
 800516c:	40003800 	.word	0x40003800
 8005170:	40003c00 	.word	0x40003c00

08005174 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005180:	095b      	lsrs	r3, r3, #5
 8005182:	3301      	adds	r3, #1
 8005184:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	3301      	adds	r3, #1
 800518c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	3307      	adds	r3, #7
 8005192:	08db      	lsrs	r3, r3, #3
 8005194:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	fb02 f303 	mul.w	r3, r2, r3
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b082      	sub	sp, #8
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e042      	b.n	8005242 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fb ff68 	bl	80010a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2224      	movs	r2, #36	; 0x24
 80051d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0201 	bic.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fd91 	bl	8005d1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f826 	bl	800524c <UART_SetConfig>
 8005200:	4603      	mov	r3, r0
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e01b      	b.n	8005242 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005218:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005228:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0201 	orr.w	r2, r2, #1
 8005238:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fe10 	bl	8005e60 <UART_CheckIdleState>
 8005240:	4603      	mov	r3, r0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800524c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005250:	b092      	sub	sp, #72	; 0x48
 8005252:	af00      	add	r7, sp, #0
 8005254:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	431a      	orrs	r2, r3
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	431a      	orrs	r2, r3
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	4313      	orrs	r3, r2
 8005272:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	4bbe      	ldr	r3, [pc, #760]	; (8005574 <UART_SetConfig+0x328>)
 800527c:	4013      	ands	r3, r2
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	6812      	ldr	r2, [r2, #0]
 8005282:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005284:	430b      	orrs	r3, r1
 8005286:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4ab3      	ldr	r2, [pc, #716]	; (8005578 <UART_SetConfig+0x32c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d004      	beq.n	80052b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052b4:	4313      	orrs	r3, r2
 80052b6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	4baf      	ldr	r3, [pc, #700]	; (800557c <UART_SetConfig+0x330>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	6812      	ldr	r2, [r2, #0]
 80052c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052c8:	430b      	orrs	r3, r1
 80052ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	f023 010f 	bic.w	r1, r3, #15
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4aa6      	ldr	r2, [pc, #664]	; (8005580 <UART_SetConfig+0x334>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d177      	bne.n	80053dc <UART_SetConfig+0x190>
 80052ec:	4ba5      	ldr	r3, [pc, #660]	; (8005584 <UART_SetConfig+0x338>)
 80052ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052f4:	2b28      	cmp	r3, #40	; 0x28
 80052f6:	d86d      	bhi.n	80053d4 <UART_SetConfig+0x188>
 80052f8:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <UART_SetConfig+0xb4>)
 80052fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fe:	bf00      	nop
 8005300:	080053a5 	.word	0x080053a5
 8005304:	080053d5 	.word	0x080053d5
 8005308:	080053d5 	.word	0x080053d5
 800530c:	080053d5 	.word	0x080053d5
 8005310:	080053d5 	.word	0x080053d5
 8005314:	080053d5 	.word	0x080053d5
 8005318:	080053d5 	.word	0x080053d5
 800531c:	080053d5 	.word	0x080053d5
 8005320:	080053ad 	.word	0x080053ad
 8005324:	080053d5 	.word	0x080053d5
 8005328:	080053d5 	.word	0x080053d5
 800532c:	080053d5 	.word	0x080053d5
 8005330:	080053d5 	.word	0x080053d5
 8005334:	080053d5 	.word	0x080053d5
 8005338:	080053d5 	.word	0x080053d5
 800533c:	080053d5 	.word	0x080053d5
 8005340:	080053b5 	.word	0x080053b5
 8005344:	080053d5 	.word	0x080053d5
 8005348:	080053d5 	.word	0x080053d5
 800534c:	080053d5 	.word	0x080053d5
 8005350:	080053d5 	.word	0x080053d5
 8005354:	080053d5 	.word	0x080053d5
 8005358:	080053d5 	.word	0x080053d5
 800535c:	080053d5 	.word	0x080053d5
 8005360:	080053bd 	.word	0x080053bd
 8005364:	080053d5 	.word	0x080053d5
 8005368:	080053d5 	.word	0x080053d5
 800536c:	080053d5 	.word	0x080053d5
 8005370:	080053d5 	.word	0x080053d5
 8005374:	080053d5 	.word	0x080053d5
 8005378:	080053d5 	.word	0x080053d5
 800537c:	080053d5 	.word	0x080053d5
 8005380:	080053c5 	.word	0x080053c5
 8005384:	080053d5 	.word	0x080053d5
 8005388:	080053d5 	.word	0x080053d5
 800538c:	080053d5 	.word	0x080053d5
 8005390:	080053d5 	.word	0x080053d5
 8005394:	080053d5 	.word	0x080053d5
 8005398:	080053d5 	.word	0x080053d5
 800539c:	080053d5 	.word	0x080053d5
 80053a0:	080053cd 	.word	0x080053cd
 80053a4:	2301      	movs	r3, #1
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053aa:	e222      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80053ac:	2304      	movs	r3, #4
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b2:	e21e      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80053b4:	2308      	movs	r3, #8
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ba:	e21a      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80053bc:	2310      	movs	r3, #16
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c2:	e216      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80053c4:	2320      	movs	r3, #32
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ca:	e212      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80053cc:	2340      	movs	r3, #64	; 0x40
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d2:	e20e      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80053d4:	2380      	movs	r3, #128	; 0x80
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053da:	e20a      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a69      	ldr	r2, [pc, #420]	; (8005588 <UART_SetConfig+0x33c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d130      	bne.n	8005448 <UART_SetConfig+0x1fc>
 80053e6:	4b67      	ldr	r3, [pc, #412]	; (8005584 <UART_SetConfig+0x338>)
 80053e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	2b05      	cmp	r3, #5
 80053f0:	d826      	bhi.n	8005440 <UART_SetConfig+0x1f4>
 80053f2:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <UART_SetConfig+0x1ac>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	08005411 	.word	0x08005411
 80053fc:	08005419 	.word	0x08005419
 8005400:	08005421 	.word	0x08005421
 8005404:	08005429 	.word	0x08005429
 8005408:	08005431 	.word	0x08005431
 800540c:	08005439 	.word	0x08005439
 8005410:	2300      	movs	r3, #0
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005416:	e1ec      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005418:	2304      	movs	r3, #4
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541e:	e1e8      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005420:	2308      	movs	r3, #8
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005426:	e1e4      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005428:	2310      	movs	r3, #16
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542e:	e1e0      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005430:	2320      	movs	r3, #32
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005436:	e1dc      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005438:	2340      	movs	r3, #64	; 0x40
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543e:	e1d8      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005440:	2380      	movs	r3, #128	; 0x80
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005446:	e1d4      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a4f      	ldr	r2, [pc, #316]	; (800558c <UART_SetConfig+0x340>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d130      	bne.n	80054b4 <UART_SetConfig+0x268>
 8005452:	4b4c      	ldr	r3, [pc, #304]	; (8005584 <UART_SetConfig+0x338>)
 8005454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	2b05      	cmp	r3, #5
 800545c:	d826      	bhi.n	80054ac <UART_SetConfig+0x260>
 800545e:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <UART_SetConfig+0x218>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	0800547d 	.word	0x0800547d
 8005468:	08005485 	.word	0x08005485
 800546c:	0800548d 	.word	0x0800548d
 8005470:	08005495 	.word	0x08005495
 8005474:	0800549d 	.word	0x0800549d
 8005478:	080054a5 	.word	0x080054a5
 800547c:	2300      	movs	r3, #0
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005482:	e1b6      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005484:	2304      	movs	r3, #4
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548a:	e1b2      	b.n	80057f2 <UART_SetConfig+0x5a6>
 800548c:	2308      	movs	r3, #8
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005492:	e1ae      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005494:	2310      	movs	r3, #16
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549a:	e1aa      	b.n	80057f2 <UART_SetConfig+0x5a6>
 800549c:	2320      	movs	r3, #32
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a2:	e1a6      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80054a4:	2340      	movs	r3, #64	; 0x40
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054aa:	e1a2      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80054ac:	2380      	movs	r3, #128	; 0x80
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b2:	e19e      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a35      	ldr	r2, [pc, #212]	; (8005590 <UART_SetConfig+0x344>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d130      	bne.n	8005520 <UART_SetConfig+0x2d4>
 80054be:	4b31      	ldr	r3, [pc, #196]	; (8005584 <UART_SetConfig+0x338>)
 80054c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	d826      	bhi.n	8005518 <UART_SetConfig+0x2cc>
 80054ca:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <UART_SetConfig+0x284>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	080054e9 	.word	0x080054e9
 80054d4:	080054f1 	.word	0x080054f1
 80054d8:	080054f9 	.word	0x080054f9
 80054dc:	08005501 	.word	0x08005501
 80054e0:	08005509 	.word	0x08005509
 80054e4:	08005511 	.word	0x08005511
 80054e8:	2300      	movs	r3, #0
 80054ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ee:	e180      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80054f0:	2304      	movs	r3, #4
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054f6:	e17c      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80054f8:	2308      	movs	r3, #8
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054fe:	e178      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005500:	2310      	movs	r3, #16
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005506:	e174      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005508:	2320      	movs	r3, #32
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550e:	e170      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005510:	2340      	movs	r3, #64	; 0x40
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005516:	e16c      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005518:	2380      	movs	r3, #128	; 0x80
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551e:	e168      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1b      	ldr	r2, [pc, #108]	; (8005594 <UART_SetConfig+0x348>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d142      	bne.n	80055b0 <UART_SetConfig+0x364>
 800552a:	4b16      	ldr	r3, [pc, #88]	; (8005584 <UART_SetConfig+0x338>)
 800552c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	2b05      	cmp	r3, #5
 8005534:	d838      	bhi.n	80055a8 <UART_SetConfig+0x35c>
 8005536:	a201      	add	r2, pc, #4	; (adr r2, 800553c <UART_SetConfig+0x2f0>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	08005555 	.word	0x08005555
 8005540:	0800555d 	.word	0x0800555d
 8005544:	08005565 	.word	0x08005565
 8005548:	0800556d 	.word	0x0800556d
 800554c:	08005599 	.word	0x08005599
 8005550:	080055a1 	.word	0x080055a1
 8005554:	2300      	movs	r3, #0
 8005556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555a:	e14a      	b.n	80057f2 <UART_SetConfig+0x5a6>
 800555c:	2304      	movs	r3, #4
 800555e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005562:	e146      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005564:	2308      	movs	r3, #8
 8005566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556a:	e142      	b.n	80057f2 <UART_SetConfig+0x5a6>
 800556c:	2310      	movs	r3, #16
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005572:	e13e      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005574:	cfff69f3 	.word	0xcfff69f3
 8005578:	58000c00 	.word	0x58000c00
 800557c:	11fff4ff 	.word	0x11fff4ff
 8005580:	40011000 	.word	0x40011000
 8005584:	58024400 	.word	0x58024400
 8005588:	40004400 	.word	0x40004400
 800558c:	40004800 	.word	0x40004800
 8005590:	40004c00 	.word	0x40004c00
 8005594:	40005000 	.word	0x40005000
 8005598:	2320      	movs	r3, #32
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559e:	e128      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80055a0:	2340      	movs	r3, #64	; 0x40
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a6:	e124      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80055a8:	2380      	movs	r3, #128	; 0x80
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ae:	e120      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4acb      	ldr	r2, [pc, #812]	; (80058e4 <UART_SetConfig+0x698>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d176      	bne.n	80056a8 <UART_SetConfig+0x45c>
 80055ba:	4bcb      	ldr	r3, [pc, #812]	; (80058e8 <UART_SetConfig+0x69c>)
 80055bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055c2:	2b28      	cmp	r3, #40	; 0x28
 80055c4:	d86c      	bhi.n	80056a0 <UART_SetConfig+0x454>
 80055c6:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <UART_SetConfig+0x380>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	08005671 	.word	0x08005671
 80055d0:	080056a1 	.word	0x080056a1
 80055d4:	080056a1 	.word	0x080056a1
 80055d8:	080056a1 	.word	0x080056a1
 80055dc:	080056a1 	.word	0x080056a1
 80055e0:	080056a1 	.word	0x080056a1
 80055e4:	080056a1 	.word	0x080056a1
 80055e8:	080056a1 	.word	0x080056a1
 80055ec:	08005679 	.word	0x08005679
 80055f0:	080056a1 	.word	0x080056a1
 80055f4:	080056a1 	.word	0x080056a1
 80055f8:	080056a1 	.word	0x080056a1
 80055fc:	080056a1 	.word	0x080056a1
 8005600:	080056a1 	.word	0x080056a1
 8005604:	080056a1 	.word	0x080056a1
 8005608:	080056a1 	.word	0x080056a1
 800560c:	08005681 	.word	0x08005681
 8005610:	080056a1 	.word	0x080056a1
 8005614:	080056a1 	.word	0x080056a1
 8005618:	080056a1 	.word	0x080056a1
 800561c:	080056a1 	.word	0x080056a1
 8005620:	080056a1 	.word	0x080056a1
 8005624:	080056a1 	.word	0x080056a1
 8005628:	080056a1 	.word	0x080056a1
 800562c:	08005689 	.word	0x08005689
 8005630:	080056a1 	.word	0x080056a1
 8005634:	080056a1 	.word	0x080056a1
 8005638:	080056a1 	.word	0x080056a1
 800563c:	080056a1 	.word	0x080056a1
 8005640:	080056a1 	.word	0x080056a1
 8005644:	080056a1 	.word	0x080056a1
 8005648:	080056a1 	.word	0x080056a1
 800564c:	08005691 	.word	0x08005691
 8005650:	080056a1 	.word	0x080056a1
 8005654:	080056a1 	.word	0x080056a1
 8005658:	080056a1 	.word	0x080056a1
 800565c:	080056a1 	.word	0x080056a1
 8005660:	080056a1 	.word	0x080056a1
 8005664:	080056a1 	.word	0x080056a1
 8005668:	080056a1 	.word	0x080056a1
 800566c:	08005699 	.word	0x08005699
 8005670:	2301      	movs	r3, #1
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005676:	e0bc      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005678:	2304      	movs	r3, #4
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567e:	e0b8      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005680:	2308      	movs	r3, #8
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005686:	e0b4      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005688:	2310      	movs	r3, #16
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568e:	e0b0      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005690:	2320      	movs	r3, #32
 8005692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005696:	e0ac      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005698:	2340      	movs	r3, #64	; 0x40
 800569a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569e:	e0a8      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80056a0:	2380      	movs	r3, #128	; 0x80
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056a6:	e0a4      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a8f      	ldr	r2, [pc, #572]	; (80058ec <UART_SetConfig+0x6a0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d130      	bne.n	8005714 <UART_SetConfig+0x4c8>
 80056b2:	4b8d      	ldr	r3, [pc, #564]	; (80058e8 <UART_SetConfig+0x69c>)
 80056b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	2b05      	cmp	r3, #5
 80056bc:	d826      	bhi.n	800570c <UART_SetConfig+0x4c0>
 80056be:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <UART_SetConfig+0x478>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	080056dd 	.word	0x080056dd
 80056c8:	080056e5 	.word	0x080056e5
 80056cc:	080056ed 	.word	0x080056ed
 80056d0:	080056f5 	.word	0x080056f5
 80056d4:	080056fd 	.word	0x080056fd
 80056d8:	08005705 	.word	0x08005705
 80056dc:	2300      	movs	r3, #0
 80056de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e2:	e086      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80056e4:	2304      	movs	r3, #4
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ea:	e082      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80056ec:	2308      	movs	r3, #8
 80056ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f2:	e07e      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80056f4:	2310      	movs	r3, #16
 80056f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056fa:	e07a      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80056fc:	2320      	movs	r3, #32
 80056fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005702:	e076      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005704:	2340      	movs	r3, #64	; 0x40
 8005706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800570a:	e072      	b.n	80057f2 <UART_SetConfig+0x5a6>
 800570c:	2380      	movs	r3, #128	; 0x80
 800570e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005712:	e06e      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a75      	ldr	r2, [pc, #468]	; (80058f0 <UART_SetConfig+0x6a4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d130      	bne.n	8005780 <UART_SetConfig+0x534>
 800571e:	4b72      	ldr	r3, [pc, #456]	; (80058e8 <UART_SetConfig+0x69c>)
 8005720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	2b05      	cmp	r3, #5
 8005728:	d826      	bhi.n	8005778 <UART_SetConfig+0x52c>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <UART_SetConfig+0x4e4>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005749 	.word	0x08005749
 8005734:	08005751 	.word	0x08005751
 8005738:	08005759 	.word	0x08005759
 800573c:	08005761 	.word	0x08005761
 8005740:	08005769 	.word	0x08005769
 8005744:	08005771 	.word	0x08005771
 8005748:	2300      	movs	r3, #0
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574e:	e050      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005750:	2304      	movs	r3, #4
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005756:	e04c      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005758:	2308      	movs	r3, #8
 800575a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800575e:	e048      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005760:	2310      	movs	r3, #16
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005766:	e044      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005768:	2320      	movs	r3, #32
 800576a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800576e:	e040      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005770:	2340      	movs	r3, #64	; 0x40
 8005772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005776:	e03c      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005778:	2380      	movs	r3, #128	; 0x80
 800577a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800577e:	e038      	b.n	80057f2 <UART_SetConfig+0x5a6>
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a5b      	ldr	r2, [pc, #364]	; (80058f4 <UART_SetConfig+0x6a8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d130      	bne.n	80057ec <UART_SetConfig+0x5a0>
 800578a:	4b57      	ldr	r3, [pc, #348]	; (80058e8 <UART_SetConfig+0x69c>)
 800578c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	2b05      	cmp	r3, #5
 8005794:	d826      	bhi.n	80057e4 <UART_SetConfig+0x598>
 8005796:	a201      	add	r2, pc, #4	; (adr r2, 800579c <UART_SetConfig+0x550>)
 8005798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579c:	080057b5 	.word	0x080057b5
 80057a0:	080057bd 	.word	0x080057bd
 80057a4:	080057c5 	.word	0x080057c5
 80057a8:	080057cd 	.word	0x080057cd
 80057ac:	080057d5 	.word	0x080057d5
 80057b0:	080057dd 	.word	0x080057dd
 80057b4:	2302      	movs	r3, #2
 80057b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ba:	e01a      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80057bc:	2304      	movs	r3, #4
 80057be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057c2:	e016      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80057c4:	2308      	movs	r3, #8
 80057c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ca:	e012      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80057cc:	2310      	movs	r3, #16
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057d2:	e00e      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80057d4:	2320      	movs	r3, #32
 80057d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057da:	e00a      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80057dc:	2340      	movs	r3, #64	; 0x40
 80057de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057e2:	e006      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80057e4:	2380      	movs	r3, #128	; 0x80
 80057e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ea:	e002      	b.n	80057f2 <UART_SetConfig+0x5a6>
 80057ec:	2380      	movs	r3, #128	; 0x80
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a3f      	ldr	r2, [pc, #252]	; (80058f4 <UART_SetConfig+0x6a8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	f040 80f8 	bne.w	80059ee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005802:	2b20      	cmp	r3, #32
 8005804:	dc46      	bgt.n	8005894 <UART_SetConfig+0x648>
 8005806:	2b02      	cmp	r3, #2
 8005808:	f2c0 8082 	blt.w	8005910 <UART_SetConfig+0x6c4>
 800580c:	3b02      	subs	r3, #2
 800580e:	2b1e      	cmp	r3, #30
 8005810:	d87e      	bhi.n	8005910 <UART_SetConfig+0x6c4>
 8005812:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <UART_SetConfig+0x5cc>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	0800589b 	.word	0x0800589b
 800581c:	08005911 	.word	0x08005911
 8005820:	080058a3 	.word	0x080058a3
 8005824:	08005911 	.word	0x08005911
 8005828:	08005911 	.word	0x08005911
 800582c:	08005911 	.word	0x08005911
 8005830:	080058b3 	.word	0x080058b3
 8005834:	08005911 	.word	0x08005911
 8005838:	08005911 	.word	0x08005911
 800583c:	08005911 	.word	0x08005911
 8005840:	08005911 	.word	0x08005911
 8005844:	08005911 	.word	0x08005911
 8005848:	08005911 	.word	0x08005911
 800584c:	08005911 	.word	0x08005911
 8005850:	080058c3 	.word	0x080058c3
 8005854:	08005911 	.word	0x08005911
 8005858:	08005911 	.word	0x08005911
 800585c:	08005911 	.word	0x08005911
 8005860:	08005911 	.word	0x08005911
 8005864:	08005911 	.word	0x08005911
 8005868:	08005911 	.word	0x08005911
 800586c:	08005911 	.word	0x08005911
 8005870:	08005911 	.word	0x08005911
 8005874:	08005911 	.word	0x08005911
 8005878:	08005911 	.word	0x08005911
 800587c:	08005911 	.word	0x08005911
 8005880:	08005911 	.word	0x08005911
 8005884:	08005911 	.word	0x08005911
 8005888:	08005911 	.word	0x08005911
 800588c:	08005911 	.word	0x08005911
 8005890:	08005903 	.word	0x08005903
 8005894:	2b40      	cmp	r3, #64	; 0x40
 8005896:	d037      	beq.n	8005908 <UART_SetConfig+0x6bc>
 8005898:	e03a      	b.n	8005910 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800589a:	f7fe ff25 	bl	80046e8 <HAL_RCCEx_GetD3PCLK1Freq>
 800589e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058a0:	e03c      	b.n	800591c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe ff34 	bl	8004714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058b0:	e034      	b.n	800591c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058b2:	f107 0318 	add.w	r3, r7, #24
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff f880 	bl	80049bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058c0:	e02c      	b.n	800591c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058c2:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <UART_SetConfig+0x69c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d016      	beq.n	80058fc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058ce:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <UART_SetConfig+0x69c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	08db      	lsrs	r3, r3, #3
 80058d4:	f003 0303 	and.w	r3, r3, #3
 80058d8:	4a07      	ldr	r2, [pc, #28]	; (80058f8 <UART_SetConfig+0x6ac>)
 80058da:	fa22 f303 	lsr.w	r3, r2, r3
 80058de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058e0:	e01c      	b.n	800591c <UART_SetConfig+0x6d0>
 80058e2:	bf00      	nop
 80058e4:	40011400 	.word	0x40011400
 80058e8:	58024400 	.word	0x58024400
 80058ec:	40007800 	.word	0x40007800
 80058f0:	40007c00 	.word	0x40007c00
 80058f4:	58000c00 	.word	0x58000c00
 80058f8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80058fc:	4b9d      	ldr	r3, [pc, #628]	; (8005b74 <UART_SetConfig+0x928>)
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005900:	e00c      	b.n	800591c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005902:	4b9d      	ldr	r3, [pc, #628]	; (8005b78 <UART_SetConfig+0x92c>)
 8005904:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005906:	e009      	b.n	800591c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800590c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800590e:	e005      	b.n	800591c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800591a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800591c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 81de 	beq.w	8005ce0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	4a94      	ldr	r2, [pc, #592]	; (8005b7c <UART_SetConfig+0x930>)
 800592a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800592e:	461a      	mov	r2, r3
 8005930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005932:	fbb3 f3f2 	udiv	r3, r3, r2
 8005936:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	4613      	mov	r3, r2
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	4413      	add	r3, r2
 8005942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005944:	429a      	cmp	r2, r3
 8005946:	d305      	bcc.n	8005954 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800594e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005950:	429a      	cmp	r2, r3
 8005952:	d903      	bls.n	800595c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800595a:	e1c1      	b.n	8005ce0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800595c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800595e:	2200      	movs	r2, #0
 8005960:	60bb      	str	r3, [r7, #8]
 8005962:	60fa      	str	r2, [r7, #12]
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	4a84      	ldr	r2, [pc, #528]	; (8005b7c <UART_SetConfig+0x930>)
 800596a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800596e:	b29b      	uxth	r3, r3
 8005970:	2200      	movs	r2, #0
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	607a      	str	r2, [r7, #4]
 8005976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800597a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800597e:	f7fa fcab 	bl	80002d8 <__aeabi_uldivmod>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4610      	mov	r0, r2
 8005988:	4619      	mov	r1, r3
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	020b      	lsls	r3, r1, #8
 8005994:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005998:	0202      	lsls	r2, r0, #8
 800599a:	6979      	ldr	r1, [r7, #20]
 800599c:	6849      	ldr	r1, [r1, #4]
 800599e:	0849      	lsrs	r1, r1, #1
 80059a0:	2000      	movs	r0, #0
 80059a2:	460c      	mov	r4, r1
 80059a4:	4605      	mov	r5, r0
 80059a6:	eb12 0804 	adds.w	r8, r2, r4
 80059aa:	eb43 0905 	adc.w	r9, r3, r5
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	469a      	mov	sl, r3
 80059b6:	4693      	mov	fp, r2
 80059b8:	4652      	mov	r2, sl
 80059ba:	465b      	mov	r3, fp
 80059bc:	4640      	mov	r0, r8
 80059be:	4649      	mov	r1, r9
 80059c0:	f7fa fc8a 	bl	80002d8 <__aeabi_uldivmod>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4613      	mov	r3, r2
 80059ca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059d2:	d308      	bcc.n	80059e6 <UART_SetConfig+0x79a>
 80059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059da:	d204      	bcs.n	80059e6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059e2:	60da      	str	r2, [r3, #12]
 80059e4:	e17c      	b.n	8005ce0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80059ec:	e178      	b.n	8005ce0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059f6:	f040 80c5 	bne.w	8005b84 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80059fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80059fe:	2b20      	cmp	r3, #32
 8005a00:	dc48      	bgt.n	8005a94 <UART_SetConfig+0x848>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	db7b      	blt.n	8005afe <UART_SetConfig+0x8b2>
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	d879      	bhi.n	8005afe <UART_SetConfig+0x8b2>
 8005a0a:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <UART_SetConfig+0x7c4>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005a9b 	.word	0x08005a9b
 8005a14:	08005aa3 	.word	0x08005aa3
 8005a18:	08005aff 	.word	0x08005aff
 8005a1c:	08005aff 	.word	0x08005aff
 8005a20:	08005aab 	.word	0x08005aab
 8005a24:	08005aff 	.word	0x08005aff
 8005a28:	08005aff 	.word	0x08005aff
 8005a2c:	08005aff 	.word	0x08005aff
 8005a30:	08005abb 	.word	0x08005abb
 8005a34:	08005aff 	.word	0x08005aff
 8005a38:	08005aff 	.word	0x08005aff
 8005a3c:	08005aff 	.word	0x08005aff
 8005a40:	08005aff 	.word	0x08005aff
 8005a44:	08005aff 	.word	0x08005aff
 8005a48:	08005aff 	.word	0x08005aff
 8005a4c:	08005aff 	.word	0x08005aff
 8005a50:	08005acb 	.word	0x08005acb
 8005a54:	08005aff 	.word	0x08005aff
 8005a58:	08005aff 	.word	0x08005aff
 8005a5c:	08005aff 	.word	0x08005aff
 8005a60:	08005aff 	.word	0x08005aff
 8005a64:	08005aff 	.word	0x08005aff
 8005a68:	08005aff 	.word	0x08005aff
 8005a6c:	08005aff 	.word	0x08005aff
 8005a70:	08005aff 	.word	0x08005aff
 8005a74:	08005aff 	.word	0x08005aff
 8005a78:	08005aff 	.word	0x08005aff
 8005a7c:	08005aff 	.word	0x08005aff
 8005a80:	08005aff 	.word	0x08005aff
 8005a84:	08005aff 	.word	0x08005aff
 8005a88:	08005aff 	.word	0x08005aff
 8005a8c:	08005aff 	.word	0x08005aff
 8005a90:	08005af1 	.word	0x08005af1
 8005a94:	2b40      	cmp	r3, #64	; 0x40
 8005a96:	d02e      	beq.n	8005af6 <UART_SetConfig+0x8aa>
 8005a98:	e031      	b.n	8005afe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a9a:	f7fd fbef 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 8005a9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005aa0:	e033      	b.n	8005b0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aa2:	f7fd fc01 	bl	80032a8 <HAL_RCC_GetPCLK2Freq>
 8005aa6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005aa8:	e02f      	b.n	8005b0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe fe30 	bl	8004714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ab8:	e027      	b.n	8005b0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005aba:	f107 0318 	add.w	r3, r7, #24
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fe ff7c 	bl	80049bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ac8:	e01f      	b.n	8005b0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aca:	4b2d      	ldr	r3, [pc, #180]	; (8005b80 <UART_SetConfig+0x934>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d009      	beq.n	8005aea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ad6:	4b2a      	ldr	r3, [pc, #168]	; (8005b80 <UART_SetConfig+0x934>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	08db      	lsrs	r3, r3, #3
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	4a24      	ldr	r2, [pc, #144]	; (8005b74 <UART_SetConfig+0x928>)
 8005ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ae8:	e00f      	b.n	8005b0a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005aea:	4b22      	ldr	r3, [pc, #136]	; (8005b74 <UART_SetConfig+0x928>)
 8005aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aee:	e00c      	b.n	8005b0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005af0:	4b21      	ldr	r3, [pc, #132]	; (8005b78 <UART_SetConfig+0x92c>)
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005af4:	e009      	b.n	8005b0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005afc:	e005      	b.n	8005b0a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005b08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 80e7 	beq.w	8005ce0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	4a19      	ldr	r2, [pc, #100]	; (8005b7c <UART_SetConfig+0x930>)
 8005b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b24:	005a      	lsls	r2, r3, #1
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	085b      	lsrs	r3, r3, #1
 8005b2c:	441a      	add	r2, r3
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b36:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3a:	2b0f      	cmp	r3, #15
 8005b3c:	d916      	bls.n	8005b6c <UART_SetConfig+0x920>
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b44:	d212      	bcs.n	8005b6c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f023 030f 	bic.w	r3, r3, #15
 8005b4e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	085b      	lsrs	r3, r3, #1
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005b68:	60da      	str	r2, [r3, #12]
 8005b6a:	e0b9      	b.n	8005ce0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005b72:	e0b5      	b.n	8005ce0 <UART_SetConfig+0xa94>
 8005b74:	03d09000 	.word	0x03d09000
 8005b78:	003d0900 	.word	0x003d0900
 8005b7c:	0800644c 	.word	0x0800644c
 8005b80:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b84:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	dc49      	bgt.n	8005c20 <UART_SetConfig+0x9d4>
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	db7c      	blt.n	8005c8a <UART_SetConfig+0xa3e>
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d87a      	bhi.n	8005c8a <UART_SetConfig+0xa3e>
 8005b94:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <UART_SetConfig+0x950>)
 8005b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9a:	bf00      	nop
 8005b9c:	08005c27 	.word	0x08005c27
 8005ba0:	08005c2f 	.word	0x08005c2f
 8005ba4:	08005c8b 	.word	0x08005c8b
 8005ba8:	08005c8b 	.word	0x08005c8b
 8005bac:	08005c37 	.word	0x08005c37
 8005bb0:	08005c8b 	.word	0x08005c8b
 8005bb4:	08005c8b 	.word	0x08005c8b
 8005bb8:	08005c8b 	.word	0x08005c8b
 8005bbc:	08005c47 	.word	0x08005c47
 8005bc0:	08005c8b 	.word	0x08005c8b
 8005bc4:	08005c8b 	.word	0x08005c8b
 8005bc8:	08005c8b 	.word	0x08005c8b
 8005bcc:	08005c8b 	.word	0x08005c8b
 8005bd0:	08005c8b 	.word	0x08005c8b
 8005bd4:	08005c8b 	.word	0x08005c8b
 8005bd8:	08005c8b 	.word	0x08005c8b
 8005bdc:	08005c57 	.word	0x08005c57
 8005be0:	08005c8b 	.word	0x08005c8b
 8005be4:	08005c8b 	.word	0x08005c8b
 8005be8:	08005c8b 	.word	0x08005c8b
 8005bec:	08005c8b 	.word	0x08005c8b
 8005bf0:	08005c8b 	.word	0x08005c8b
 8005bf4:	08005c8b 	.word	0x08005c8b
 8005bf8:	08005c8b 	.word	0x08005c8b
 8005bfc:	08005c8b 	.word	0x08005c8b
 8005c00:	08005c8b 	.word	0x08005c8b
 8005c04:	08005c8b 	.word	0x08005c8b
 8005c08:	08005c8b 	.word	0x08005c8b
 8005c0c:	08005c8b 	.word	0x08005c8b
 8005c10:	08005c8b 	.word	0x08005c8b
 8005c14:	08005c8b 	.word	0x08005c8b
 8005c18:	08005c8b 	.word	0x08005c8b
 8005c1c:	08005c7d 	.word	0x08005c7d
 8005c20:	2b40      	cmp	r3, #64	; 0x40
 8005c22:	d02e      	beq.n	8005c82 <UART_SetConfig+0xa36>
 8005c24:	e031      	b.n	8005c8a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c26:	f7fd fb29 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 8005c2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c2c:	e033      	b.n	8005c96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c2e:	f7fd fb3b 	bl	80032a8 <HAL_RCC_GetPCLK2Freq>
 8005c32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c34:	e02f      	b.n	8005c96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fe fd6a 	bl	8004714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c44:	e027      	b.n	8005c96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c46:	f107 0318 	add.w	r3, r7, #24
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fe feb6 	bl	80049bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c54:	e01f      	b.n	8005c96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c56:	4b2d      	ldr	r3, [pc, #180]	; (8005d0c <UART_SetConfig+0xac0>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d009      	beq.n	8005c76 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c62:	4b2a      	ldr	r3, [pc, #168]	; (8005d0c <UART_SetConfig+0xac0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	08db      	lsrs	r3, r3, #3
 8005c68:	f003 0303 	and.w	r3, r3, #3
 8005c6c:	4a28      	ldr	r2, [pc, #160]	; (8005d10 <UART_SetConfig+0xac4>)
 8005c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c74:	e00f      	b.n	8005c96 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005c76:	4b26      	ldr	r3, [pc, #152]	; (8005d10 <UART_SetConfig+0xac4>)
 8005c78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c7a:	e00c      	b.n	8005c96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c7c:	4b25      	ldr	r3, [pc, #148]	; (8005d14 <UART_SetConfig+0xac8>)
 8005c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c80:	e009      	b.n	8005c96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c88:	e005      	b.n	8005c96 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005c94:	bf00      	nop
    }

    if (pclk != 0U)
 8005c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d021      	beq.n	8005ce0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	4a1d      	ldr	r2, [pc, #116]	; (8005d18 <UART_SetConfig+0xacc>)
 8005ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005caa:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	085b      	lsrs	r3, r3, #1
 8005cb4:	441a      	add	r2, r3
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cbe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc2:	2b0f      	cmp	r3, #15
 8005cc4:	d909      	bls.n	8005cda <UART_SetConfig+0xa8e>
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ccc:	d205      	bcs.n	8005cda <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60da      	str	r2, [r3, #12]
 8005cd8:	e002      	b.n	8005ce0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005cfc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3748      	adds	r7, #72	; 0x48
 8005d04:	46bd      	mov	sp, r7
 8005d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d0a:	bf00      	nop
 8005d0c:	58024400 	.word	0x58024400
 8005d10:	03d09000 	.word	0x03d09000
 8005d14:	003d0900 	.word	0x003d0900
 8005d18:	0800644c 	.word	0x0800644c

08005d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d28:	f003 0308 	and.w	r3, r3, #8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8e:	f003 0304 	and.w	r3, r3, #4
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	f003 0310 	and.w	r3, r3, #16
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d01a      	beq.n	8005e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e1a:	d10a      	bne.n	8005e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	605a      	str	r2, [r3, #4]
  }
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b098      	sub	sp, #96	; 0x60
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e70:	f7fb fb6e 	bl	8001550 <HAL_GetTick>
 8005e74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0308 	and.w	r3, r3, #8
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d12f      	bne.n	8005ee4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f88e 	bl	8005fb4 <UART_WaitOnFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d022      	beq.n	8005ee4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ebe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e6      	bne.n	8005e9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e063      	b.n	8005fac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d149      	bne.n	8005f86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ef2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005efa:	2200      	movs	r2, #0
 8005efc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f857 	bl	8005fb4 <UART_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d03c      	beq.n	8005f86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	623b      	str	r3, [r7, #32]
   return(result);
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f2c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f32:	e841 2300 	strex	r3, r2, [r1]
 8005f36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e6      	bne.n	8005f0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3308      	adds	r3, #8
 8005f44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f023 0301 	bic.w	r3, r3, #1
 8005f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f5e:	61fa      	str	r2, [r7, #28]
 8005f60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	69b9      	ldr	r1, [r7, #24]
 8005f64:	69fa      	ldr	r2, [r7, #28]
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e5      	bne.n	8005f3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e012      	b.n	8005fac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3758      	adds	r7, #88	; 0x58
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc4:	e04f      	b.n	8006066 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fcc:	d04b      	beq.n	8006066 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fce:	f7fb fabf 	bl	8001550 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d302      	bcc.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e04e      	b.n	8006086 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d037      	beq.n	8006066 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b80      	cmp	r3, #128	; 0x80
 8005ffa:	d034      	beq.n	8006066 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b40      	cmp	r3, #64	; 0x40
 8006000:	d031      	beq.n	8006066 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	f003 0308 	and.w	r3, r3, #8
 800600c:	2b08      	cmp	r3, #8
 800600e:	d110      	bne.n	8006032 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2208      	movs	r2, #8
 8006016:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 f839 	bl	8006090 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2208      	movs	r2, #8
 8006022:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e029      	b.n	8006086 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800603c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006040:	d111      	bne.n	8006066 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800604a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 f81f 	bl	8006090 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e00f      	b.n	8006086 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69da      	ldr	r2, [r3, #28]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4013      	ands	r3, r2
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	429a      	cmp	r2, r3
 8006074:	bf0c      	ite	eq
 8006076:	2301      	moveq	r3, #1
 8006078:	2300      	movne	r3, #0
 800607a:	b2db      	uxtb	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	429a      	cmp	r2, r3
 8006082:	d0a0      	beq.n	8005fc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006090:	b480      	push	{r7}
 8006092:	b095      	sub	sp, #84	; 0x54
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060b6:	643b      	str	r3, [r7, #64]	; 0x40
 80060b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e6      	bne.n	8006098 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3308      	adds	r3, #8
 80060d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	4b1e      	ldr	r3, [pc, #120]	; (8006158 <UART_EndRxTransfer+0xc8>)
 80060de:	4013      	ands	r3, r2
 80060e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3308      	adds	r3, #8
 80060e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e5      	bne.n	80060ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006102:	2b01      	cmp	r3, #1
 8006104:	d118      	bne.n	8006138 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	60bb      	str	r3, [r7, #8]
   return(result);
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f023 0310 	bic.w	r3, r3, #16
 800611a:	647b      	str	r3, [r7, #68]	; 0x44
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6979      	ldr	r1, [r7, #20]
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	613b      	str	r3, [r7, #16]
   return(result);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e6      	bne.n	8006106 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800614c:	bf00      	nop
 800614e:	3754      	adds	r7, #84	; 0x54
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	effffffe 	.word	0xeffffffe

0800615c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800616a:	2b01      	cmp	r3, #1
 800616c:	d101      	bne.n	8006172 <HAL_UARTEx_DisableFifoMode+0x16>
 800616e:	2302      	movs	r3, #2
 8006170:	e027      	b.n	80061c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2224      	movs	r2, #36	; 0x24
 800617e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0201 	bic.w	r2, r2, #1
 8006198:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d101      	bne.n	80061e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e02d      	b.n	8006242 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2224      	movs	r2, #36	; 0x24
 80061f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0201 	bic.w	r2, r2, #1
 800620c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f850 	bl	80062c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2220      	movs	r2, #32
 8006234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800625e:	2302      	movs	r3, #2
 8006260:	e02d      	b.n	80062be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2224      	movs	r2, #36	; 0x24
 800626e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0201 	bic.w	r2, r2, #1
 8006288:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f812 	bl	80062c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d108      	bne.n	80062ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062e8:	e031      	b.n	800634e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062ea:	2310      	movs	r3, #16
 80062ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062ee:	2310      	movs	r3, #16
 80062f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	0e5b      	lsrs	r3, r3, #25
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	0f5b      	lsrs	r3, r3, #29
 800630a:	b2db      	uxtb	r3, r3
 800630c:	f003 0307 	and.w	r3, r3, #7
 8006310:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006312:	7bbb      	ldrb	r3, [r7, #14]
 8006314:	7b3a      	ldrb	r2, [r7, #12]
 8006316:	4911      	ldr	r1, [pc, #68]	; (800635c <UARTEx_SetNbDataToProcess+0x94>)
 8006318:	5c8a      	ldrb	r2, [r1, r2]
 800631a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800631e:	7b3a      	ldrb	r2, [r7, #12]
 8006320:	490f      	ldr	r1, [pc, #60]	; (8006360 <UARTEx_SetNbDataToProcess+0x98>)
 8006322:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006324:	fb93 f3f2 	sdiv	r3, r3, r2
 8006328:	b29a      	uxth	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	7b7a      	ldrb	r2, [r7, #13]
 8006334:	4909      	ldr	r1, [pc, #36]	; (800635c <UARTEx_SetNbDataToProcess+0x94>)
 8006336:	5c8a      	ldrb	r2, [r1, r2]
 8006338:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800633c:	7b7a      	ldrb	r2, [r7, #13]
 800633e:	4908      	ldr	r1, [pc, #32]	; (8006360 <UARTEx_SetNbDataToProcess+0x98>)
 8006340:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006342:	fb93 f3f2 	sdiv	r3, r3, r2
 8006346:	b29a      	uxth	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800634e:	bf00      	nop
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	08006464 	.word	0x08006464
 8006360:	0800646c 	.word	0x0800646c

08006364 <memset>:
 8006364:	4402      	add	r2, r0
 8006366:	4603      	mov	r3, r0
 8006368:	4293      	cmp	r3, r2
 800636a:	d100      	bne.n	800636e <memset+0xa>
 800636c:	4770      	bx	lr
 800636e:	f803 1b01 	strb.w	r1, [r3], #1
 8006372:	e7f9      	b.n	8006368 <memset+0x4>

08006374 <__libc_init_array>:
 8006374:	b570      	push	{r4, r5, r6, lr}
 8006376:	4d0d      	ldr	r5, [pc, #52]	; (80063ac <__libc_init_array+0x38>)
 8006378:	4c0d      	ldr	r4, [pc, #52]	; (80063b0 <__libc_init_array+0x3c>)
 800637a:	1b64      	subs	r4, r4, r5
 800637c:	10a4      	asrs	r4, r4, #2
 800637e:	2600      	movs	r6, #0
 8006380:	42a6      	cmp	r6, r4
 8006382:	d109      	bne.n	8006398 <__libc_init_array+0x24>
 8006384:	4d0b      	ldr	r5, [pc, #44]	; (80063b4 <__libc_init_array+0x40>)
 8006386:	4c0c      	ldr	r4, [pc, #48]	; (80063b8 <__libc_init_array+0x44>)
 8006388:	f000 f826 	bl	80063d8 <_init>
 800638c:	1b64      	subs	r4, r4, r5
 800638e:	10a4      	asrs	r4, r4, #2
 8006390:	2600      	movs	r6, #0
 8006392:	42a6      	cmp	r6, r4
 8006394:	d105      	bne.n	80063a2 <__libc_init_array+0x2e>
 8006396:	bd70      	pop	{r4, r5, r6, pc}
 8006398:	f855 3b04 	ldr.w	r3, [r5], #4
 800639c:	4798      	blx	r3
 800639e:	3601      	adds	r6, #1
 80063a0:	e7ee      	b.n	8006380 <__libc_init_array+0xc>
 80063a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a6:	4798      	blx	r3
 80063a8:	3601      	adds	r6, #1
 80063aa:	e7f2      	b.n	8006392 <__libc_init_array+0x1e>
 80063ac:	0800647c 	.word	0x0800647c
 80063b0:	0800647c 	.word	0x0800647c
 80063b4:	0800647c 	.word	0x0800647c
 80063b8:	08006480 	.word	0x08006480

080063bc <memcpy>:
 80063bc:	440a      	add	r2, r1
 80063be:	4291      	cmp	r1, r2
 80063c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80063c4:	d100      	bne.n	80063c8 <memcpy+0xc>
 80063c6:	4770      	bx	lr
 80063c8:	b510      	push	{r4, lr}
 80063ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063d2:	4291      	cmp	r1, r2
 80063d4:	d1f9      	bne.n	80063ca <memcpy+0xe>
 80063d6:	bd10      	pop	{r4, pc}

080063d8 <_init>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	bf00      	nop
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr

080063e4 <_fini>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	bf00      	nop
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr
